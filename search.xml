<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker安装mysql8</title>
      <link href="/2024/10/17/docker-bu-shu-mysql/"/>
      <url>/2024/10/17/docker-bu-shu-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装mysql8"><a href="#Docker安装mysql8" class="headerlink" title="Docker安装mysql8"></a>Docker安装mysql8</h1><blockquote><p>​<strong>版本根据自己需求选择：这里是8.0.20</strong></p></blockquote><p>先看结果</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202402271357222.png" alt="image-20240227101312723"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202402271357267.png" alt="image-20240227101417493"></p><blockquote><p>详细步骤如下</p></blockquote><p><strong>1.下载mysql8镜像</strong></p><pre class="line-numbers language-none"><code class="language-none">docker pull mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.启动镜像</strong></p><pre class="line-numbers language-none"><code class="language-none">docker run -p 3307:3306 --name mysql8 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.配置挂载</strong></p><pre class="line-numbers language-none"><code class="language-none">创建挂载目录（请检查保证创建成功）mkdir -p /docker/mysql8.0.20/拷贝配置文件到创建的目录下docker cp  mysql8:/etc/mysql /docker/mysql8.0.20/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.删除原有容器</strong></p><pre class="line-numbers language-none"><code class="language-none">docker stop mysql8docker rm -f mysql8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>5.启动mysql挂载配置文件，数据持久化到宿主主机</strong></p><pre class="line-numbers language-none"><code class="language-none">新增my.cnf,进入到上面挂载目录下、因为已经做了cp复制。到目录下新增cd /docker/mysql8.0.20/mysql/conf.dvim my.cnf------------------------------------------------手动分割线----------------------------------------------------复制下面的内容[mysqld]user=mysqlcharacter-set-server=utf8default_authentication_plugin=mysql_native_passwordsecure_file_priv=/var/lib/mysqlexpire_logs_days=7sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTIONmax_connections=1000 [client]default-character-set=utf8 [mysql]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.run</strong></p><pre class="line-numbers language-none"><code class="language-none">运行命令：docker run \-p 3307:3306 \--name mysql8 \--privileged=true \--restart unless-stopped \-v /docker/mysql8.0.20/mysql:/etc/mysql \-v /docker/mysql8.0.20/logs:/logs \-v /docker/mysql8.0.20/data:/var/lib/mysql \-v /etc/localtime:/etc/localtime \-e MYSQL_ROOT_PASSWORD=123456 \-d mysql:8.0.20------------------------------------------------手动分割线----------------------------------------------------可编写sh脚本启动vim docker_mysql8.0.20.sh脚本代码：#!/bin/shdocker run \-p 3307:3306 \--name mysql8 \--privileged=true \--restart unless-stopped \-v /docker/mysql8.0.20/mysql:/etc/mysql \-v /docker/mysql8.0.20/logs:/logs \-v /docker/mysql8.0.20/data:/var/lib/mysql \-v /etc/localtime:/etc/localtime \-e MYSQL_ROOT_PASSWORD=123456 \-d mysql:8.0.20------------------------------------------------手动分割线----------------------------------------------------参数解释:-p 端口映射 【这里有个特殊的地方是把3306映射给了3307、后续链接数据库的时候用3307链接不用3306】--name mysql8  名称是mysql8--privileged=true 挂载文件权限设置--restart unless-stopped 设置 开机后自动重启容器-v /docker/mysql8.0.20/mysql:/etc/mysql \ 挂载配置文件【路径是上面创建的挂载路径】-v /docker/mysql8.0.20/logs:/logs \  挂载日志【路径是上面创建的挂载路径】-v /docker/mysql8.0.20/data:/var/lib/mysql \ 挂载数据文件 持久化到主机【路径是上面创建的挂载路径】-v /etc/localtime:/etc/localtime 容器时间与宿主机同步-e MYSQL_ROOT_PASSWORD=123456 设置密码-d mysql:8.0.20 后台启动mysql------------------------------------------------手动分割线----------------------------------------------------执行脚本:sh docker_mysql8.0.20.sh------------------------------------------------手动分割线----------------------------------------------------检查是否启动成功：docker ps <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.配置链接信息</strong></p><pre class="line-numbers language-none"><code class="language-none">进入mysql8 容器docker exec -it mysql8 bash在容器内登录mysqlmysql -u root -p设置远程连接权限grant all PRIVILEGES on *.* to root@'%' WITH GRANT OPTION;使用mysql数据库use mysqlMySQL5.7设置用户密码命令ALTER user 'root'@'%' IDENTIFIED BY '123456' PASSWORD EXPIRE NEVER;MySQL8.0设置用户密码命令ALTER user 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考笔记</title>
      <link href="/2023/03/04/ruan-kao-bi-ji/"/>
      <url>/2023/03/04/ruan-kao-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0001.jpg" alt="0001"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0002.jpg" alt="0002"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0003.jpg" alt="0003"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0004.jpg" alt="0004"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0005.jpg" alt="0005"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0006.jpg" alt="0006"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0007.jpg" alt="0007"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0008.jpg" alt="0008"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0009.jpg" alt="0009"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0010.jpg" alt="0010"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0011.jpg" alt="0011"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0012.jpg" alt="0012"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0013.jpg" alt="0013"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0014.jpg" alt="0014"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0015.jpg" alt="0015"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0016.jpg" alt="0016"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0017.jpg" alt="0017"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0018.jpg" alt="0018"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0019.jpg" alt="0019"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0020.jpg" alt="0020"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0021.jpg" alt="0021"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0022.jpg" alt="0022"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0023.jpg" alt="0023"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0024.jpg" alt="0024"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0025.jpg" alt="0025"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0026.jpg" alt="0026"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0027.jpg" alt="0027"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0028.jpg" alt="0028"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0029.jpg" alt="0029"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0030.jpg" alt="0030"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0031.jpg" alt="0031"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0032.jpg" alt="0032"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0033.jpg" alt="0033"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0034.jpg" alt="0034"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0035.jpg" alt="0035"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0036.jpg" alt="0036"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0037.jpg" alt="0037"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0038.jpg" alt="0038"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0039.jpg" alt="0039"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0040.jpg" alt="0040"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0041.jpg" alt="0041"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0042.jpg" alt="0042"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0043.jpg" alt="0043"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0044.jpg" alt="0044"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0045.jpg" alt="0045"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0046.jpg" alt="0046"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0047.jpg" alt="0047"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0048.jpg" alt="0048"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0049.jpg" alt="0049"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0050.jpg" alt="0050"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0051.jpg" alt="0051"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0052.jpg" alt="0052"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0053.jpg" alt="0053"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0054.jpg" alt="0054"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0055.jpg" alt="0055"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0056.jpg" alt="0056"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0057.jpg" alt="0057"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0058.jpg" alt="0058"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0059.jpg" alt="0059"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0060.jpg" alt="0060"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0061.jpg" alt="0061"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0062.jpg" alt="0062"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0063.jpg" alt="0063"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0064.jpg" alt="0064"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0065.jpg" alt="0065"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0066.jpg" alt="0066"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0067.jpg" alt="0067"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0068.jpg" alt="0068"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0069.jpg" alt="0069"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0070.jpg" alt="0070"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0071.jpg" alt="0071"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0072.jpg" alt="0072"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0073.jpg" alt="0073"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0074.jpg" alt="0074"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0075.jpg" alt="0075"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0076.jpg" alt="0076"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0077.jpg" alt="0077"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/0078.jpg" alt="0078"></p><p>本文转载自知乎：</p><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/394802434">https://zhuanlan.zhihu.com/p/394802434</a></p><p>另外再送给大家一份考试的学习资料，大家可自取。</p><p><a href="https://www.aliyundrive.com/s/1VVji6D7GHt">https://www.aliyundrive.com/s/1VVji6D7GHt</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 软考笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树详解</title>
      <link href="/2022/10/13/er-cha-shu-xiang-jie/"/>
      <url>/2022/10/13/er-cha-shu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、树的概念和结构"><a href="#一、树的概念和结构" class="headerlink" title="一、树的概念和结构"></a>一、树的概念和结构</h1><h2 id="1-1树的概念"><a href="#1-1树的概念" class="headerlink" title="1.1树的概念"></a>1.1树的概念</h2><p>树是一种非线性的数据结构，它是由n（n&gt;=0）个有限结点组成一个具有层次关系的集合(n=0 时称为空树)。把它叫做树是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p><blockquote><ul><li>有一个特殊的结点，称为根结点，根节点没有前驱结点。</li><li>除根节点外，其余结点被分成几个互不相交的集合，每个集合又是一棵结构与树类似的子树。每棵子树的根结点有且只有一个前驱，可以有0个或多个后继。</li><li>因此，树是递归定义的。</li></ul></blockquote><p>如下图，A为整个树的根节点。而B，C，D可以看做子树的根节点，在下面分别长出三棵子树。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131556978.png" alt="image-20221013090611615"></p><h2 id="1-2树的逻辑结构"><a href="#1-2树的逻辑结构" class="headerlink" title="1.2树的逻辑结构"></a>1.2树的逻辑结构</h2><p>树的逻辑结构表示有：树状表示法，文氏图表示法，凹入表示法和括号表示法。</p><h3 id="1-2-1树状表示法"><a href="#1-2-1树状表示法" class="headerlink" title="1.2.1树状表示法"></a>1.2.1树状表示法</h3><p>树是最基本的逻辑结构表示法，使用一棵树倒置表示，非常直观。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131556827.png" alt="image-20221013091243522"></p><h3 id="1-2-2文氏图标表示法"><a href="#1-2-2文氏图标表示法" class="headerlink" title="1.2.2文氏图标表示法"></a>1.2.2文氏图标表示法</h3><p>使用集合以及集合包含关系描述树结构。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131556069.png" alt="image-20221013091337123"></p><h3 id="1-2-3凹入表示法"><a href="#1-2-3凹入表示法" class="headerlink" title="1.2.3凹入表示法"></a>1.2.3凹入表示法</h3><p>使用线段的伸缩的关系描述树结构。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131556051.png" alt="image-20221013091429524"></p><h3 id="1-2-4括号表示法"><a href="#1-2-4括号表示法" class="headerlink" title="1.2.4括号表示法"></a>1.2.4括号表示法</h3><p>将树的根结点写在括号的左边，除根结点之外的其余结点写在括号中，并用逗号分隔。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131557408.png" alt="image-20221013091633741"></p><h2 id="1-3-树的一些专业术语"><a href="#1-3-树的一些专业术语" class="headerlink" title="1.3 树的一些专业术语"></a>1.3 树的一些专业术语</h2><blockquote><p>节点：树的数据元素。<br>叶节点和终端节点：度为零的节点(除根节点外，分支节点也称为内部节点)。<br>终端节点或分支节点：度不为0的节点。<br>双亲结点或父节点：上层的那个节点，也是直接的前驱。如图，C为G的父节点。<br>孩子节点或子节点：下层的节点的子树，也是直接后继。如图，G为C的子节点。<br>兄弟节点：拥有相同父节点(同一双亲下的同一层)的节点称为兄弟节点。<br>堂兄弟节点：双亲位于同一层的节点，但是并非同一个双亲。<br>节点的度：一个节点含有的子节点的个数称为该节点的度，有几个直接的后继就是几个度 ，也称为次数。<br>树的度：一棵树中最大的节点的度称为树的度。<br>树的高度或深度：树中节点的最大层次，如图，高度为4。<br>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推。<br>祖先：从跟到该节点所经分支上的所有节点。A是所有节点的祖先。<br>子孙：该节点下层子树中的任意一个节点。<br>森林：由m（m&gt;0）棵互不相交的树的集合称为森林。<br>有序树：节点各个子树从左到右有顺序关系，也称为自由树，不能互换。<br>无序树：与有序树相反，可以互换的。<br>二叉树：每个节点最多含有两个子树的树称为二叉树。<br>完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131557646.png" alt="image-20221013091841786"></p><h2 id="1-4树的性质"><a href="#1-4树的性质" class="headerlink" title="1.4树的性质"></a>1.4树的性质</h2><pre class="line-numbers language-none"><code class="language-none">性质一：树中结点数等于所有结点的度数加一根据树的定义,在一棵树中,除根结点以外,每个结点有且仅有一个直接前驱,也就是说,每个结点与指向它的 一个分支一一对应,所以,除根结点以外的结点数等于所有结点的分支数(即度数),而根结点无直接前驱,因此,还要加一。性质二：度为m的树中第i层上至多有m的（i-1）次方个结点（(m^i-1)i大于等于1）性质三：高度为h的m次树至多有（m^h）-1除以（m-1）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5树的表示法"><a href="#1-5树的表示法" class="headerlink" title="1.5树的表示法"></a>1.5树的表示法</h2><p>利用顺序存储和链式存储的特点，完全可以实现对树的存储结构的表示。介绍三种不同的表示法：双亲表示法、孩子表示法、孩子兄弟表示法。</p><h3 id="1-5-1双亲表示法"><a href="#1-5-1双亲表示法" class="headerlink" title="1.5.1双亲表示法"></a>1.5.1双亲表示法</h3><p>我们假设以一段连续空间存储树的结点，同时<strong>在每个结点中，附设一个指示器指示其双亲结点到链表中的位置</strong>。也就是说，每个结点除了直到自己是谁外，还要直到自己的双亲在哪里。就像</p><table><thead><tr><th>data</th><th>parent</th></tr></thead></table><p>其中data就是数据域，存储结点的信息。而parent是指针域，存储该结点的双亲在数组中的下标。<br>双亲表示法的结点结构定义代码：</p><pre class="line-numbers language-none"><code class="language-none">//树的双亲表示法结点结构定义#define MAX_TREE_SIZE 100typedef int TElemType;   //树结点的数据类型，目前暂定整形typedef struct PTNode{    //结点结构TElemType   data;  //结点数据域int parent;              //双亲位置}PTNode;typedef struct{              //树结构PTNode nodes[MAX_TREE_SIZE];    //结点数组int  r,n;                     //根节点的位置和结点数}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了这样的结构定义，我们就可以实现双亲定义法了。由于跟结点没有双亲，所以我们约定根结点的位置域设置为-1，这就意味着，我们所有结点都直到他双亲的位置。如图为树结构和双亲表示法的图表。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131557333.png" alt="image-20221013092815824"></p><p>我们可以通过上面快速的找到结点的双亲。但是我们要知道结点的孩子只有遍历整个结构了。</p><h3 id="1-5-2孩子表示法"><a href="#1-5-2孩子表示法" class="headerlink" title="1.5.2孩子表示法"></a>1.5.2孩子表示法</h3><p>换一种完全不同的想法。由于树中每个结点可能有很多的子树，可以考虑用多重链表，即<strong>每一个结点有多个指针域，其中每个指针指向一个子树的根节点，我们把这种方法叫做多重链表表示法</strong>。不过，树的每个结点的度，也就是它孩子个数是不同的。所以可以设计两种方案来解决。</p><ul><li>方案一</li></ul><p>指针域的个数等于树的度。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131557326.png" alt="image-20221013093016781"></p><p>如图，data就是数据域，child1····是指针域，用来指向该结点的孩子结点。</p><p>以1.5.1中的树结构为例来实现。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131557766.png" alt="image-20221013093240974"></p><p>我们可以看到。^这个符号就是代表当前这个指针域并没有用到。这样如果树的各结点的度差距过大的话，显然非常浪费空间。按需分配空间显然更好，这样就有第二种方案了。</p><ul><li>方案二</li></ul><p>每个结点指针域的个数等于该结点的度，我们专门来取一个位置来存储结点指针域的个数。如图。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131557659.png" alt="image-20221013093415543"></p><p>如图，data就是数据域。degree是度域，也就是存在该结点的孩子结点数。child1····是指针域，用来指向该结点的孩子结点。</p><p>那么对应的树图就应该是这样。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558182.png" alt="image-20221013093532615"></p><p>显然，方案二克服了浪费空间的缺点，但是由于各个结点的链表结构是不相同的，在加上要维护结点的度的数值，在运算上显然有损耗。<br>能否有更好的方法？既可以减少浪费，又能使结点结构相同。</p><p>我们把每一个结点放入顺序存储结构中是合理的，但是每个结点的孩子多少是不确定的，所以我们再对每个结点的孩子建立一个单链表来体现他们的关系。这就是我们的<strong>孩子表示法</strong>。</p><p>具体办法：<strong>把每个结点的孩子排列起来，以单链表作存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空。然后n个头指针有组成一个线性表，采用顺序存储结构，存进一个一维数组</strong>。如图。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558294.png" alt="image-20221013093648966"></p><p>为此，设计两种结构，一个是孩子链表的孩子结点。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558331.png" alt="image-20221013093730770"></p><p>child是数据域，存储某个结点在表头数组中的下标。next是指针域，用来存储某结点的下一孩子结点的指针。</p><p>另一个是表头数组的表头结点。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558439.png" alt="image-20221013093803483"></p><p>data是数据域，存储某结点的数据信息。firstchild是头指针域，存储该节点的孩子链表的头指针。</p><p>以下是孩子表示法的结构定义代码。</p><pre class="line-numbers language-none"><code class="language-none">//树的孩子表示法结点结构定义#define MAX_TREE_SIZE 100typedef int TElemType;   //树结点的数据类型，目前暂定整形typedef struct CTNode{      //孩子结点int child;          struct CTNode * next;              }*ChildPtr;typedef struct{              //表头结构TElemType data;ChildPtr firstchild;                    }CTBox;typedef struct{              //树结构CTBox nodes[MAX_TREE_SIZE];    //结点数组int  r,n;                     //根节点的位置和结点数}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以改进一下。把双亲表示法和孩子表示法综合一下，加一个双亲域。如图。（双亲孩子表示法）</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558280.png" alt="image-20221013093942008"></p><h3 id="1-5-3孩子兄弟表示法"><a href="#1-5-3孩子兄弟表示法" class="headerlink" title="1.5.3孩子兄弟表示法"></a>1.5.3孩子兄弟表示法</h3><p><strong>任何一棵树，它的结点的第一个孩子如果是唯一的，它的右兄弟如果存在也是唯一的，因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。</strong></p><p>结点结构如图。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558218.png" alt="image-20221013094030339"></p><p>data是数据域，firstchild为指针域，存储第一个孩子结点的地址，rightsib是指针域，存储该结点的右兄弟的地址。</p><p>结构定义代码如下.</p><pre class="line-numbers language-none"><code class="language-none">//树的孩子兄弟表示法结构定义typedef struct CSNode{TElemType data;struct CSNode *firstchild，*rightsib；}CSNode，*CSTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仍然以1.5.1的树为例，这种方法实现的示意图如图。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558470.png" alt="image-20221013094149781"></p><p>这种方法给查找某结点的某个孩子带来了方便，只需要通过firstchild 找到此结点的左儿子，然后再通过左儿子找到二弟，一直下去，知道找到具体的孩子。当然，如果想要找到双亲，完全可以增加一个parent 指针域来解决。</p><h1 id="二、二叉树概念及结构"><a href="#二、二叉树概念及结构" class="headerlink" title="二、二叉树概念及结构"></a>二、二叉树概念及结构</h1><h2 id="2-1二叉树的概念"><a href="#2-1二叉树的概念" class="headerlink" title="2.1二叉树的概念"></a>2.1二叉树的概念</h2><p>一棵二叉树是结点的一个有限集合，该集合或者为空，或者是由一个根节点加上两棵别称为左子树和右子树的二叉树组成。</p><blockquote><p>二叉树的特点：<br>1、每个节点最多有两棵子树，即不存在超过度大于2的结点。<br>2、二叉树的子树有左右之分，次序不能任意颠倒。<br>3、树中某结点只有一棵子树，也要区分它是左子树还是右子树。</p></blockquote><p>现实中的二叉树：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131558178.png" alt="image-20221013094551719"></p><h2 id="2-2几种特殊的二叉树"><a href="#2-2几种特殊的二叉树" class="headerlink" title="2.2几种特殊的二叉树"></a>2.2几种特殊的二叉树</h2><h3 id="2-2-1二叉排序树"><a href="#2-2-1二叉排序树" class="headerlink" title="2.2.1二叉排序树"></a>2.2.1二叉排序树</h3><p>二叉排序树，又称二叉查找树、二叉搜索树、B树。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131559621.png" alt="image-20221013094932892"></p><blockquote><p>二叉排序树是具有<strong>下列性质</strong>的二叉树：</p><ul><li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；</li><li>左、右子树也分别为二叉排序树。</li></ul></blockquote><p>也就是说，二叉排序树中，左子树都比节点小，右子树都比节点大，<strong>递归定义。</strong></p><p><strong>重要结论：</strong> 根据二叉排序树这个特点我们可以知道，<strong>二叉排序树的中序遍历一定是从小到大的</strong>。</p><blockquote><p>根据二叉排序树的定义，我们可以知道在查找某个元素时：</p><p>先比较它与根节点，相等就返回；或者根节点为空，说明树为空，也返回；<br>如果它比根节点小，就从根的左子树里进行递归查找；<br>如果它比根节点大，就从根的右子树里进行递归查找。<br>这就是一个简单的二分查找。只不过和二分查找还是有些不同的地方的。</p></blockquote><h3 id="2-2-2平衡二叉树"><a href="#2-2-2平衡二叉树" class="headerlink" title="2.2.2平衡二叉树"></a>2.2.2平衡二叉树</h3><p>平衡二叉树，又称AVL树，用于解决二叉排序树高度不确定的情况，如果二叉排序树的子树间的高度相差太大，就会让二叉排序树操作的时间复杂度升级为O(n)，为了避免这一情况，为最坏的情况做准备，就出现了平衡二叉树，使树的高度尽可能的小，其本质还是一棵二叉搜索树。</p><blockquote><p>平衡二叉树的<strong>性质</strong>：</p><ul><li>左子树和右子树的高度之差的<strong>绝对值小于等于1</strong></li><li><strong>左子树和右子树也是平衡二叉树</strong></li></ul></blockquote><p>为了方便起见，给树上的每个结点附加一个数字，给出该结点左子树与右子树的高度差，这个数字称为结点的<strong>平衡因子</strong>（BF），平衡因子=结点左子树的高度-结点右子树的高度。</p><p>因此平衡二叉树所有结点的平衡因子只能是-1、0、1,例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131623046.png" alt="image-20221013095547630"></p><h3 id="2-2-3B树类型"><a href="#2-2-3B树类型" class="headerlink" title="2.2.3B树类型"></a>2.2.3B树类型</h3><h4 id="2-2-3-1B树（B-树、B-树）"><a href="#2-2-3-1B树（B-树、B-树）" class="headerlink" title="2.2.3.1B树（B-树、B_树）"></a>2.2.3.1B树（B-树、B_树）</h4><p>一种平衡的<code>多叉树</code>，称为<code>B树</code>（或<code>B-树</code>、<code>B_树</code>，<code>B：balanced</code>说明B树和平衡树有关系）。</p><pre class="line-numbers language-none"><code class="language-none">一棵m阶B树是一棵平衡的m路搜索树，它或者是空树，或者是满足下列性质的树：1.树中每个结点至多有m棵子树。(即至多含有m-1个关键字，两颗子树指针夹着一个关键字)；2.若根结点不是终端结点，则至少有两颗子树。(至少一个关键字)；3.除根结点外的所有非叶子结点至少有[m/2]棵子树。(即至少含有[m/2]-1个关键字)；4.所有的叶子结点出现在同一个层次上，不带信息。(就像是折半查找判断树中查找失败的结点)。5.每一个结点中的关键字满足从左到右依次增大的规则。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单理解为：平衡多路查找树为B树（每一个子节点上都是有数据的），叶子节点之间无指针相邻，它的出现就是为了减少磁盘IO操作，思想是降低树的高度，从==“瘦高”–&gt;“矮胖”==。</p><p>B树的搜索，从根结点开始，如果查询的关键字与结点的关键字相等，那么就命中；否则，如果查询关键字比结点关键字小，就进入左儿子；如果比结点关键字大，就进入右儿子；如果左儿子或右儿子的指针为空，则报告找不到相应的关键字；重复，直到所对应的儿子指针为空，或已经是叶子结点</p><p>如果B树的所有非叶子结点的左右子树的结点数目均保持差不多（平衡），那么B树的搜索性能逼近二分查找；但它比连续内存空间的二分查找的优点是，改变B树结构（插入与删除结点）不需要移动大段的内存数据，甚至通常是常数开销；但B树在经过多次插入与删除后，有可能导致不同的结构。</p><pre class="line-numbers language-none"><code class="language-none">B-树的特性：1. 关键字集合分布在整颗树中；2. 任何一个关键字出现且只出现在一个结点中；3. 搜索有可能在非叶子结点结束；4. 其搜索性能等价于在关键字全集内做一次二分查找；5. 自动层次控制；优点：由于m阶B树每个结点最少m/2个结点的限制，是为了最大限度的减少查找路径的长度，提供查找效率缺点：不便于范围查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-2B-树"><a href="#2-2-3-2B-树" class="headerlink" title="2.2.3.2B+树"></a>2.2.3.2B+树</h4><p>B+树是B树的一种变形形式，B+树上的叶子结点存储关键字以及相应记录的地址，叶子结点以上各层作为索引使用，数据对象的插入和删除仅在叶子节点上进行。</p><pre class="line-numbers language-none"><code class="language-none">一个m阶的B+树具有如下几个特征:1.有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来保存数据的索引，所有数据都保存在叶子节点。2.所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。3.所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通常用于数据库和操作系统的文件系统中。B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。<br>它比 B 树的查询性能更高。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131623485.png" alt="image-20221013095825718"></p><p>从图片可以看出，叶子结点用指针连在一起，每一个父节点的元素都出现在子节点中，是子节点的最大（或最小)元素。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131623517.png" alt="image-20221013095854634"></p><p>在上面这棵树中，根节点元素8是子节点2,5,8的最大元素，也是叶子节点6,8的最大元素。<br>需要注意的是，根节点的最大元素（这里是15)，也就等同于整个B+树的最大元素。以后无论插入删除多少元素，始终要保持最大元素在根节点当中。</p><p>至于叶子节点，由于父节点的元素都出现在子节点，因此所有叶子节点包含了全量元素信息。并且每一个叶子节点都带有指向下一个节点的指针，形成了一个有序链表。</p><pre class="line-numbers language-none"><code class="language-none">总结：B+树的三个特点：1.关键字数和子树相同2.非叶子节点仅用作索引，它的关键字和子节点有重复元素3.叶子节点用指针连在一起第一点，在 B 树中，节点的关键字用于在查询时确定查询区间，因此关键字数比子树数少一；而在 B+ 树中，节点的关键字代表子树的最大值，因此关键字数等于子树数。第二点，除叶子节点外的所有节点的关键字，都在它的下一级子树中同样存在，最后所有数据都存储在叶子节点中。根节点的最大关键字其实就表示整个 B+ 树的最大元素。第三点，叶子节点包含了全部的数据，并且按顺序排列，B+ 树使用一个链表将它们排列起来，这样在查询时效率更快。由于 B+ 树的中间节点不含有实际数据，只有子树的最大数据和子树指针，因此磁盘页中可以容纳更多节点元素，也就是说同样数据情况下，B+ 树会 B 树更加“矮胖”，因此查询效率更快。B+ 树的查找必会查到叶子节点，更加稳定。当需要查询某个范围内的数据时，由于 B+ 树的叶子节点是一个有序链表，只需在叶子节点上遍历即可，不用像 B 树那样挨个中序遍历比较大小。因此，得出B+树的三个优点1.层级更低，IO 次数更少2.每次都需要查询到叶子节点，查询性能稳定3.叶子节点形成有序链表，范围查询方便B树也有优点，其优点在于，由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-3B-树"><a href="#2-2-3-3B-树" class="headerlink" title="2.2.3.3B*树"></a>2.2.3.3B*树</h4><p><code>B*树</code>是<code>B+树</code>的变体，在<code>B+树</code>的非根和非叶子结点再增加指向兄弟的指针；<br><code>B*树</code>定义了非叶子结点关键字个数至少为<code>(2/3)*M</code>，即块的最低使用率为<code>2/3</code>(代替B+树的1/2)；</p><p><code>B+树</code>的分裂：当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；<code>B+树</code>的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；</p><p><code>B*树</code>的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；所以，<code>B*树</code>分配新结点的概率比<code>B+树</code>要低，空间使用率更高</p><pre class="line-numbers language-none"><code class="language-none">B树类型总结：1.二叉搜索树：二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于走右结点；2.B树(B-树)：多路搜索树，每个结点存储M/2到M（M是指M阶B树）个关键字，非叶子结点存储指向关键字范围的子结点；所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；3.B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；4.B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-4红黑树"><a href="#2-2-4红黑树" class="headerlink" title="2.2.4红黑树"></a>2.2.4红黑树</h3><p>解决二叉查找树多次插入新节点而导致的不平衡问题。</p><pre class="line-numbers language-none"><code class="language-none">红黑树(Red Black Tree)是一种自平衡的二叉查找树。除了符合二叉查找树的基本特性外，它还具有下列的【附加特性】:1.节点是红色或黑色。2.根节点是黑色。3.每个叶子节点都是黑色的空节点（NIL节点）。4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131623225.png" alt="image-20221013100449122"></p><p>正是因为这些规则限制，才保证了红黑树的自平衡。红黑树从根到叶子的最长路径不会超过最短路径的2倍。当插入或删除节点的时候，红黑树的规则有可能被打破。这时候就需要做出一些调整，来继续维持我们的规则。</p><p><strong>什么情况下会破坏红黑树的规则，什么情况下不会破坏规则呢？我们举两个简单的例子：</strong></p><p>1.向原红黑树插入值为14的新节点：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131623082.png" alt="image-20221013100539800"></p><p>由于父节点15是黑色节点，因此这种情况并不会破坏红黑树的规则，无需做任何调整。</p><p>2.向原红黑树插入值为21的新节点：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131623038.png" alt="image-20221013100612095"></p><p>由于父节点22是红色节点，因此这种情况打破了红黑树的规则4（每个红色节点的两个子节点都是黑色），必须进行调整，使之重新符合红黑树的规则。<strong>调整有两种方法:变色和旋转</strong>。而旋转又分成两种形式:左旋转和右旋转。</p><blockquote><p><strong>变色：</strong><br>为了重新符合红黑树的规则，尝试把红色节点变为黑色，或者把黑色节点变为红色。</p></blockquote><p>下图所表示的是红黑树的一部分，需要注意节点25并非根节点。因为节点21和节点22连续出现了红色，不符合规则4，所以把节点22从红色变成黑色</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131624189.png" alt="image-20221013100831536"></p><p>但这样并不算完，因为凭空多出的黑色节点打破了规则5，所以发生连锁反应，需要继续把节点25从黑色变成红色。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131624037.png" alt="image-20221013100944398"></p><p>此时仍然没有结束，因为节点25和节点27又形成了两个连续的红色节点，需要继续把节点27从红色变成黑色。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131624547.png" alt="image-20221013101036833"></p><blockquote><p><strong>左旋转：</strong><br><strong>逆时针</strong>旋转红黑树的两个节点，使得父节点被自己的右孩子取代，而自己成为自己的左孩子。</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131624595.png" alt="image-20221013101132112"></p><p>图中，身为右孩子的Y取代了X的位置，而X变成了自己的左孩子。此为左旋转。</p><blockquote><p><strong>右旋转：</strong><br><strong>顺时针</strong>旋转红黑树的两个节点，使得父节点被自己的左孩子取代，而自己成为自己的右孩子</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131624991.png" alt="image-20221013101408548"></p><p>图中，身为左孩子的Y取代了X的位置，而X变成了自己的右孩子。此为右旋转。</p><p>以刚才所举的例子,首先，我们需要做的是变色，把节点25及其下方的节点变色</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131624681.png" alt="image-20221013101543854"></p><p>此时节点17和节点25是连续的两个红色节点，为了维持红黑树的规则，我们把节点8和节点17进行变色，由红色节点编程黑色节点。这样以来就形成了新的红黑树。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131624622.png" alt="image-20221013101634753"></p><pre class="line-numbers language-none"><code class="language-none">**红黑树和AVL树区别RB-Tree和AVL树作为二叉搜索树(BBST)，其实现的算法时间复杂度相同，AVL作为最先提出的BBST，貌似RB-tree实现的功能都可以用AVL树是代替，那么为什么还需要引入RB-Tree呢？1.红黑树不追求完全平衡，即不像AVL那样要求节点的 高度差的绝对值 &lt;= 1，它只要求部分达到平衡，但是提出了为节点增加颜色，红黑是用非严格的平衡来换取增删节点时候旋转次数的降低，任何不平衡都会在三次旋转之内解决，而AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多。2.就插入节点导致树失衡的情况，AVL和RB-Tree都是最多两次树旋转来实现复衡rebalance，旋转的量级是O(1)。3.删除节点导致失衡，AVL需要维护从被删除节点到根节点root这条路径上所有节点的平衡，旋转的量级为O(logN)，而RB-Tree最多只需要旋转3次实现复衡，只需O(1)，所以说RB-Tree删除节点的rebalance的效率更高，开销更小。4.AVL的结构相较于RB-Tree更为平衡，插入和删除引起失衡，RB-Tree复衡效率更高；当然，由于AVL高度平衡，因此AVL的Search效率更高。5.针对插入和删除节点导致失衡后的rebalance操作，红黑树能够提供一个比较便宜的解决方案，降低开销，是对search，insert ，以及delete效率的折衷，总体来说，RB-Tree的统计性能高于AVL，故引入RB-Tree是功能、性能、空间开销的折中结果。6.AVL更平衡，结构上更加直观，时间效能针对读取而言更高；维护稍慢，空间开销较大。红黑树，读取略逊于AVL，维护强于AVL，空间开销与AVL类似，内容极多时略优于AVL，维护优于AVL。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：实际应用中，若搜索的次数远远大于插入和删除，那么选择<code>AVL</code>，如果搜索，插入删除次数几乎差不多，应该选择<code>RB-Tree</code>。</p><h3 id="2-2-5堆"><a href="#2-2-5堆" class="headerlink" title="2.2.5堆"></a>2.2.5堆</h3><p>这里我们所说的堆是一种数据结构，和操作系统内存管理中的堆是两回事。</p><p>普通的二叉树不适合用数组来存储，因为可能会存在大量的空间浪费，<strong>只有完全二叉树适合使用顺序存储结构</strong>。</p><pre class="line-numbers language-none"><code class="language-none">堆的概念：将一个集合K = {k0，k1， k2，…，kn-1}，把所有元素都按照完全二叉树的顺序存储方式来存储，并且满足每个子树的根结点数值都大于等于（或小于等于）他们各自的子结点数值，这样的结构就叫堆。将根节点最大的堆叫大堆，根节点最小的堆叫小堆。堆的性质：1.堆中某个节点的值总是不大于或不小于其父节点的值。2.堆总是一棵完全二叉树。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131625275.png" alt="image-20221013105913742"></p><h3 id="2-2-6完全二叉树"><a href="#2-2-6完全二叉树" class="headerlink" title="2.2.6完全二叉树"></a>2.2.6完全二叉树</h3><p>完全二叉树：除最后一层外，每一层上的结点数均达到最大值；在最后一层上只缺少右边的若干结点</p><pre class="line-numbers language-none"><code class="language-none">完全二叉树特点：1.叶子结点只能出现在最下层和次下层。2.最下层的叶子结点集中在树的左部。3.倒数第二层若存在叶子结点，一定在右部连续位置。4.如果结点度为1，则该结点只有左孩子，即没有右子树。5.同样结点数目的二叉树，完全二叉树深度最小。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-7满二叉树"><a href="#2-2-7满二叉树" class="headerlink" title="2.2.7满二叉树"></a>2.2.7满二叉树</h3><p>除最后一层无任何子节点外，每一层上的所有结点都有两个子结点的二叉树。</p><pre class="line-numbers language-none"><code class="language-none">满二叉树特点：1.叶子只能出现在最下一层。出现在其它层就不可能达成平衡。2.非叶子结点的度(结点拥有的子树数目称为结点的度)一定是23.在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3二叉树存储结构"><a href="#2-3二叉树存储结构" class="headerlink" title="2.3二叉树存储结构"></a>2.3二叉树存储结构</h2><h3 id="2-3-1顺序存储结构"><a href="#2-3-1顺序存储结构" class="headerlink" title="2.3.1顺序存储结构"></a>2.3.1顺序存储结构</h3><p>顺序存储结构实际就是用数组来存储，只适合<strong>完全二叉树</strong>，不适合一般的二叉树，因为不是完全二叉树会有空间的浪费。二叉树顺序存储结构<strong>在物理上是一个数组，在逻辑上是一颗二叉树</strong>。</p><h3 id="2-3-2链式存储结构"><a href="#2-3-2链式存储结构" class="headerlink" title="2.3.2链式存储结构"></a>2.3.2链式存储结构</h3><p>二叉树的链式存储结构是值，用链表来表示一颗二叉树，即用链来表示元素的逻辑关系。通常的方法是链表中每个节点由<strong>三个域组成</strong>，<strong>数据域和左右指针域</strong>，<strong>左右指针分别用来给出该结点左孩子和右孩子</strong>所在的链接点的存储地址。</p><h4 id="2-3-2-1建二叉树"><a href="#2-3-2-1建二叉树" class="headerlink" title="2.3.2.1建二叉树"></a>2.3.2.1建二叉树</h4><p>想要创建一棵二叉树，我们首先要建一个二叉树节点。</p><pre class="line-numbers language-none"><code class="language-none">typedef int BTDataType;typedef struct BinaryTreeNode{struct BinaryTreeNode* left;struct BinaryTreeNode* right;BTDataType data;}BTNode; //创建一个节点BTNode* BuyNode(BTDataType x){BTNode* node = (BTNode*)malloc(sizeof(BTNode));assert(node); node-&gt;data = x;node-&gt;left = NULL;node-&gt;right = NULL; return node;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了节点之后，我们就可以用n个节点来拼成一棵树。这里采用前序遍历的思想，往下递归时先把节点的值填充，等返回时节点和节点就会连到一起。</p><pre class="line-numbers language-none"><code class="language-none">// 通过前序遍历的数组构建二叉树,0代表空指针BTNode* CreatBinaryTree(BTDataType* arr,int* pi){if (arr[*pi] == 0){(*pi)++;return NULL;}BTNode* root = BuyNode(arr[*pi]);(*pi)++;root-&gt;left = CreatBinaryTree(arr, pi);root-&gt;right = CreatBinaryTree(arr, pi);return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-2二叉树的遍历"><a href="#2-3-2-2二叉树的遍历" class="headerlink" title="2.3.2.2二叉树的遍历"></a>2.3.2.2二叉树的遍历</h4><p>遍历的概念：遍历是<strong>按照某种规则</strong>，对二叉树中的结点进行某种相应的操作，且每个结点只操作一次。</p><blockquote><p>前序、中序以及后序遍历</p></blockquote><pre class="line-numbers language-none"><code class="language-none">这三种遍历都是深度优先。遵循的顺序如下：1.前序遍历——访问根结点的操作发生在遍历其左右子树之前。2.中序遍历——访问根结点的操作发生在遍历其左右子树之中。3.后序遍历——访问根结点的操作发生在遍历其左右子树之后。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以前序遍历为例:</p><pre class="line-numbers language-none"><code class="language-none">//前序遍历void pre_order(BTNode* root){if (root == NULL){printf("%c ", '#');return;}printf("%d ", root-&gt;data);pre_order(root-&gt;left);pre_order(root-&gt;right);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>层序遍历</p></blockquote><p>层序遍历，顾名思义，就是一层一层的遍历。这里我们要借助队列。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202210131625039.png" alt="image-20221013111000500"></p><p>以这棵树为例，我们想要层序遍历。先把1放入队列中。然后开始循环下列操作：取队头的节点并删除掉，在删除的同时把队头节点的左右子节点放到队列中。这样把第一层的节点取完后第二层就会放到队列中，第二层节点取完后第三层的节点就会被放到队列中，循环此操作，实现层序遍历。</p><p>代码如下：</p><pre class="line-numbers language-none"><code class="language-none">//层序遍历void level_order(BTNode* root){Queue q;QueueInit(&amp;q);if (root){QueuePush(&amp;q, root);}BTNode* front;while (!QueueEmpty(&amp;q)){front = QueueFront(&amp;q);printf("%d", front-&gt;data);QueuePob(&amp;q);if (front-&gt;left){QueuePush(&amp;q, front-&gt;left);} if (front-&gt;right){QueuePush(&amp;q, front-&gt;right);}}printf("\n");QueueDestory(&amp;q);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-3二叉树的销毁"><a href="#2-3-2-3二叉树的销毁" class="headerlink" title="2.3.2.3二叉树的销毁"></a>2.3.2.3二叉树的销毁</h4><p>二叉树的遍历要采用后续遍历，不然父节点销毁后会找不到子节点。</p><pre class="line-numbers language-none"><code class="language-none">void tree_destory(BTNode* root){if (root == NULL){return;}//要采用后序遍历，不然父节点销毁了就找不到子节点了tree_destory(root-&gt;left);tree_destory(root-&gt;right);free(root); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统遇到的十个问题</title>
      <link href="/2022/09/22/fen-bu-shi-xi-tong-yu-dao-de-shi-ge-wen-ti/"/>
      <url>/2022/09/22/fen-bu-shi-xi-tong-yu-dao-de-shi-ge-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式系统遇到的十个问题"><a href="#分布式系统遇到的十个问题" class="headerlink" title="分布式系统遇到的十个问题"></a>分布式系统遇到的十个问题</h1><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220952248.png" alt="img"></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>我们都在讨论分布式，特别是面试的时候，不管是招初级软件工程师还是高级，都会要求懂分布式，甚至要求用过。传得沸沸扬扬的分布式到底是什么东东，有什么优势？</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220952909.png" alt="img">风遁·螺旋手里剑</p><p>看过<code>火影</code>的同学肯定知道<code>漩涡鸣人</code>的招牌忍术：<code>多重影分身之术</code>。</p><ul><li>这个术有一个特别厉害的地方，<code>过程和心得</code>：多个分身的感受和经历都是相通的。比如 A 分身去找卡卡西（鸣人的老师）请教问题，那么其他分身也会知道 A 分身问的什么问题。</li><li><code>漩涡鸣人</code>有另外一个超级厉害的忍术，需要由几个影分身完成：<code>风遁·螺旋手里剑。</code>这个忍术是靠三个鸣人一起协作完成的。</li></ul><p>这两个忍术和分布式有什么关系？</p><ul><li>分布在不同地方的系统或服务，是彼此相互关联的。</li><li>分布式系统是分工合作的。</li></ul><p>案例：</p><ul><li>比如 Redis 的<code>哨兵机制</code>，可以知道集群环境下哪台 <code>Redis</code> 节点挂了。</li><li>Kafka/zookeeper的 <code>Leader 选举机制</code>，如果某个节点挂了，会从 <code>follower</code> 中重新选举一个 leader 出来。（leader 作为写数据的入口，follower 作为读的入口）</li></ul><p>那<code>多重影分身之术</code>有什么缺点？</p><ul><li>会消耗大量的查克拉。分布式系统同样具有这个问题，需要几倍的资源来支持。</li></ul><h2 id="1-1对分布式的理解"><a href="#1-1对分布式的理解" class="headerlink" title="1.1对分布式的理解"></a>1.1对分布式的理解</h2><p>要理解分布式系统，主要需要明白一下2个方面：</p><p>1.分布式系统一定是由多个节点组成的系统。其中，节点指的是计算机服务器，而且这些节点一般不是孤立的，而是互通的。</p><p>2.这些连通的节点上部署了我们的节点，并且相互的操作会有协同。</p><p>不同的业务模块部署在不同的服务器上或者同一个业务模块分拆多个子业务，部署在不同的服务器上，解决高并发的问题，提供可扩展性以及高可用性，业务中使用分布式的场景主要有分布式存储以及分布式计算。分布式存储中可以将数据分片到多个节点上，不仅可以提高性能（可扩展性），同时也可以使用多个节点对同一份数据进行备份。</p><p>3.简单概括</p><blockquote><p>是一种工作方式</p><p>若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统</p><p>将不同的业务分布在不同的地方</p></blockquote><h3 id="1-2-1分布式环境的特点"><a href="#1-2-1分布式环境的特点" class="headerlink" title="1.2.1分布式环境的特点"></a>1.2.1分布式环境的特点</h3><p>1.分布性：服务部署空间具有多样性</p><p>2.并发性：程序运行过程中，并发性操作是很常见的。比如同一个分布式系统中的多个节点，同时访问一个共享资源。数据库、分布式存储</p><p>3.无序性：进程之间的消息通信，会出现顺序不一致问题</p><h3 id="1-2-2集群与分布式的区别"><a href="#1-2-2集群与分布式的区别" class="headerlink" title="1.2.2集群与分布式的区别"></a>1.2.2集群与分布式的区别</h3><p>集群：复制模式，每台机器做一样的事。</p><p>分布式：两台机器分工合作，每台机器做的不一样。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220953692.png" alt="img"></p><p>集群相关tips:无论你是 web容器集群还是db集群，按照所要解决的问题可以分为如下几种：</p><p><strong>高可用集群，提升可用性，（容灾、故障转移）， 部署方式有以下三种</strong></p><ol><li>主从方式：主机工作，备机监控。此方式不能有效的利用服务器资源</li><li>互为主从：两服务器同时在线，一台服务器故障可切换到另一台上。此 方式有效的利用服务器资源，但当服务器故障时候，将导致一台服务器上运行多个业务。</li><li>多台服务器主从：大部分服务器在线使用，小部分监控；若有部分服务器故障，可切换到指定的小部分服务器上。此方式为前两种方式的综合。然后多台服务器群集，也增加了管理的复杂度。</li></ol><p>高可用集群的另外一个特点是共享资源，多个节点服务器共享一个存储资源，该存储可在不同节点之间转移。</p><p><strong>负载均衡集群，LoadBalance， 提升吞吐量</strong></p><ol><li>不同节点之间相互独立，不共享任何资源（硬件，网络， 但应用的会话保持需要一定的策略）。</li><li>通过一定算法将客户端的访问请求分配到群集的各个节点上，充分利用每个节点的资源。</li><li>负载均衡扩展了网络设备和服务器带宽，增加吞吐量，加强网络数据处理能。</li><li>每个节点的性能和配置可能不同，根据算法，可以分配不同的权重到不同节点上，以实现不同节点的资源利用。</li></ol><p><strong>并行计算群集，Performance， 减少应答时间</strong></p><ol><li>并行计算或称平行计算是相对于串行计算来说的。</li><li>并行计算的能力的目的是提高计算速度。</li></ol><p>并行计算分为时间计算和空间计算：</p><ol><li>时间计算既是流水线技术，一个处理器分为多个单元，每个单元负责不同任务，这些单元可并行计算。</li><li>空间计算利用多个处理器并发的执行计算。目前PC机的计算能力越来越强，将大量低廉的PC机互联起来，组成一个”大型计算机”以解决复杂的计算任务。Beowulf computers为最典型的空间并行计算。</li></ol><h3 id="1-2-3分布式的架构演进"><a href="#1-2-3分布式的架构演进" class="headerlink" title="1.2.3分布式的架构演进"></a>1.2.3分布式的架构演进</h3><h4 id="1-2-3-1原始分布式时代"><a href="#1-2-3-1原始分布式时代" class="headerlink" title="1.2.3.1原始分布式时代"></a>1.2.3.1原始分布式时代</h4><p>这个时代（20世纪70年代末期到80年代初）的计算机计算能力非常有限（内存只有几百K），所以科学家就寻求通过多台计算机来完成一个功能，这个时代被称为原始分布式时代。</p><p>但是这个时代对分布式系统的尝试并没有取得太大的成绩。但也不是一无所成，这个时代的探索，出现了远程调用，分布式文件系统的雏型，为后续计算机学科的发展奠定了基础。</p><blockquote><p>IBM院士Kyle Brown事后曾评价道，“这次尝试最大的收获就是对RPC、DFS等概念的开创，以及得到了一个价值千金的教训：某个功能能够进行分布式，并不意味着它就应该进行分布式，强行追求透明的分布式操作，只会自寻苦果。”</p><p>无论是<strong>DCE</strong>还是稍后出现的CORBA，从结果来看，都不能称得上成功，因为将一个系统拆分到不同的机器中运行，为解决这样做带来的服务发现、跟踪、通信、容错、隔离、配置、传输、数据一致性和编码复杂度等方面的问题所付出的代价已远远超过了分布式所取得的收益。</p></blockquote><h5 id="1-2-3-1-1关于DCE的一点介绍"><a href="#1-2-3-1-1关于DCE的一点介绍" class="headerlink" title="1.2.3.1.1关于DCE的一点介绍"></a>1.2.3.1.1关于DCE的一点介绍</h5><blockquote><p>DCE是当时业界主流的计算机厂商一起参与，共同制订了名为“分布式运算环境[2]”（Distributed Computing Environment，DCE）的<strong>分布式技术体系</strong>。</p><p>DCE包含一套相对完整的分布式服务组件规范与参考实现，譬如源自NCA（惠普公司）的远程服务调用规范（Remote Procedure Call，RPC），当时被称为DCE/RPC，它与后来Sun公司向互联网工程任务组（Internet Engineering Task Force，IETF）提交的基于通用TCP/IP协议的远程服务标准ONC RPC被认为是现代RPC的共同鼻祖。</p><p>源自AFS（卡内基梅隆大学提出）的分布式文件系统（Distributed File System，DFS）规范，当时被称为DCE/DFS；</p><p>源自Kerberos（麻省理工大学提出）的服务认证规范；</p><p>还有时间服务、命名与目录服务，甚至现在程序中很常用的通用唯一识别符（Universally Unique Identifier，UUID）也是在DCE中发明出来的。</p></blockquote><h5 id="1-2-3-1-2UNIX分布式设计哲学"><a href="#1-2-3-1-2UNIX分布式设计哲学" class="headerlink" title="1.2.3.1.2UNIX分布式设计哲学"></a>1.2.3.1.2UNIX分布式设计哲学</h5><p>保持接口与实现的简单性，比系统的任何其他属性，包括准确性、一致性和完整性，都来得更加重要。</p><p>但是基于那个时代的计算机技术，想要发展符合UNIX设计哲学的分布式技术不太可能，只能是一种美好的愿景。</p><h4 id="1-2-3-2-单体应用时代"><a href="#1-2-3-2-单体应用时代" class="headerlink" title="1.2.3.2 单体应用时代"></a>1.2.3.2 单体应用时代</h4><p>20世纪80年代正是摩尔定律开始稳定发挥作用的黄金时期，微型计算机的性能以每两年增长一倍的惊人速度提升，硬件算力束缚软件规模的链条很快变得松动，信息系统进入以单台或少量几台计算机即可作为服务器来支撑大型信息系统运作的单体时代，<strong>且在很长的一段时间内，单体都将是软件架构的绝对主流。</strong></p><p>在很多书中都将单体架构作为一种反派角色出现，我甚至在面试过程中遇到过面试官在还没了解项目需求的情况下就直接说你们这种单体架构是有问题的。其实没有放之四海而皆准的架构，<strong>单体架构在某些情况下可能是最优选择，单体架构更不应该被打上反派角色。</strong></p><p>比如，对于小型系统，单台机器就足以支撑其良好运行的系统，不仅易于开发、测试、部署，且由于系统中各个功能、模块、方法的调用过程都是进程内调用，不会发生进程间通信（Inter-ProcessCommunication，IPC[1]），因此连运行效率也是最高的。</p><p>那些不顾需求现状，为了微服务而微服务的开发者才是真正的“反派”。</p><p><strong>单体系统的不足，必须在软件的性能需求超过了单机、软件的开发人员规模明显超过了“2 Pizza Team”（6～12人）范畴的前提下才有讨论的价值。</strong></p><p>上面讲到的是单体架构的优点，在互联网时代（复杂系统），单体架构存在两点明显的缺点：</p><ul><li>单机性能难以保证：一个应用中功能越堆越多，单台机器已经难以满足这些功能，摩尔定律失效让堆硬件的做法变成了奢望；</li><li>缺乏自治隔离能力：比如说一部分的代码出现Bug可能会导致整个服务不可用，比如说一小个改动点需要上线，整个系统必须上线；</li><li>还有一个缺点就是单体架构需要技术栈统一，比如说所有功能模块都需要用Java语言来编写。</li></ul><p><strong>单体架构的缺点不在于不可拆分、难以扩展（这种想法不完全正确）。</strong></p><ul><li>从纵向拆分角度来看，现代的单体应用都是会拆分成controller，service和dao层的，不存在不能拆分的说法；</li><li>从横向拆分的角度，单体应用完全可以拆分成多个模块，每个模块负责不同的功能，但是最后还是打成一个包，运行在一个进程中；</li><li>从横向扩展的角度，可以通过负载均衡机制同时部署若干个相同的单体系统副本，以达到分摊流量压力的效果。</li></ul><blockquote><p>微服务取代单体系统成为潮流趋势的根本原因，笔者认为最重要的原因是：单体系统很难兼容“Phoenix”的特性。这种架构风格潜在的要求是希望系统的每一个部件、每一处代码都尽量可靠，尽量不出或少出缺陷。然而战术层面再优秀，也很难弥补战略层面的不足。单体系统靠高质量来保证高可靠性的思路，在小规模软件上还能运作良好，但当系统规模越来越大时，交付一个可靠的单体系统就变得越来越具有挑战性。如本书前言所说，正是随着软件架构演进，构建可靠系统的观念从“追求尽量不出错”到正视“出错是必然”的转变，才是微服务架构得以挑战并逐步取代单体架构的底气所在。</p></blockquote><h4 id="1-2-3-3-SOA架构时代"><a href="#1-2-3-3-SOA架构时代" class="headerlink" title="1.2.3.3 SOA架构时代"></a>1.2.3.3 SOA架构时代</h4><p>SOA架构，面向服务的架构。其包含的许多概念、思想都能在今天的微服务中找到对应的身影了，譬如服务之间的松散耦合、注册、发现、治理，隔离、编排等。</p><p>SOA不能简单视为一种架构风格，而是一套软件设计的基础平台。</p><ul><li>它拥有领导制定技术标准的组织Open CSA；</li><li>有清晰的软件设计的指导原则，譬如服务的封装性、自治、松耦合、可重用、可组合、无状态，等等；</li><li>明确了采用SOAP作为远程调用协议，依靠SOAP协议族（WSDL、UDDI和WS-*协议）来完成服务的发布、发现和治理；</li><li>利用企业服务总线（Enterprise Service Bus，ESB）的消息管道来实现各个子系统之间的交互，令各服务在ESB的调度下无须相互依赖就能相互通信，实现了服务松耦合，也为以后进一步实施业务流程编排（Business Process Management，BPM）提供了基础</li><li>使用服务数据对象（Service Data Object，SDO）来访问和表示数据，使用服务组件架构（Service Component Architecture，SCA）来定义服务封装的形式和服务运行的容器</li></ul><p>但是SOA技术最终还是偃旗息鼓了，最主要的原因还是SOA基于SOAP协议，SOAP协议过于严格的规范定义带来过度的复杂性，而构建在SOAP基础之上的ESB、BPM、SCA、SDO等诸多上层建筑，进一步加剧了这种复杂性。</p><p>SOA自诞生的那一天起，就已经注定只能是少数系统阳春白雪式的精致奢侈品，它可以实现多个异构大型系统之间的复杂集成交互，却很难作为一种具有广泛普适性的软件架构风格来推广。SOA最终没有获得成功的致命伤与当年的EJB如出一辙，尽管有Sun和IBM等一众巨头在背后力挺，EJB仍然败于以Spring、Hibernate为代表的“草根框架”，可见一旦脱离人民群众，终究会淹没在群众的海洋之中，连信息技术也不曾例外。</p><p><strong>SAO的设计理念和简单透明相悖甚远。</strong></p><h4 id="1-2-3-4微服务架构时代"><a href="#1-2-3-4微服务架构时代" class="headerlink" title="1.2.3.4微服务架构时代"></a>1.2.3.4微服务架构时代</h4><p><strong>微服务架构</strong>是一种通过多个小型服务组合来构建单个应用的架构风格，<strong>这些服务围绕业务能力而非特定的技术标准来构建。各个服务可以采用不同的编程语言、不同的数据存储技术，运行在不同的进程之中。</strong>服务采取轻量级的通信机制和自动化的部署机制实现通信与运维。</p><p><strong>微服务和SOA的区别</strong></p><p>从以上微服务的定义和特征中，你应该可以明显地感觉到微服务追求的是更加自由的架构风格，摒弃了几乎所有SOA里可以抛弃的约束和规定，提倡以“实践标准”代替“规范标准”。</p><p>可是，如果没有了统一的规范和约束，以前SOA解决的那些分布式服务的问题，不也就一下子都重新出现了吗？的确如此，对于服务的注册发现、跟踪治理、负载均衡、故障隔离、认证授权、伸缩扩展、传输通信、事务处理等问题，<strong>微服务中将不再有统一的解决方案</strong>。</p><p>即使只讨论Java范围内会使用到的微服务，仅一个服务间远程调用问题，可以列入解决方案的候选清单的就有RMI（Sun/Oracle）、Thrift（Facebook）、Dubbo（阿里巴巴）、gRPC（Google）、Motan2（新浪）、Finagle（Twitter）、brpc（百度）、Arvo（Hadoop）、JSON-RPC、REST，等等；仅一个服务发现问题，可以选择的就有Eureka（Netflix）、Consul（HashiCorp）、Nacos（阿里巴巴）、ZooKeeper（Apache）、etcd（CoreOS）、CoreDNS（CNCF），等等。其他领域也与此类似。</p><p>微服务所带来的自由是一把双刃开锋的宝剑，当软件架构者拿起这把宝剑，一刃指向SOA定下的复杂技术标准，将选择的权力夺回的同一时刻，另外一刃也正朝着自己映出冷冷的寒光。</p><p>在微服务时代，软件研发本身的复杂度确实有所降低。一个简单服务，并不见得会同时面临分布式中的所有问题，也就没有必要背上SOA那百宝袋般沉重的技术包袱。需要解决什么问题，就引入什么工具；团队熟悉什么技术，就使用什么框架。此外，像Spring Cloud这样胶水式的全家桶工具集，通过一致的接口、声明和配置，进一步屏蔽了源自具体工具、框架的复杂性，降低了在不同工具、框架之间切换的成本，所以，作为一个普通的服务开发者，作为一个“螺丝钉”式的程序员，微服务架构是友善的。</p><p>可是，微服务对架构者却是满满的“恶意”，对架构能力的要求已提升到史无前例的程度。技术架构者的第一职责就是决策权衡，有利有弊才需要决策，有取有舍才需要权衡，如果架构者本身的知识面不足以覆盖所需要决策的内容，不清楚其中利弊，恐怕将无可避免地陷入选择困难症的境遇之中。微服务时代充满着自由的气息，微服务时代充斥着迷茫的选择。</p><h4 id="1-2-3-5后微服务时代（云原生时代）"><a href="#1-2-3-5后微服务时代（云原生时代）" class="headerlink" title="1.2.3.5后微服务时代（云原生时代）"></a>1.2.3.5后微服务时代（云原生时代）</h4><p>容器技术给分布式架构提供了新思路。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220953633.png" alt="img"></p><p>当虚拟化的基础设施从单个服务的容器扩展至由多个容器构成的服务集群、通信网络和存储设施时，软件与硬件的界限便已模糊。<strong>一旦虚拟化的硬件能够跟上软件的灵活性，那些与业务无关的技术性问题便有可能从软件层面剥离，悄无声息地在硬件基础设施之内解决，让软件得以只专注业务，真正围绕业务能力构建团队与产品。</strong></p><p>从软件层面独立应对分布式架构所带来的各种问题，发展到应用代码与基础设施软、硬一体，合力应对架构问题，这个新的时代现在常被媒体冠以“云原生”这个颇为抽象的名字加以宣传。云原生时代追求的目标与此前微服务时代追求的目标并没有本质改变，都是在服务架构演进的历史进程中，所以笔者更愿意称云原生时代为“后微服务时代”。</p><p>Kubernetes成为容器战争胜利者标志着后微服务时代的开启，但Kubernetes仍然没能完美解决全部的分布式问题。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220953858.png" alt="img"></p><p>微服务A调用了微服务B的两个服务，称为B1和B2，假设B1表现正常但B2出现了持续的500错，那在达到一定阈值之后就应该对B2进行熔断，以避免产生雪崩效应。如果仅在基础设施层面来处理，这会遇到一个两难问题，切断A到B的网络通路会影响B1的正常调用，不切断则会持续受B2的错误影响。</p><p>为了解决这一类问题，虚拟化的基础设施很快完成了第二次进化，引入了今天被称为“服务网格”（Service Mesh）的“边车代理模式”（Sidecar Proxy）。</p><p>在虚拟化场景中的边车指的是由系统自动在服务容器（通常是指Kubernetes的Pod）中注入一个通信代理服务器，相当于那个挎斗，以类似网络安全里中间人攻击的方式进行流量劫持，在应用毫无感知的情况下，悄然接管应用所有对外通信。这个代理除了实现正常的服务间通信外（称为数据平面通信），还接收来自控制器的指令（称为控制平面通信），根据控制平面中的配置，对数据平面通信的内容进行分析处理，以实现熔断、认证、度量、监控、负载均衡等各种附加功能。通过边车代理模式，便实现了既不需要在应用层面加入额外的处理代码，也提供了几乎不亚于程序代码的精细管理能力。</p><h4 id="1-2-3-6无服务架构时代"><a href="#1-2-3-6无服务架构时代" class="headerlink" title="1.2.3.6无服务架构时代"></a>1.2.3.6无服务架构时代</h4><p>无服务现在还没有一个特别权威的“官方”定义，但它的概念并没有前面提到的各种架构那么复杂，本来无服务也是以“简单”为主要卖点的，它只涉及两块内容：<strong>后端设施（Backend）和函数（Function）</strong>。</p><ul><li>后端设施是指数据库、消息队列、日志、存储等这类用于支撑业务逻辑运行，但本身无业务含义的技术组件，这些后端设施都运行在云中，在无服务中将它们称为“后端即服务”（Backend as a Service，BaaS）。</li><li>函数是指业务逻辑代码，这里函数的概念与粒度都已经很接近于程序编码角度的函数了，其区别是无服务中的函数运行在云端，不必考虑算力问题，也不必考虑容量规划（从技术角度可以不考虑，从计费的角度还是要掂量一下的），在无服务中将其称为“函数即服务”（Function as a Service，FaaS）。</li></ul><h3 id="1-2-4分布式的优势与劣势"><a href="#1-2-4分布式的优势与劣势" class="headerlink" title="1.2.4分布式的优势与劣势"></a>1.2.4分布式的优势与劣势</h3><h4 id="1-2-4-1优势"><a href="#1-2-4-1优势" class="headerlink" title="1.2.4.1优势"></a>1.2.4.1优势</h4><ul><li>多个功能模块揉合在一起的系统进行服务拆分，来解耦服务间的调用,每个项目复杂度降低,团队的职责更加明确；</li><li>扩展更加灵活，复用性高,只需扩容流量特别大项目；</li><li>将模块提供的服务分布到不同的机器或容器里,部署更加灵活，不会因为一个小功能部署就部署所有系统，让整个团队留下来验证；</li><li>独立部署，错误隔离</li></ul><h4 id="1-2-4-2分布式带来的问题"><a href="#1-2-4-2分布式带来的问题" class="headerlink" title="1.2.4.2分布式带来的问题"></a>1.2.4.2分布式带来的问题</h4><ul><li>需要更多优质人才懂分布式，人力成本增加</li><li>运维部署和维护成本显著增加</li><li>多服务间链路变长，开发排查问题难度加大</li><li>网络通信：网络本身的不可靠性，因此会涉及到一些网络通信问题.例如数据幂等性问题、数据的顺序问题等。</li><li>网络分区(脑裂)：当网络发生异常导致分布式系统中部分节点之间的网络延时不断增大，最终导致组成分布式架构的所有节点，只有部分节点能够正常通信，引发了环境高可靠性问题。</li><li>三态：在分布式架构里面多了个状态：超时，所以有三态： 成功、失败、超时,架构设计变得复杂，学习成本高</li><li>分布式事务：ACID(原子性、一致性、隔离性、持久性)</li><li>中心化和去中心化：冷备或者热备</li></ul><p>讲到<code>分布式</code>不得不知道 <code>CAP</code> 定理和 <code>Base</code> 理论，这里给不知道的同学做一个扫盲。</p><h2 id="1-3CAP-定理"><a href="#1-3CAP-定理" class="headerlink" title="1.3CAP 定理"></a>1.3CAP 定理</h2><p>在理论计算机科学中，CAP 定理指出对于一个分布式计算系统来说，不可能同时满足以下三点：</p><ul><li><p><strong>一致性（Consistency）</strong></p></li><li><ul><li>所有节点访问同一份最新的数据副本。</li></ul></li><li><p><strong>可用性（Availability）</strong></p></li><li><ul><li>每次请求都能获取到非错的响应(只要收到用户的请求，服务器就必须给出回应)，但不保证获取的数据为最新数据</li></ul></li><li><p><strong>分区容错性（Partition tolerance）</strong></p></li><li><ul><li>不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择）</li></ul></li><li></li></ul><p><strong>Consistency 和 Availability 的矛盾</strong></p><p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时C和P两要素具备，但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了CP系统，但是CAP不可同时满足。</p><h2 id="1-4BASE-理论"><a href="#1-4BASE-理论" class="headerlink" title="1.4BASE 理论"></a>1.4BASE 理论</h2><p><code>BASE</code> 是 <code>Basically Available</code>（基本可用）、<code>Soft state</code>（软状态）和 <code>Eventually consistent</code>（最终一致性）三个短语的缩写。<code>BASE</code> 理论是对 <code>CAP</code> 中 <code>AP</code> 的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足 <code>BASE</code> 理论的事务，我们称之为<code>柔性事务</code>。</p><ul><li><strong>基本可用 ：</strong> 分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。如电商网址交易付款出现问题来，商品依然可以正常浏览。</li><li><strong>软状态：</strong> 由于不要求强一致性，所以BASE允许系统中存在中间状态（也叫软状态），这个状态不影响系统可用性，如订单中的“支付中”、“数据同步中”等状态，待数据最终一致后状态改为“成功”状态。</li><li><strong>最终一致性：</strong> 最终一致是指的经过一段时间后，所有节点数据都将会达到一致。如订单的“支付中”状态，最终会变为“支付成功”或者“支付失败”，使订单状态与实际交易结果达成一致，但需要一定时间的延迟、等待。</li></ul><h1 id="2-分布式的坑"><a href="#2-分布式的坑" class="headerlink" title="2.分布式的坑"></a>2.分布式的坑</h1><h2 id="2-1分布式消息队列的坑"><a href="#2-1分布式消息队列的坑" class="headerlink" title="2.1分布式消息队列的坑"></a>2.1分布式消息队列的坑</h2><blockquote><p>消息队列如何做分布式?</p><p>将消息队列里面的消息分摊到多个节点（指某台机器或容器）上，所有节点的消息队列之和就包含了所有消息。</p></blockquote><h3 id="2-1-1-消息队列的坑之非幂等"><a href="#2-1-1-消息队列的坑之非幂等" class="headerlink" title="2.1.1 消息队列的坑之非幂等"></a>2.1.1 消息队列的坑之非幂等</h3><h4 id="2-1-1-1幂等性概念"><a href="#2-1-1-1幂等性概念" class="headerlink" title="2.1.1.1幂等性概念"></a>2.1.1.1幂等性概念</h4><p>所谓幂等性就是无论多少次操作和第一次的操作结果一样。如果消息被多次消费，很有可能造成数据的不一致。</p><p>幂等性详细可以看我的另一篇文章：<a href="https://beaumon.cf/2022/09/21/liao-liao-mi-deng-xing/">https://beaumon.cf/2022/09/21/liao-liao-mi-deng-xing/</a></p><h4 id="2-1-1-2场景分析"><a href="#2-1-1-2场景分析" class="headerlink" title="2.1.1.2场景分析"></a>2.1.1.2场景分析</h4><p><code>RabbitMQ</code>、<code>RocketMQ</code>、<code>Kafka</code> 消息队列中间件都有可能出现消息重复消费问题。这种问题并不是 MQ 自己保证的，而是需要开发人员来保证。</p><p>这几款消息队列中间都是是全球最牛的分布式消息队列，那肯定考虑到了消息的幂等性。我们以 Kafka 为例，看看 Kafka 是怎么保证消息队列的幂等性。</p><p>Kafka 有一个 <code>偏移量</code> 的概念，代表着消息的序号，每条消息写到消息队列都会有一个偏移量，消费者消费了数据之后，每过一段固定的时间，就会把消费过的消息的偏移量提交一下，表示已经消费过了，下次消费就从偏移量后面开始消费。</p><blockquote><p><code>坑：</code>当消费完消息后，还没来得及提交偏移量，系统就被关机了，那么未提交偏移量的消息则会再次被消费。</p></blockquote><p>如下图所示，队列中的数据 A、B、C，对应的偏移量分别为 100、101、102，都被消费者消费了，但是只有数据 A 的偏移量 100 提交成功，另外 2 个偏移量因系统重启而导致未及时提交。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220954888.png" alt="img">系统重启，偏移量未提交</p><p>重启后，消费者又是拿偏移量 100 以后的数据，从偏移量 101 开始拿消息。所以数据 B 和数据 C 被重复消费。</p><p>如下图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220954146.png" alt="img">重启后，重复消费消息</p><h4 id="2-1-1-3避坑指南"><a href="#2-1-1-3避坑指南" class="headerlink" title="2.1.1.3避坑指南"></a>2.1.1.3避坑指南</h4><ul><li><p>微信支付结果通知场景</p></li><li><ul><li>微信官方文档上提到微信支付通知结果可能会推送多次，需要开发者自行保证幂等性。第一次我们可以直接修改订单状态（如支付中 -&gt; 支付成功），第二次就根据订单状态来判断，如果不是支付中，则不进行订单处理逻辑。</li></ul></li><li><p>插入数据库场景</p></li><li><ul><li>每次插入数据时，先检查下数据库中是否有这条数据的主键 id，如果有，则进行更新操作。</li></ul></li><li><p>写 Redis 场景</p></li><li><ul><li>Redis 的 <code>Set</code> 操作天然幂等性，所以不用考虑 Redis 写数据的问题。</li></ul></li><li><p>其他场景方案</p></li><li><ul><li>生产者发送每条数据时，增加一个全局唯一 id，类似订单 id。每次消费时，先去 Redis 查下是否有这个 id，如果没有，则进行正常处理消息，且将 id 存到 Redis。如果查到有这个 id，说明之前消费过，则不要进行重复处理这条消息。</li><li>不同业务场景，可能会有不同的幂等性方案，大家选择合适的即可，上面的几种方案只是提供常见的解决思路。</li></ul></li></ul><h3 id="2-1-2消息队列的坑之消息丢失"><a href="#2-1-2消息队列的坑之消息丢失" class="headerlink" title="2.1.2消息队列的坑之消息丢失"></a>2.1.2消息队列的坑之消息丢失</h3><blockquote><p><code>坑:</code>消息丢失会带来什么问题？如果是订单下单、支付结果通知、扣费相关的消息丢失，则可能造成财务损失，如果量很大，就会给甲方带来巨大损失。</p></blockquote><p>那消息队列是否能保证消息不丢失呢？答案：否。主要有三种场景会导致消息丢失。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220954673.png" alt="img">消息队列之消息丢失</p><h4 id="2-1-2-1生产者存放消息的过程中丢失消息"><a href="#2-1-2-1生产者存放消息的过程中丢失消息" class="headerlink" title="2.1.2.1生产者存放消息的过程中丢失消息"></a>2.1.2.1生产者存放消息的过程中丢失消息</h4><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220954042.png" alt="img">生产者丢失消息</p><p><strong>解决方案</strong></p><ul><li>事务机制（不推荐，异步方式）</li></ul><p>对于 RabbitMQ 来说，生产者发送数据之前开启 RabbitMQ 的<strong>事务机制</strong><code>channel.txselect</code> ，如果消息没有进队列，则生产者收到异常报错，并进行回滚 <code>channel.txRollback</code>，然后重试发送消息；如果收到了消息，则可以提交事务 <code>channel.txCommit</code>。但这是一个同步的操作，会影响性能。</p><ul><li>confirm 机制（推荐，异步方式）</li></ul><p>我们可以采用另外一种模式：<code>confirm</code> 模式来解决同步机制的性能问题。每次生产者发送的消息都会分配一个唯一的 id，如果写入到了 RabbitMQ 队列中，则 RabbitMQ 会回传一个 <code>ack</code> 消息，说明这个消息接收成功。如果 RabbitMQ 没能处理这个消息，则回调 <code>nack</code> 接口。说明需要重试发送消息。</p><p>也可以自定义超时时间 + 消息 id 来实现超时等待后重试机制。但可能出现的问题是调用 ack 接口时失败了，所以会出现消息被发送两次的问题，这个时候就需要保证消费者消费消息的幂等性。</p><p><code>事务模式</code> 和 <code>confirm</code> 模式的区别：</p><ul><li>事务机制是同步的，提交事务后会被<strong>阻塞</strong>直到提交事务完成后。</li><li>confirm 模式异步接收通知，但可能<strong>接收不到通知</strong>。需要考虑接收不到通知的场景。</li></ul><h4 id="2-1-2-2消息队列丢失消息"><a href="#2-1-2-2消息队列丢失消息" class="headerlink" title="2.1.2.2消息队列丢失消息"></a>2.1.2.2消息队列丢失消息</h4><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220954866.png" alt="img">消息队列丢失消息</p><p>消息队列的消息可以放到内存中，或将内存中的消息转到硬盘（比如数据库）中，一般都是内存和硬盘中都存有消息。如果只是放在内存中，那么当机器重启了，消息就全部丢失了。如果是硬盘中，则可能存在一种极端情况，就是将内存中的数据写到硬盘的期间，消息队列出问题了，未能将消息持久化到硬盘。</p><p><strong>解决方案</strong></p><ul><li>创建 <code>Queue</code> 的时候将其设置为持久化。</li><li>发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2 。</li><li>开启生产者 <code>confirm</code> 模式，可以重试发送消息。</li></ul><h4 id="2-1-2-3消费者丢失消息"><a href="#2-1-2-3消费者丢失消息" class="headerlink" title="2.1.2.3消费者丢失消息"></a>2.1.2.3消费者丢失消息</h4><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220954665.png" alt="img">消费者丢失消息</p><p>消费者刚拿到数据，还没开始处理消息，结果进程因为异常退出了，消费者没有机会再次拿到消息。</p><p><strong>解决方案</strong></p><ul><li>关闭 RabbitMQ 的自动 <code>ack</code>，每次生产者将消息写入消息队列后，就自动回传一个 <code>ack</code> 给生产者。</li><li>消费者处理完消息再主动 <code>ack</code>，告诉消息队列我处理完了。</li></ul><p><strong>问题：</strong> 那这种主动 <code>ack</code> 有什么漏洞？如果 主动 <code>ack</code> 的时候挂了，怎么办？</p><p>则可能会被再次消费，这个时候就需要幂等处理了。</p><p><strong>问题：</strong> 如果这条消息一直被重复消费怎么办？</p><p>则需要有加上重试次数的监测，如果超过一定次数则将消息丢失，记录到异常表或发送异常通知给值班人员。</p><h4 id="2-1-2-4RabbitMQ-消息丢失总结"><a href="#2-1-2-4RabbitMQ-消息丢失总结" class="headerlink" title="2.1.2.4RabbitMQ 消息丢失总结"></a>2.1.2.4RabbitMQ 消息丢失总结</h4><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220954386.png" alt="img">RabbitMQ 丢失消息的处理方案</p><h4 id="2-1-2-5Kafka-消息丢失"><a href="#2-1-2-5Kafka-消息丢失" class="headerlink" title="2.1.2.5Kafka 消息丢失"></a>2.1.2.5Kafka 消息丢失</h4><p><strong>场景：</strong><code>Kafka</code> 的某个 broker（节点）宕机了，重新选举 leader （写入的节点）。如果 leader 挂了，follower 还有些数据未同步完，则 follower 成为 leader 后，消息队列会丢失一部分数据。</p><p><strong>解决方案</strong></p><ul><li>给 topic 设置 <code>replication.factor</code> 参数，值必须大于 1，要求每个 partition 必须有至少 2 个副本。</li><li>给 kafka 服务端设置 <code>min.insyc.replicas</code> 必须大于 1，表示一个 leader 至少一个 follower 还跟自己保持联系。</li></ul><h3 id="2-1-3消息队列的坑之消息乱序"><a href="#2-1-3消息队列的坑之消息乱序" class="headerlink" title="2.1.3消息队列的坑之消息乱序"></a>2.1.3消息队列的坑之消息乱序</h3><blockquote><p><code>坑:</code> 用户先下单成功，然后取消订单，如果顺序颠倒，则最后数据库里面会有一条下单成功的订单。</p></blockquote><p><strong>RabbitMQ 场景：</strong></p><ul><li>生产者向消息队列按照顺序发送了 2 条消息，消息1：增加数据 A，消息2：删除数据 A。</li><li>期望结果：数据 A 被删除。</li><li>但是如果有两个消费者，消费顺序是：消息2、消息 1。则最后结果是增加了数据 A。</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955244.png" alt="img">RabbitMQ消息乱序场景</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955797.png" alt="img">RabbitMQ 消息乱序场景</p><p><strong>RabbitMQ 解决方案：</strong></p><ul><li>将 Queue 进行拆分，创建多个内存 Queue，消息 1 和 消息 2 进入同一个 Queue。</li><li>创建多个消费者，每一个消费者对应一个 Queue。</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955503.png" alt="img">RabbitMQ 解决方案</p><p><strong>Kafka 场景：</strong></p><ul><li>创建了 topic，有 3 个 partition。</li><li>创建一条订单记录，订单 id 作为 key，订单相关的消息都丢到同一个 partition 中，同一个生产者创建的消息，顺序是正确的。</li><li>为了快速消费消息，会创建多个消费者去处理消息，而为了提高效率，每个消费者可能会创建多个线程来并行的去拿消息及处理消息，处理消息的顺序可能就乱序了。</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955378.png" alt="img">Kafka 消息丢失场景</p><p><strong>Kafka 解决方案：</strong></p><ul><li>解决方案和 RabbitMQ 类似，利用多个 内存 Queue，每个线程消费 1个 Queue。</li><li>具有相同 key 的消息 进同一个 Queue。</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955480.png" alt="img">Kafka 消息乱序解决方案</p><h3 id="2-1-4消息队列的坑之消息积压"><a href="#2-1-4消息队列的坑之消息积压" class="headerlink" title="2.1.4消息队列的坑之消息积压"></a>2.1.4消息队列的坑之消息积压</h3><p>消息积压：消息队列里面有很多消息来不及消费。</p><p><strong>场景 1：</strong> 消费端出了问题，比如消费者都挂了，没有消费者来消费了，导致消息在队列里面不断积压。</p><p><strong>场景 2：</strong> 消费端出了问题，比如消费者消费的速度太慢了，导致消息不断积压。</p><blockquote><p>坑：比如线上正在做订单活动，下单全部走消息队列，如果消息不断积压，订单都没有下单成功，那么将会损失很多交易。</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955341.png" alt="img">消息队列之消息积压</p><p><strong>解决方案：解铃还须系铃人</strong></p><ul><li>修复代码层面消费者的问题，确保后续消费速度恢复或尽可能加快消费的速度。</li><li>停掉现有的消费者。</li><li>临时建立好原先 5 倍的 Queue 数量。</li><li>临时建立好原先 5 倍数量的 消费者。</li><li>将堆积的消息全部转入临时的 Queue，消费者来消费这些 Queue。</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955008.png" alt="img">消息积压解决方案</p><h3 id="2-1-5消息队列的坑之消息过期失效"><a href="#2-1-5消息队列的坑之消息过期失效" class="headerlink" title="2.1.5消息队列的坑之消息过期失效"></a>2.1.5消息队列的坑之消息过期失效</h3><blockquote><p><code>坑：</code>RabbitMQ 可以设置过期时间，如果消息超过一定的时间还没有被消费，则会被 RabbitMQ 给清理掉。消息就丢失了。</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955190.png" alt="img">消息过期失效</p><p><strong>解决方案：</strong></p><ul><li>准备好批量重导的程序</li><li>手动将消息闲时批量重导</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220955952.png" alt="img">消息过期失效解决方案</p><h3 id="2-1-6消息队列的坑之队列写满"><a href="#2-1-6消息队列的坑之队列写满" class="headerlink" title="2.1.6消息队列的坑之队列写满"></a>2.1.6消息队列的坑之队列写满</h3><blockquote><p><code>坑：</code>当消息队列因消息积压导致的队列快写满，所以不能接收更多的消息了。生产者生产的消息将会被丢弃。</p></blockquote><p><strong>解决方案：</strong></p><ul><li>判断哪些是无用的消息，RabbitMQ 可以进行 <code>Purge Message</code> 操作。</li><li>如果是有用的消息，则需要将消息快速消费，将消息里面的内容转存到数据库。</li><li>准备好程序将转存在数据库中的消息再次重导到消息队列。</li><li>闲时重导消息到消息队列。</li></ul><h2 id="2-2分布式缓存的坑"><a href="#2-2分布式缓存的坑" class="headerlink" title="2.2分布式缓存的坑"></a>2.2分布式缓存的坑</h2><p>在高频访问数据库的场景中，我们会在业务层和数据层之间加入一套缓存机制，来分担数据库的访问压力，毕竟访问磁盘 I/O 的速度是很慢的。比如利用缓存来查数据，可能5ms就能搞定，而去查数据库可能需要 50 ms，差了一个数量级。而在高并发的情况下，数据库还有可能对数据进行加锁，导致访问数据库的速度更慢。</p><p>分布式缓存我们用的最多的就是 Redis了，它可以提供分布式缓存服务。</p><h3 id="2-2-1Redis-数据丢失的坑"><a href="#2-2-1Redis-数据丢失的坑" class="headerlink" title="2.2.1Redis 数据丢失的坑"></a>2.2.1Redis 数据丢失的坑</h3><p><strong>哨兵机制</strong></p><p>Redis 可以实现利用<code>哨兵机制</code>实现集群的高可用。那什么是哨兵机制呢？</p><ul><li>英文名：<code>sentinel</code>，中文名：<code>哨兵</code>。</li><li>集群监控：负责主副进程的正常工作。</li><li>消息通知：负责将故障信息报警给运维人员。</li><li>故障转移：负责将主节点转移到备用节点上。</li><li>配置中心：通知客户端更新主节点地址。</li><li>分布式：有多个哨兵分布在每个主备节点上，互相协同工作。</li><li>分布式选举：需要大部分哨兵都同意，才能进行主备切换。</li><li>高可用：即使部分哨兵节点宕机了，哨兵集群还是能正常工作。</li></ul><blockquote><p><code>坑：</code> 当主节点发生故障时，需要进行主备切换，可能会导致数据丢失。</p></blockquote><h4 id="2-2-1-1异步复制数据导致的数据丢失"><a href="#2-2-1-1异步复制数据导致的数据丢失" class="headerlink" title="2.2.1.1异步复制数据导致的数据丢失"></a>2.2.1.1异步复制数据导致的数据丢失</h4><p>主节点异步同步数据给备用节点的过程中，主节点宕机了，导致有部分数据未同步到备用节点。而这个从节点又被选举为主节点，这个时候就有部分数据丢失了。</p><h4 id="2-2-1-2脑裂导致的数据丢失"><a href="#2-2-1-2脑裂导致的数据丢失" class="headerlink" title="2.2.1.2脑裂导致的数据丢失"></a>2.2.1.2脑裂导致的数据丢失</h4><p>主节点所在机器脱离了集群网络，实际上自身还是运行着的。但哨兵选举出了备用节点作为主节点，这个时候就有两个主节点都在运行，相当于两个大脑在指挥这个集群干活，但到底听谁的呢？这个就是脑裂。</p><p>那怎么脑裂怎么会导致数据丢失呢？如果发生脑裂后，客户端还没来得及切换到新的主节点，连的还是第一个主节点，那么有些数据还是写入到了第一个主节点里面，新的主节点没有这些数据。那等到第一个主节点恢复后，会被作为备用节点连到集群环境，而且自身数据会被清空，重新从新的主节点复制数据。而新的主节点因没有客户端之前写入的数据，所以导致数据丢失了一部分。</p><p><strong>避坑指南</strong></p><ul><li>配置 min-slaves-to-write 1，表示至少有一个备用节点。</li><li>配置 min-slaves-max-lag 10，表示数据复制和同步的延迟不能超过 10 秒。最多丢失 10 秒的数据</li></ul><p>注意：<code>缓存雪崩</code>、<code>缓存穿透</code>、<code>缓存击穿</code>并不是分布式所独有的，单机的时候也会出现。所以不在分布式的坑之列。</p><h2 id="2-3分库分表的坑"><a href="#2-3分库分表的坑" class="headerlink" title="2.3分库分表的坑"></a>2.3分库分表的坑</h2><h3 id="2-3-1分库分表的坑之扩容"><a href="#2-3-1分库分表的坑之扩容" class="headerlink" title="2.3.1分库分表的坑之扩容"></a>2.3.1分库分表的坑之扩容</h3><p><strong>分库、分表、垂直拆分和水平拆分</strong></p><ul><li><p><strong>分库：</strong> 因一个数据库支持的最高并发访问数是有限的，可以将一个数据库的数据拆分到多个库中，来增加最高并发访问数。</p></li><li><p><strong>分表：</strong> 因一张表的数据量太大，用索引来查询数据都搞不定了，所以可以将一张表的数据拆分到多张表，查询时，只用查拆分后的某一张表，SQL 语句的查询性能得到提升。</p></li><li><p>分库分表优势：分库分表后，承受的并发增加了多倍；磁盘使用率大大降低；单表数据量减少，SQL 执行效率明显提升。</p></li><li><p><strong>水平拆分：</strong> 把一个表的数据拆分到多个数据库，每个数据库中的表结构不变。用多个库扛更高的并发。比如订单表每个月有500万条数据累计，每个月都可以进行水平拆分，将上个月的数据放到另外一个数据库。</p></li><li><p><strong>垂直拆分：</strong> 把一个有很多字段的表，拆分成多张表到同一个库或多个库上面。高频访问字段放到一张表，低频访问的字段放到另外一张表。利用数据库缓存来缓存高频访问的行数据。比如将一张很多字段的订单表拆分成几张表分别存不同的字段（可以有冗余字段）。</p></li><li><p><strong>分库、分表的方式：</strong></p></li><li><ul><li>根据租户来分库、分表。</li><li>利用时间范围来分库、分表。</li><li>利用 ID 取模来分库、分表。</li></ul></li></ul><blockquote><p><code>坑：</code>分库分表是一个运维层面需要做的事情，有时会采取凌晨宕机开始升级。可能熬夜到天亮，结果升级失败，则需要回滚，其实对技术团队都是一种煎熬。</p></blockquote><p><strong>怎么做成自动的来节省分库分表的时间？</strong></p><ul><li>双写迁移方案：迁移时，新数据的增删改操作在新库和老库都做一遍。</li><li>使用分库分表工具 Sharding-jdbc  来完成分库分表的累活。</li><li>使用程序来对比两个库的数据是否一致，直到数据一致。</li></ul><blockquote><p><code>坑:</code> 分库分表看似光鲜亮丽，但分库分表会引入什么新的问题呢？</p></blockquote><p><strong>垂直拆分带来的问题</strong></p><ul><li>依然存在单表数据量过大的问题。</li><li>部分表无法关联查询，只能通过接口聚合方式解决，提升了开发的复杂度。</li><li>分布式事处理复杂。</li></ul><p><strong>水平拆分带来的问题</strong></p><ul><li>跨库的关联查询性能差。</li><li>数据多次扩容和维护量大。</li><li>跨分片的事务一致性难以保证。</li></ul><h3 id="2-3-2分库分表的坑之唯一-ID"><a href="#2-3-2分库分表的坑之唯一-ID" class="headerlink" title="2.3.2分库分表的坑之唯一 ID"></a>2.3.2分库分表的坑之唯一 ID</h3><p><strong>为什么分库分表需要唯一 ID</strong></p><ul><li>如果要做分库分表，则必须得考虑表主键 ID 是全局唯一的，比如有一张订单表，被分到 A 库和 B 库。如果 两张订单表都是从 1 开始递增，那查询订单数据时就错乱了，很多订单 ID 都是重复的，而这些订单其实不是同一个订单。</li><li>分库的一个期望结果就是将访问数据的次数分摊到其他库，有些场景是需要均匀分摊的，那么数据插入到多个数据库的时候就需要交替生成唯一的 ID 来保证请求均匀分摊到所有数据库。</li></ul><blockquote><p><code>坑:</code> 唯一 ID 的生成方式有 n 种，各有各的用途，别用错了。</p></blockquote><p><strong>生成唯一 ID 的原则</strong></p><ul><li>全局唯一性</li><li>趋势递增</li><li>单调递增</li><li>信息安全</li></ul><p><strong>生成唯一 ID 的几种方式</strong></p><ul><li><p>数据库自增 ID。每个数据库每增加一条记录，自己的 ID 自增 1。</p></li><li><ul><li>多个库的 ID 可能重复，这个方案可以直接否掉了，不适合分库分表后的 ID 生成。</li><li>信息不安全</li><li>缺点</li></ul></li><li><p>适用 <code>UUID</code> 唯一 ID。</p></li><li><ul><li>UUID 太长、占用空间大。</li><li>不具有有序性，作为主键时，在写入数据时，不能产生有顺序的 append 操作，只能进行 insert 操作，导致读取整个 <code>B+</code> 树节点到内存，插入记录后将整个节点写回磁盘，当记录占用空间很大的时候，性能很差。</li><li>缺点</li></ul></li><li><p>获取系统当前时间作为唯一 ID。</p></li><li><ul><li>高并发时，1 ms内可能有多个相同的 ID。</li><li>信息不安全</li><li>缺点</li></ul></li><li><p>Twitter 的 <code>snowflake</code>（雪花算法）：Twitter 开源的分布式 id 生成算法，64 位的 long 型的 id，分为 4 部分</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220956497.png" alt="img">snowflake 算法</p></li><li><p>基本原理和优缺点：</p></li><li><ul><li><p>1 bit：不用，统一为 0</p></li><li><p>41 bits：毫秒时间戳，可以表示 69 年的时间。</p></li><li><p>10 bits：5 bits 代表机房 id，5 个 bits 代表机器 id。最多代表 32 个机房，每个机房最多代表 32 台机器。</p></li><li><p>12 bits：同一毫秒内的 id，最多 4096 个不同 id，自增模式。</p></li><li><p>优点：</p></li><li><ul><li>毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。</li><li>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。</li><li>可以根据自身业务特性分配bit位，非常灵活。</li></ul></li><li><p>缺点：</p></li><li><ul><li>强依赖机器时钟，如果机器上时钟回拨（可以搜索 <strong>2017 年闰秒 7:59:60</strong>），会导致发号重复或者服务会处于不可用状态。</li></ul></li></ul></li><li><p>百度的 <code>UIDGenerator</code> 算法。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220956311.png" alt="img">UIDGenerator 算法</p></li><li><ul><li>基于 Snowflake 的优化算法。</li><li>借用未来时间和双 Buffer 来解决时间回拨与生成性能等问题，同时结合 MySQL 进行 ID 分配。</li><li>优点：解决了时间回拨和生成性能问题。</li><li>缺点：依赖 MySQL 数据库。</li></ul></li><li><p>美团的 <code>Leaf-Snowflake</code> 算法。</p></li><li><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220956565.png" alt="img"></p></li><li><ul><li><p>获取 id 是通过代理服务访问数据库获取一批 id（号段）。</p></li><li><p>双缓冲：当前一批的 id 使用 10%时，再访问数据库获取新的一批 id 缓存起来，等上批的 id 用完后直接用。</p></li><li><p>优点：</p></li><li><ul><li>Leaf服务可以很方便的线性扩展，性能完全能够支撑大多数业务场景。</li><li>ID号码是趋势递增的8byte的64位数字，满足上述数据库存储的主键要求。</li><li>容灾性高：Leaf服务内部有号段缓存，即使DB宕机，短时间内Leaf仍能正常对外提供服务。</li><li>可以自定义max_id的大小，非常方便业务从原有的ID方式上迁移过来。</li><li>即使DB宕机，Leaf仍能持续发号一段时间。</li><li>偶尔的网络抖动不会影响下个号段的更新。</li></ul></li><li><p>缺点：</p></li><li><ul><li>ID号码不够随机，能够泄露发号数量的信息，不太安全。</li></ul></li></ul></li></ul><p>怎么选择：一般自己的内部系统，雪花算法足够，如果还要更加安全可靠，可以选择百度或美团的生成唯一 ID 的方案。</p><h2 id="2-4分布式事务的坑"><a href="#2-4分布式事务的坑" class="headerlink" title="2.4分布式事务的坑"></a>2.4分布式事务的坑</h2><p><strong>怎么理解事务？</strong></p><ul><li>事务可以简单理解为要么这件事情全部做完，要么这件事情一点都没做，跟没发生一样。</li><li>在分布式的世界中，存在着各个服务之间相互调用，链路可能很长，如果有任何一方执行出错，则需要回滚涉及到的其他服务的相关操作。比如订单服务下单成功，然后调用营销中心发券接口发了一张代金券，但是微信支付扣款失败，则需要退回发的那张券，且需要将订单状态改为异常订单。</li></ul><blockquote><p><code>坑</code>：如何保证分布式中的事务正确执行，是个大难题。</p></blockquote><p><strong>分布式事务的几种主要方式</strong></p><ul><li>XA 方案（两阶段提交方案）</li><li>TCC 方案（try、confirm、cancel）</li><li>SAGA 方案</li><li>可靠消息最终一致性方案</li><li>最大努力通知方案</li></ul><p><strong>XA 方案原理</strong></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220956989.png" alt="img">XA 方案</p><ul><li>事务管理器负责协调多个数据库的事务，先问问各个数据库准备好了吗？如果准备好了，则在数据库执行操作，如果任一数据库没有准备，则回滚事务。</li><li>适合单体应用，不适合微服务架构。因为每个服务只能访问自己的数据库，不允许交叉访问其他微服务的数据库。</li></ul><p><strong>TCC 方案</strong></p><ul><li>Try 阶段：对各个服务的资源做检测以及对资源进行锁定或者预留。</li><li>Confirm 阶段：各个服务中执行实际的操作。</li><li>Cancel 阶段：如果任何一个服务的业务方法执行出错，需要将之前操作成功的步骤进行回滚。</li></ul><p>应用场景：</p><ul><li>跟支付、交易打交道，必须保证资金正确的场景。</li><li>对于一致性要求高。</li></ul><p>缺点：</p><ul><li>但因为要写很多补偿逻辑的代码，且不易维护，所以其他场景建议不要这么做。</li></ul><p><strong>Sega 方案</strong></p><p>基本原理：</p><ul><li>业务流程中的每个步骤若有一个失败了，则补偿前面操作成功的步骤。</li></ul><p>适用场景：</p><ul><li>业务流程长、业务流程多。</li><li>参与者包含其他公司或遗留系统服务。</li></ul><p>优势：</p><ul><li>第一个阶段提交本地事务、无锁、高性能。</li><li>参与者可异步执行、高吞吐。</li><li>补偿服务易于实现。</li></ul><p>缺点：</p><ul><li>不保证事务的隔离性。</li></ul><p><strong>可靠消息一致性方案</strong></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209220956329.png" alt="img">可靠消息一致性方案</p><p>基本原理：</p><ul><li>利用消息中间件 <code>RocketMQ</code> 来实现消息事务。</li><li>第一步：A 系统发送一个消息到 MQ，MQ将消息状态标记为 <code>prepared</code>（预备状态，半消息），该消息无法被订阅。</li><li>第二步：MQ 响应 A 系统，告诉 A 系统已经接收到消息了。</li><li>第三步：A 系统执行本地事务。</li><li>第四步：若 A 系统执行本地事务成功，将 <code>prepared</code> 消息改为 <code>commit</code>（提交事务消息），B 系统就可以订阅到消息了。</li><li>第五步：MQ 也会定时轮询所有 <code>prepared</code>的消息，回调 A 系统，让 A 系统告诉 MQ 本地事务处理得怎么样了，是继续等待还是回滚。</li><li>第六步：A 系统检查本地事务的执行结果。</li><li>第七步：若 A 系统执行本地事务失败，则 MQ 收到 <code>Rollback</code> 信号，丢弃消息。若执行本地事务成功，则 MQ 收到 <code>Commit</code> 信号。</li><li>B 系统收到消息后，开始执行本地事务，如果执行失败，则自动不断重试直到成功。或 B 系统采取回滚的方式，同时要通过其他方式通知 A 系统也进行回滚。</li><li>B 系统需要保证幂等性。</li></ul><p><strong>最大努力通知方案</strong></p><p>基本原理：</p><ul><li>系统 A 本地事务执行完之后，发送消息到 MQ。</li><li>MQ 将消息持久化。</li><li>系统 B 如果执行本地事务失败，则<code>最大努力服务</code>会定时尝试重新调用系统 B，尽自己最大的努力让系统 B 重试，重试多次后，还是不行就只能放弃了。转到开发人员去排查以及后续人工补偿。</li></ul><p><strong>几种方案的选择</strong></p><ul><li>跟支付、交易打交道，优先 TCC。</li><li>大型系统，但要求不那么严格，考虑 消息事务或 SAGA 方案。</li><li>单体应用，建议 XA 两阶段提交就可以了。</li><li>最大努力通知方案建议都加上，毕竟不可能一出问题就交给开发排查，先重试几次看能不能成功。</li></ul><p>引文连接：<a href="https://mp.weixin.qq.com/s/qrpz2m7XhYo4l_yHkP1WyQ">https://mp.weixin.qq.com/s/qrpz2m7XhYo4l_yHkP1WyQ</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊幂等性</title>
      <link href="/2022/09/21/liao-liao-mi-deng-xing/"/>
      <url>/2022/09/21/liao-liao-mi-deng-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h1><h2 id="1-幂等的数学概念"><a href="#1-幂等的数学概念" class="headerlink" title="1.幂等的数学概念"></a>1.幂等的数学概念</h2><p>如果在一元运算中，x 为某集合中的任意数，如果满足 f(x) = f(f(x)) ，那么该 f 运算具有幂等性。</p><blockquote><p>绝对值运算 abs(a) = abs(abs(a)) 就是幂等性函数</p></blockquote><p>如果在二元运算中，x 为某集合中的任意数，如果满足 f(x,x) = x，前提是 f 运算的两个参数均为 x，那么我们称 f 运算也有幂等性。</p><blockquote><p> 求大值函数 max(x,x) = x 就是幂等性函数 </p></blockquote><h2 id="2-幂等概述"><a href="#2-幂等概述" class="headerlink" title="2.幂等概述"></a>2.幂等概述</h2><h3 id="2-1幂等业务场景分析"><a href="#2-1幂等业务场景分析" class="headerlink" title="2.1幂等业务场景分析"></a>2.1幂等业务场景分析</h3><p>生产环境经常出现过重复的数据？在排查问题的时候，数据又是正常的。这个是何解呢？怎么会出现这种情况，而且还很难排查问题。 </p><p>原因 ：产生重复数据或数据不一致（假定程序业务代码没问题），绝大部分就是发生了重复的请求，重复请求是指同一个请求因为某些原因被多次提交。导致这个情况会有几种场景：（本质上：多次请求）</p><blockquote><p>1）微服务场景，在我们传统应用架构中调用接口，要么成功，要么失败。但是在微服务架构下，会有第三个情况【未知】，也就是超时。如果超时了，微服务框架会进行重试。<br>2）用户交互的时候多次点击。如：快速点击按钮多次。<br>3）MQ消息中间件，消息重复消费。<br>4）第三方平台的接口（如：支付成功回调接口），因为异常也会导致多次异步回调。<br>5）其他中间件/应用服务根据自身的特性，也有可能进行重试。</p></blockquote><h3 id="2-2接口幂等"><a href="#2-2接口幂等" class="headerlink" title="2.2接口幂等"></a>2.2接口幂等</h3><p>接口的幂等性实际上就是 <strong>接口可重复调用，在调用方多次调用的情况下，接口最终得到的结果是一致的</strong>。更准确的讲：多次调用对系统的产生的影响是一样的，即对资源的作用是一样的，但是返回值允许不同。</p><h3 id="2-3幂等业务场景举例"><a href="#2-3幂等业务场景举例" class="headerlink" title="2.3幂等业务场景举例"></a>2.3幂等业务场景举例</h3><p>场景1：支付场景</p><blockquote><p>1.一个订单创建接口，第一次调用超时了，然后调用方重试了一次<br>2.在订单创建时，我们需要去扣减库存，这时接口发生了超时，调用方重试了一次<br>3.当这笔订单开始支付，在支付请求发出之后，在服务端发生了扣钱操作，接口响应超时了，调用方重试了一次<br>4.一个订单状态更新接口，调用方连续发送了两个消息，一个是已创建，一个是已付款。但是你先接收到已付款，然后又接收到了已创建<br>5.在支付完成订单之后，需要发送一条短信，当一台机器接收到短信发送的消息之后，处理较慢。消息中间件又把消息投递给另外一台机器处理</p></blockquote><p>场景2：一键三连</p><blockquote><p>小破站有一个一键三连的功能，长按可以对up主进行激励，每个人对每个视频只有一个一键三连的机会。就算再喜欢某个视频，多次操作，也只能有一键三连一次。</p></blockquote><p>场景3：统计DAU/MAU</p><blockquote><p>DAU/MAU，又叫日活/月活，是用于反映网站、互联网应用或网络游戏的运营情况的统计指标。所以一个用户当天或者当月登录多次（或者达到某种活跃用户判断机制多次），也只能看作一个活跃用户，不能重复计算。</p></blockquote><h3 id="2-4CRUD与幂等"><a href="#2-4CRUD与幂等" class="headerlink" title="2.4CRUD与幂等"></a>2.4CRUD与幂等</h3><p>有些接口可以天然的实现幂等性，比如查询接口，对于查询来说，查询一次和多次，对于系统来说，没有任何影响，查出的结果也是一样，而其他功能，例如：增加、更新、删除都要保证幂等性。<br>以user表举例</p><p>1、查询，select * from user where xxx，不会对数据产生任何变化，具备幂等性</p><p>2、新增，insert into user(userid, name) values(1, ‘a’)</p><blockquote><p>如 userid 为唯一主键，即重复操作上面的业务，只会插入一条用户数据，具备幂等性</p></blockquote><blockquote><p>如 userid 不是主键，可以重复，那上面业务多次操作，数据都会新增多条，不具备幂等性</p></blockquote><p>3、修改，区分直接赋值和计算赋值</p><blockquote><p>直接赋值，update user set point = 20 where userid = 1，不管执行多少次，point都一样，具备幂等性</p></blockquote><blockquote><p>计算赋值，update user set point = point + 20 where userid = 1，每次操作 point 数据都不一样，不具备幂等性</p></blockquote><p>4、删除，delete from user where userid = 1，多次操作，结果一样，具备幂等性</p><p>因此，我们可以得出，<strong>没有唯一主键约束的数据，和修改计算赋值数据的操作都不具备幂等性</strong> 。</p><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h2><h3 id="3-1token-redis机制"><a href="#3-1token-redis机制" class="headerlink" title="3.1token + redis机制"></a>3.1token + redis机制</h3><p>token + redis 的幂等方案，适用于绝大部分场景。主要思想：</p><pre class="line-numbers language-none"><code class="language-none">token作为请求的唯一性标示redis作为存储token的数据库每次请求先去redis查看token是否存在不存在，将返回结果缓存到redis存在，直接返回缓存结果设置缓存有效期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2乐观锁机制"><a href="#3-2乐观锁机制" class="headerlink" title="3.2乐观锁机制"></a>3.2乐观锁机制</h3><p>乐观锁这里解决了计算赋值型的修改场景</p><pre class="line-numbers language-none"><code class="language-none">update user set point = #{point}+ 20, version = #{version}+ 1 where userid=#{userid} and version=#{version}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 加上了版本号后，就让此计算赋值型业务，具备了幂等性</p><p>缺点：就是在操作业务前，需要先查询出当前的version版本,version实例如下：</p><ul><li>多版本控制</li></ul><p>这种方法适合在更新的场景中，比如我们要更新商品的名字，这时我们就可以在更新的接口中增加一个版本号，来做幂等</p><pre class="line-numbers language-none"><code class="language-none">boolean updateGoodsName(int id,String newName,int version);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在实现时可以如下</p><pre class="line-numbers language-none"><code class="language-none">update goods set name=#{newName},version=#{version} where id=#{id} and version&lt;${version}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>状态机控制</li></ul><p>这种方法适合在有状态机流转的情况下，比如就会订单的创建和付款，订单的付款肯定是在之前，这时我们可以通过在设计状态字段时，使用int类型，并且通过值类型的大小来做幂等，比如订单的创建为0，付款成功为10，付款失败为-1。</p><p>在做状态机更新时，我们就这可以这样控制</p><pre class="line-numbers language-none"><code class="language-none">update `order` set status=#{status} where id=#{id} and status&lt;#{status}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3唯一主键机制"><a href="#3-3唯一主键机制" class="headerlink" title="3.3唯一主键机制"></a>3.3唯一主键机制</h3><p>唯一主键机制就是根据业务的操作和内容生成一个全局唯一的主键ID，在执行操作前先根据这个全局唯一的主键ID是否存在，来判断这个操作是否已经执行。如果不存在则把全局ID，存储到存储系统中，比如数据库、redis等。如果存在则表示该方法已经执行。</p><p>从工程的角度来说，使用全局ID做幂等可以作为一个业务的基础的微服务存在，在很多的微服务中都会用到这样的服务，在每个微服务中都完成这样的功能，会存在工作量重复。另外打造一个高可靠的幂等服务还需要考虑很多问题，比如一台机器虽然把全局唯一的主键ID先写入了存储，但是在写入之后挂了，这就需要引入全局唯一的主键ID的超时机制。使用全局唯一ID是一个通用方案，可以支持插入、更新、删除业务操作。但是这个方案看起来很美但是实现起来比较麻烦。</p><p>总而言之，这个机制是利用了数据库的主键唯一约束的特性，解决了在insert场景时幂等问题。但主键的要求不是自增的主键，这样就需要业务生成全局唯一的主键 ID来解决。</p><p>如果是<strong>分库分表场景下，路由规则要保证相同请求下，落点在同一个数据库和同一表中</strong>，要不然数据库主键约束就不起效果了，因为是不同的数据库和表主键不相关。</p><p>因为对主键有一定的要求，这个方案就跟业务有点耦合了，无法用自增主键了。</p><h3 id="3-4去重表机制"><a href="#3-4去重表机制" class="headerlink" title="3.4去重表机制"></a>3.4去重表机制</h3><p>这种方法适用于在业务中有唯一标的插入场景中，比如在以上的支付场景中，如果一个订单只会支付一次，所以订单ID可以作为唯一标识。这时，我们就可以建一张去重表，并且把唯一标识作为唯一索引，在我们实现时，把创建支付单据和写入去去重表，放在一个事务中，如果重复创建，数据库会抛出唯一约束异常，操作就会回滚。</p><p>简单来说，就是 把唯一主键插入去重表，再进行业务操作，且他们在同一个事务中。这个保证了重复请求时，因为去重表有唯一约束，导致请求失败，避免了幂等问题。</p><blockquote><p>这里要注意的是，<strong>去重表和业务表应该在同一库中，这样就保证了在同一个事务，即使业务操作失败了，也会把去重表的数据回滚</strong>。这个很好的保证了数据一致性。</p></blockquote><p>这个方案也是比较常用的，去重表是跟业务无关的，很多业务可以共用同一个去重表，只要规划好唯一主键就行了。</p><h3 id="3-5门票机制"><a href="#3-5门票机制" class="headerlink" title="3.5门票机制"></a>3.5门票机制</h3><p>支付场景：单次支付请求，也就是直接支付了，不需要额外的数据库操作了，这个时候发起异步请求创建一个唯一的ticketId，就是门票，这张门票只能使用一次就作废。</p><p>具体步骤：</p><pre class="line-numbers language-none"><code class="language-none">1.异步请求获取门票2.调用支付，传入门票3.根据门票ID查询此次操作是否存在，如果存在则表示该操作已经执行过，直接返回结果；如果不存在，支付扣款，保存结果4.返回结果到客户端如果步骤4通信失败，用户再次发起请求，那么最终结果还是一样的.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 聊聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幂等性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊java中的21种锁</title>
      <link href="/2022/09/09/liao-liao-java-zhong-de-21-chong-suo/"/>
      <url>/2022/09/09/liao-liao-java-zhong-de-21-chong-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊java中的21种锁"><a href="#聊聊java中的21种锁" class="headerlink" title="聊聊java中的21种锁"></a>聊聊java中的21种锁</h1><h2 id="1-概括"><a href="#1-概括" class="headerlink" title="1.概括"></a>1.概括</h2><ol><li>公平锁/非公平锁</li><li>可重入锁/不可重入锁</li><li>悲观锁/乐观锁</li><li>自旋锁</li><li>分段锁</li><li>互斥锁/读写锁</li><li>独享锁/共享锁</li><li>偏向锁/轻量级锁/重量级锁</li></ol><p>以上锁分类并不全指锁的状态，有些是锁的特性、设计。</p><p>公平锁：按线程申请锁的先后顺序获得锁<br>非公平锁：线程不是按先后顺序获得锁，效率比公平锁效率高</p><p>可重入锁：已获得的锁在内层可重复使用<br>不可重入锁：已获得的锁在内层不可重复使用</p><p>悲观锁：每次都假定访问时会有多个线程，执行代码前都要加锁，加锁成功后，其它线程处于阻塞状态<br>乐观锁：其实就是无锁，CAS就是无锁，每次都假定访问时只有自己一个线程</p><p>自旋锁：当一个线程在获得锁的时候，有其它线程获得锁，那么该线程就循环判断是否能获得锁，直至其它线程释放锁，然后获得锁。</p><p>分段锁：它是一种锁的设计，ConcurrentHashMap就是将hash数据分成多段，持有多把锁，其实就是分成多个hashmap，只有当线程访问同一把锁时才会阻塞，提高了效率。</p><p>互斥锁：加锁的代码块只能允许一个线程访问，其它线程则会阻塞<br>读写锁：它的read模式是共享锁、write模式是互斥锁。读锁和读锁能共存，读锁和写锁、写锁和写锁均不能共存</p><p>独享锁：就是互斥锁，该锁每次只能有一个线程访问<br>共享锁：该锁可以有多个线程访问</p><p>偏向锁：同一代码块一直被同一线程获得锁，那么下次将自动获得锁，降低获得锁的代价</p><p>轻量级锁：当锁是偏向锁时，被其它线程访问，偏向锁就会升级为轻量级锁，通过自旋转来获取锁，不会阻塞，提高性能</p><p>重量级锁：当轻量级锁时，线程一直自旋，当自旋次数达到一定次数时，将提升为重量级锁，让其它申请锁的线程进入阻塞状态，降低cpu的负载。synchronized是重量级锁。</p><h2 id="2-详解"><a href="#2-详解" class="headerlink" title="2.详解"></a>2.详解</h2><h3 id="2-1公平锁-x2F-非公平锁"><a href="#2-1公平锁-x2F-非公平锁" class="headerlink" title="2.1公平锁/非公平锁"></a>2.1公平锁/非公平锁</h3><ul><li><p>公平锁：公平锁是指多个线程申请锁的顺序来获取锁，类似排队买票，先来的人先买，后来的人在队尾排着，这是公平的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091602502.png" alt="image-20220909143227215"></p></li><li><p>非公平锁：非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能申请的线程比先申请的线程优先获取锁。在高并发环境下，有可能造成优先级翻转，或者饥饿的状态（某个线程一直得不到锁）。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091602788.png" alt="image-20220909143503292"></p></li></ul><p>对于ReentrantLock而言，通过构造函数指定该锁是否是公平锁，默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大</p><p>对于Synchronized而言，是一种非公平锁。由于其不像ReentrantLock是通过AQS的来实现线程调度，所以并没有任何办法使其变成公平锁</p><h3 id="2-2可重入锁-x2F-不可重入锁"><a href="#2-2可重入锁-x2F-不可重入锁" class="headerlink" title="2.2可重入锁/不可重入锁"></a>2.2可重入锁/不可重入锁</h3><ul><li>重入锁：也称递归锁。重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁（前提是同一对象或class），简单来说，就是任意线程在获取到锁之后能够再次获取该锁而不会被锁所阻塞，这样的锁就叫做可重入锁。ReentrantLock和Synchronized都是可重入锁。</li></ul><blockquote><p>可重入锁的原理： 通过组合自定义同步器来实现锁的获取与释放。</p><p>再次获取锁：识别获取锁的线程是否为当前占据锁的线程，如果是，则再次成功获取。获取锁后，进行计数自增，</p><p>释放锁：释放锁时，进行计数自减。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">synchronized void setA() throws InterruptedException {TimeUnit.SECONDS.sleep(1);setB();}synchronized void setB() throws InterruptedException {TimeUnit.SECONDS.sleep(1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码就是可重入锁的一个特点，如果不是可重入锁的话，setB()可能不会被当前线程执行，可能造成死锁。</p><pre class="line-numbers language-none"><code class="language-none">面试题1： 可重入锁如果加了两把，但是只释放了一把会出现什么问题？答：程序卡死，线程不能出来，也就是说我们申请了几把锁，就需要释放几把锁。面试题2： 如果只加了一把锁，释放两次会出现什么问题？答：会报错，java.lang.IllegalMonitorStateException。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>不可重入锁：不可重入锁不可递归调用，递归调用就发生死锁</p><p>  // 使用自旋锁来模拟一个不可重入锁<br>  public class UnreentrantLock {<br>  private AtomicReference<thread> owner = new AtomicReference&lt;&gt;();<br>  public void lock() {<br>      Thread current = Thread.currentThread();<br>      for (;;) {<br>          if (owner.compareAndSet(null, current)) {<br>              return;<br>          }<br>      }<br>  }<br><br>  public void unlock() {<br>      Thread current = Thread.currentThread();<br>      owner.compareAndSet(current, null);<br>  }<br>  }</thread></p></li></ul><p>ReentrantLock中可重入锁实现：</p><p>非公平锁的锁获取方法：</p><pre class="line-numbers language-none"><code class="language-none">final boolean nonfairTryAcquire(int acquires) {        final Thread current = Thread.currentThread();        int c = getState();        if (c == 0) {            if (compareAndSetState(0, acquires)) {                setExclusiveOwnerThread(current);                return true;            }        }        else if (current == getExclusiveOwnerThread()) {            int nextc = c + acquires;            if (nextc &lt; 0)                 throw new Error("Maximum lock count exceeded");            setState(nextc);            return true;        }        return false;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在AQS中维护了一个volatile修饰的state成员变量来计数重入次数，避免了频繁的持有释放操作，这样提升了效率，又避免了死锁</p><p><strong>补充: 什么是AQS?</strong></p><p>AQS（AbstractQueuedSynchronizer）使用一个int成员变量来表示 同步状态，通过内置的FIFO队列来完成获取资源线程的排队工作，状态信息通过protected类型的getState,setState,compareAndSetState来进行操作</p><p>AQS支持独占式和共享式这两种同步方法，独占式如ReentrantLock，共享式如Semaphore,CountDownLatch,组合式如ReentrantReadWriteLock。</p><p>同步器的设计基于模板方法模式，使用方法如下：</p><ul><li><p>继承AbstractQueuedSynchronizer并重写指定方法（重写方法simple，就是对共享资源state的获取和释放）</p></li><li><p>将AQS组合在自定义同步组件的实现中，并调用模板方法，这些模板方法会调用使用者重写的方法。</p></li></ul><h3 id="2-3排它锁-x2F-共享锁"><a href="#2-3排它锁-x2F-共享锁" class="headerlink" title="2.3排它锁/共享锁"></a>2.3排它锁/共享锁</h3><ul><li><p>排它锁：排它锁在同一时刻只允许一个线程进行访问</p></li><li><p>共享锁：共享锁在同一时刻可以允许多个线程访问，典型的就是ReentrantReadWriteLock里的读锁，它的读锁是可以被共享的，但是它的写锁确实每次只能被独占。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091602984.png" alt="image-20220909143806779"></p></li></ul><p>排它锁和共享锁也是通过AQS来实现的</p><h3 id="2-4互斥锁-x2F-读写锁"><a href="#2-4互斥锁-x2F-读写锁" class="headerlink" title="2.4互斥锁/读写锁"></a>2.4互斥锁/读写锁</h3><ul><li><p>独占锁：是指锁一次只能被一个线程所持有。如果一个线程对数据加上排他锁后，那么其他线程不能再对该数据加任何类型的锁。获得独占锁的线程即能读数据又能修改数据。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091602366.png" alt="image-20220909144257494"></p></li><li><p>互斥锁（排它锁）：互斥锁是独占锁的一种常规实现，是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性，互斥锁一次只能一个线程拥有互斥锁，其他线程只有等待。</p><blockquote><ul><li>读-读互斥</li><li>读-写互斥</li><li>写-读互斥</li><li>写-写互斥</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091604629.png" alt="互斥锁"></p></li><li><p>读写锁：既是互斥锁，又是共享锁，read模式是共享，write模式是互斥的</p></li></ul><p>读写锁是共享锁的一种具体实现。读写锁管理一组锁，一个是只读的锁，一个是写锁。</p><p>读锁可以在没有写锁的时候被多个线程同时持有，而写锁是独占的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091604402.png" alt="image-20220909142753739"></p><p>写锁的优先级要高于读锁，一个获得了读锁的线程必须能看到前一个释放的写锁所更新的内容。读写锁相比于互斥锁并发程度更高，每次只有一个写线程，但是同时可以有多个线程并发读。在Java中的具体实现就是ReadWriteLock。</p><pre class="line-numbers language-none"><code class="language-none">public interface ReadWriteLock {    /**     * 获取读锁     */    Lock readLock();     /**     * 获取写锁     */    Lock writeLock();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5乐观锁-x2F-悲观锁"><a href="#2-5乐观锁-x2F-悲观锁" class="headerlink" title="2.5乐观锁/悲观锁"></a>2.5乐观锁/悲观锁</h3><p>乐观锁：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p><blockquote><p>举个生活中的例子，假设厕所只有一个坑位了，乐观锁认为：这荒郊野外的，又没有什么人，不会有人抢我坑位的，每次关门上锁多浪费时间，还是不加锁好了。</p><p>回到代码世界中，乐观锁操作数据时不会上锁，在更新的时候会判断一下在此期间是否有其他线程去更新这个数据。</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091604210.png" alt="image-20220909135353539"></p><p>悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其他线程阻塞，用完后再把资源转让给其他线程）。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁。Java中的synchronized和ReentrantLock等独占锁就是悲观锁思想的实现</p><blockquote><p>举个生活中的例子，假设厕所只有一个坑位了，悲观锁上厕所会第一时间把门反锁上，这样其他人上厕所只能在门外等候，这种状态就是「阻塞」了。</p><p>回到代码世界中，一个共享数据加了悲观锁，那线程每次想操作这个数据前都会假设其他线程也可能会操作这个数据，所以每次操作前都会上锁，这样其他线程想操作这个数据拿不到锁只能阻塞了。</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091604248.png" alt="image-20220909135702121"></p><h3 id="2-6分段锁"><a href="#2-6分段锁" class="headerlink" title="2.6分段锁"></a>2.6分段锁</h3><p>分段锁是一种锁的设计，并不是具体的一种锁。在某些情况下我们将锁分解技术进一步扩展为一组独立对象上的锁进行分解，这称为分段锁。容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，因此，分段锁也是提升多并发程序性能的重要手段之一。这就是JDK1.7中ConcurrentHashMap使用的锁分段技术。</p><blockquote><p><strong>ConcurrentHashMap原理：</strong></p><p>它内部细分了若干个小的 HashMap，称之为段(Segment)。默认情况下一个 ConcurrentHashMap 是基于粒度更小的分段锁，被进一步细分为 16 个段，既就是锁的并发度。如果需要在 ConcurrentHashMap 添加一项key-value，就仅仅针对数组中的一项进行加锁操作，并不是将整个 HashMap 加锁，而是首先根据 hashcode 得到该key-value应该存放在哪个段中，然后对该段加锁，并完成 put 操作。在多线程环境中，如果多个线程同时进行put操作，只要被加入的key-value不存放在同一个段中，则线程间可以做到真正的并行。</p></blockquote><p>线程安全：ConcurrentHashMap 是一个 Segment 数组， Segment 通过继承ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091605185.png" alt="分段锁"></p><p>在并发程序中，串行操作是会降低可伸缩性，并且上下文切换也会降低性能。使用独占锁时保护受限资源的时候，基本上是采用串行方式——每次只能有一个线程能访问它。所以对于可伸缩性来说最大的威胁就是独占锁。</p><p>一般有三种方式降低锁的竞争程序：</p><ul><li><p>减少锁的持有时间</p></li><li><p>降低锁的请求频率</p></li><li><p>使用带有协调机制的独占锁，这些机制允许更高的并发性</p></li></ul><h3 id="2-7锁升级-无锁-x2F-偏向锁-x2F-轻量级锁-x2F-重量级锁"><a href="#2-7锁升级-无锁-x2F-偏向锁-x2F-轻量级锁-x2F-重量级锁" class="headerlink" title="2.7锁升级(无锁/偏向锁/轻量级锁/重量级锁)"></a>2.7锁升级(无锁/偏向锁/轻量级锁/重量级锁)</h3><p>JDK1.6 为了提升性能减少获得锁和释放锁所带来的消耗，引入了4种锁的状态：无锁、偏向锁、轻量级锁和重量级锁，它会随着多线程的竞争情况逐渐升级，但不能降级。</p><p>锁的状态是通过对象监视器在对象头中的字段来表明的。四种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级。这四种状态都不是Java语言中的锁，而是JVM为了提高锁的获取与释放效率而做的优化（使用synchronized时）</p><h4 id="2-7-1无锁"><a href="#2-7-1无锁" class="headerlink" title="2.7.1无锁"></a>2.7.1无锁</h4><p>无锁状态其实就是上面讲的乐观锁，不再赘述。</p><h4 id="2-7-2偏向锁"><a href="#2-7-2偏向锁" class="headerlink" title="2.7.2偏向锁"></a>2.7.2偏向锁</h4><p>偏向锁是指是指它会偏向于第一个访问锁的线程，如果在运行过程中，只有一个线程访问加锁的资源，不存在多线程竞争的情况，那么线程是不需要重复获取锁的，这种情况下，就会给线程加一个偏向锁,以降低获取锁的代价。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091605894.png" alt="image-20220909145703703"></p><p>偏向锁是JDK6时加入的一种锁优化机制：在无竞争的情况下把整个同步都消除掉，连CAS操作都不去做了。偏是指偏心，它的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁一直没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作（例如加锁、解锁及对Mark Word的更新操作等）。</p><p><strong>优点：</strong> 把整个同步都消除掉，连CAS操作都不去做了，优于轻量级锁。</p><p><strong>缺点：</strong> 如果程序中大多数的锁都总是被多个不同的线程访问，那偏向锁就是多余的。</p><h4 id="2-7-3轻量级锁"><a href="#2-7-3轻量级锁" class="headerlink" title="2.7.3轻量级锁"></a>2.7.3轻量级锁</h4><p>轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁(等待上一个线程释放锁)。轻量级锁是JDK6时加入的一种锁优化机制： 轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量。轻量级是相对于使用操作系统互斥量来实现的重量级锁而言的。轻量级锁在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。如果出现两条以上的线程争用同一个锁的情况，那轻量级锁将不会有效，必须膨胀为重量级锁。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091605891.png" alt="image-20220909145609731"></p><p>轻量级锁优缺点:</p><p><strong>优点：</strong> 如果没有竞争，通过CAS操作成功避免了使用互斥量的开销。</p><p><strong>缺点：</strong> 如果存在竞争，除了互斥量本身的开销外，还额外产生了CAS操作的开销，因此在有竞争的情况下，轻量级锁比传统的重量级锁更慢。</p><h4 id="2-7-4重量级锁"><a href="#2-7-4重量级锁" class="headerlink" title="2.7.4重量级锁"></a>2.7.4重量级锁</h4><p>重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁,简单来说就是一个线程持有锁，一个线程在自旋，又来了第三个线程访问时（反正就是竞争继续加大了），轻量级锁就会膨胀为重量级锁，重量级锁会使除了此时拥有锁的线程以外的线程都阻塞，性能降低。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091605647.png" alt="image-20220909144702422"></p><p>升级到重量级锁其实就是互斥锁了，一个线程拿到锁，其余线程都会处于阻塞等待状态。</p><p><strong>重量级锁是一种称谓</strong>：synchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的，监视器锁本身依赖底层的操作系统的Mutex Lock来实现。操作系统实现线程的切换需要从用户态切换到核心态，成本非常高。这种依赖于操作系统 Mutex Lock来实现的锁称为重量级锁。为了优化synchonized，引入了轻量级锁，偏向锁。</p><p>在 Java 中，synchronized 关键字内部实现原理就是锁升级的过程：无锁 –&gt; 偏向锁 –&gt; 轻量级锁 –&gt; 重量级锁。</p><h3 id="2-8自旋锁"><a href="#2-8自旋锁" class="headerlink" title="2.8自旋锁"></a>2.8自旋锁</h3><p>CAS算法是乐观锁的一种实现方式，CAS算法中有涉及到自旋锁</p><h4 id="2-8-1CAS算法"><a href="#2-8-1CAS算法" class="headerlink" title="2.8.1CAS算法"></a>2.8.1CAS算法</h4><p>CAS是英文单词Compare and Swap（比较并交换），是一种无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步。CAS算法涉及到3个操作数</p><ul><li><p>需要读写的内存值V</p></li><li><p>进行比较的值A</p></li><li><p>写入的新值B</p></li></ul><p>更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B，否则不会执行任何操作。一般情况下是一个自旋操作，即不断地重试</p><h4 id="2-8-2自旋锁"><a href="#2-8-2自旋锁" class="headerlink" title="2.8.2自旋锁"></a>2.8.2自旋锁</h4><p>自旋锁：是指当一个线程在获取锁的时候，如果锁已经被其他线程获取，那么该线程将循环等待，然后不断地判断锁是否能够被成功获取，直到获取到锁才会退出循环。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091605798.png" alt="image-20220909135929702"></p><p>它是为实现保护共享资源而提出一种锁机制。其实，自旋锁与互斥锁比较类似，它们都是为了解决对某项资源的互斥使用。无论是互斥锁，还是自旋锁，在任何时刻，最多只能有一个保持者，也就是说，在任何时刻最多只能有一个执行单元获得锁。但是两者在调度机制上略有不同。对于互斥锁，如果资源已经被占用，资源申请者只能进入睡眠状态。但是自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁。</p><p>自旋锁的优点：避免了线程切换的开销。挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作给Java虚拟机的并发性能带来了很大的压力。</p><p>自旋锁的缺点： 占用处理器的时间，如果占用的时间很长，会白白消耗处理器资源，而不会做任何有价值的工作，带来性能的浪费。因此自旋等待的时间必须有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程。</p><p>自旋锁次数默认值：10次，可以使用参数-XX:PreBlockSpin来自行更改。</p><p>自适应自旋： 自适应意味着自旋的时间不再是固定的，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的。有了自适应自旋，随着程序运行时间的增长及性能监控信息的不断完善，虚拟机对程序锁的状态预测就会越来越精准。</p><h4 id="2-8-3Java实现自旋锁"><a href="#2-8-3Java实现自旋锁" class="headerlink" title="2.8.3Java实现自旋锁"></a>2.8.3Java实现自旋锁</h4><pre class="line-numbers language-none"><code class="language-none">public class SpinLock {private AtomicReference&lt;Thread&gt; cas = new AtomicReference&lt;&gt;();    public void lock() {        Thread current = Thread.currentThread();        // 利用CAS        while (!cas.compareAndSet(null, current)) {            // do nothing        }}    public void unlock() {        Thread current = Thread.currentThread();        cas.compareAndSet(current, null);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lock()方法利用的CAS，当第一个线程A获取锁的时候，能够成功获取到，不会进入while循环，如果此时线程A没有释放锁，另一个线程B又来获取锁，此时由于不满足CAS，所以就会进入while循环，不会判断是否满足CAS，直到A线程调用unlock()方法释放了该锁</p><h4 id="2-8-4自旋锁存在的问题"><a href="#2-8-4自旋锁存在的问题" class="headerlink" title="2.8.4自旋锁存在的问题"></a>2.8.4自旋锁存在的问题</h4><ul><li><p>如果某个线程持有锁的时间过长，就会导致其他等待获取锁的线程进入循环等待，消耗CPU。使用不当会造成CPU使用率极高</p></li><li><p>上面Java实现的自旋锁不是公平的，即无法满足等待时间最长的线程优先获取锁。不公平的锁就会存在线程饥饿问题</p></li></ul><h4 id="2-8-5自旋锁的优点"><a href="#2-8-5自旋锁的优点" class="headerlink" title="2.8.5自旋锁的优点"></a>2.8.5自旋锁的优点</h4><ul><li><p>自旋锁不会使线程状态发生切换，一直处于用户态，即线程一直都是active的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快</p></li><li><p>非自旋锁在获取不到锁的时候会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要线程上下文切换（线程被阻塞后便进入内核（Linux）调度状态，这个会导致系统在用户态与内核态之间来回切换，严重影响锁的性能）</p></li></ul><h4 id="2-8-6自旋锁与互斥锁的区别"><a href="#2-8-6自旋锁与互斥锁的区别" class="headerlink" title="2.8.6自旋锁与互斥锁的区别"></a>2.8.6自旋锁与互斥锁的区别</h4><p>自旋锁与互斥锁都是为了实现保护资源共享的机制<br>无论是自旋锁还是互斥锁，在任意时刻，都最多只能有一个保持者<br>获取互斥锁的线程，如果锁已经被占用，则该线程将进入睡眠状态；获取自旋锁的线程则不会睡眠，而是一直循环等待锁释放</p><h4 id="2-8-7自旋锁总结"><a href="#2-8-7自旋锁总结" class="headerlink" title="2.8.7自旋锁总结"></a>2.8.7自旋锁总结</h4><ul><li>自旋锁：线程获取锁的时候，如果锁被其他线程持有，则当前线程将循环等待，直到获取到锁</li><li>自旋锁等待期间，线程的状态不会改变，线程一直是用户态并且是活动的（active）</li><li>自旋锁如果持有锁的时间太长，则会导致其他等待获取锁的线程耗尽CPU</li><li>自旋锁本身无法保证公平性，同时也无法保证可重入性</li><li>基于自旋锁，可以实现具备公平性和可重入性的锁</li></ul><h3 id="2-9锁优化技术-锁粗化、锁消除"><a href="#2-9锁优化技术-锁粗化、锁消除" class="headerlink" title="2.9锁优化技术(锁粗化、锁消除)"></a>2.9锁优化技术(锁粗化、锁消除)</h3><h4 id="2-9-1锁粗化"><a href="#2-9-1锁粗化" class="headerlink" title="2.9.1锁粗化"></a>2.9.1锁粗化</h4><p><strong>锁粗化是一种优化技术</strong>： 如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作都是出现在循环体之中，就算真的没有线程竞争，频繁地进行互斥同步操作将会导致不必要的性能损耗，所以就采取了一种方案：把加锁的范围扩展（粗化）到整个操作序列的外部，这样加锁解锁的频率就会大大降低，从而减少了性能损耗。简单来说就是将多个同步块的数量减少，并将单个同步块的作用范围扩大，本质上就是将多次上锁、解锁的请求合并为一次同步请求。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091605595.jpg" alt="锁粗化"></p><p>举个例子，一个循环体中有一个代码同步块，每次循环都会执行加锁解锁操作。</p><pre class="line-numbers language-none"><code class="language-none">private static final Object LOCK = new Object();for(int i = 0;i &lt; 100; i++) {    synchronized(LOCK){        // do some magic things    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过锁粗化后就变成下面这个样子了：</p><pre class="line-numbers language-none"><code class="language-none"> synchronized(LOCK){     for(int i = 0;i &lt; 100; i++) {        // do some magic things    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-2锁消除"><a href="#2-9-2锁消除" class="headerlink" title="2.9.2锁消除"></a>2.9.2锁消除</h4><p><strong>锁消除是一种优化技术</strong>：就是把锁干掉。指虚拟机编译器在运行时检测到了共享数据没有竞争的锁,从而将这些锁进行消除。</p><blockquote><p>那如何判断共享数据不会被线程竞争？</p><p>利用<code>逃逸分析技术</code>：分析对象的作用域，如果对象在A方法中定义后，被作为参数传递到B方法中，则称为方法逃逸；如果被其他线程访问，则称为线程逃逸。</p><p>在堆上的某个数据不会逃逸出去被其他线程访问到，就可以把它当作栈上数据对待，认为它是线程私有的，同步加锁就不需要了。</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091606403.jpg" alt="锁消除"></p><p>举个例子让大家更好理解。</p><pre class="line-numbers language-none"><code class="language-none">public String test(String s1, String s2){    StringBuffer stringBuffer = new StringBuffer();    stringBuffer.append(s1);    stringBuffer.append(s2);    return stringBuffer.toString();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中有一个 test 方法，主要作用是将字符串 s1 和字符串 s2 串联起来。</p><p>test 方法中三个变量s1, s2, stringBuffer， 它们都是局部变量，局部变量是在栈上的，栈是线程私有的，所以就算有多个线程访问 test 方法也是线程安全的。</p><p>我们都知道 StringBuffer 是线程安全的类，append 方法是同步方法，但是 test 方法本来就是线程安全的，为了提升效率，虚拟机帮我们消除了这些同步锁，这个过程就被称为锁消除。</p><pre class="line-numbers language-none"><code class="language-none">StringBuffer.class// append 是同步方法public synchronized StringBuffer append(String str) {    toStringCache = null;    super.append(str);    return this;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10-同步锁"><a href="#2-10-同步锁" class="headerlink" title="2.10 同步锁"></a>2.10 同步锁</h3><p>同步锁与互斥锁同义，表示并发执行的多个线程，在同一时间内只允许一个线程访问共享数据。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091606496.png" alt="同步锁"></p><h3 id="2-11死锁"><a href="#2-11死锁" class="headerlink" title="2.11死锁"></a>2.11死锁</h3><p><strong>死锁是一种现象：</strong>如线程A持有资源x，线程B持有资源y，线程A等待线程B释放资源y，线程B等待线程A释放资源x，两个线程都不释放自己持有的资源，则两个线程都获取不到对方的资源，就会造成死锁。</p><p>Java中的死锁不能自行打破，所以线程死锁后，线程不能进行响应。所以一定要注意程序的并发场景，避免造成死锁。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091606522.png" alt="死锁"></p><h3 id="2-12synchronized"><a href="#2-12synchronized" class="headerlink" title="2.12synchronized"></a>2.12synchronized</h3><p>synchronized是Java中的关键字：用来修饰方法、对象实例。属于独占锁、悲观锁、可重入锁、非公平锁。</p><ul><li>1.作用于实例方法时，锁住的是对象的实例(this)；</li><li>2.当作用于静态方法时，锁住的是 Class类，相当于类的一个全局锁， 会锁所有调用该方法的线程；</li><li>3.synchronized 作用于一个非 NULL的对象实例时，锁住的是所有以该对象为锁的代码块。它有多个队列，当多个线程一起访问某个对象监视器的时候，对象监视器会将这些线程存储在不同的容器中。</li></ul><p>每个对象都有个 monitor 对象， 加锁就是在竞争 monitor 对象，代码块加锁是在代码块前后分别加上 monitorenter 和 monitorexit 指令来实现的，方法加锁是通过一个标记位来判断的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091607883.jpg" alt="synchronized"></p><h3 id="2-13Lock和synchronized的区别"><a href="#2-13Lock和synchronized的区别" class="headerlink" title="2.13Lock和synchronized的区别"></a>2.13Lock和synchronized的区别</h3><p><strong><code>Lock</code>：</strong> 是Java中的接口，可重入锁、悲观锁、独占锁、互斥锁、同步锁。</p><ul><li>1.Lock需要手动获取锁和释放锁。就好比自动挡和手动挡的区别</li><li>2.Lock 是一个接口，而 synchronized 是 Java 中的关键字， synchronized 是内置的语言实现。</li><li>3.synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁。</li><li>4.Lock 可以让等待锁的线程响应中断，而 synchronized 却不行，使用 synchronized 时，等待的线程会一直等待下去，不能够响应中断。</li><li>5.通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</li><li>6.Lock 可以通过实现读写锁提高多个线程进行读操作的效率。</li></ul><p><strong>synchronized的优势：</strong></p><ul><li>足够清晰简单，只需要基础的同步功能时，用synchronized。</li><li>Lock应该确保在finally块中释放锁。如果使用synchronized，JVM确保即使出现异常，锁也能被自动释放。</li><li>使用Lock时，Java虚拟机很难得知哪些锁对象是由特定线程锁持有的。</li></ul><h3 id="2-14ReentrantLock-和synchronized的区别"><a href="#2-14ReentrantLock-和synchronized的区别" class="headerlink" title="2.14ReentrantLock 和synchronized的区别"></a>2.14ReentrantLock 和synchronized的区别</h3><p><strong>ReentrantLock是Java中的类 ：</strong> 继承了Lock类，可重入锁、悲观锁、独占锁、互斥锁、同步锁。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091607573.png" alt="image-20220909155231820"></p><p><strong>相同点：</strong></p><ul><li>1.主要解决共享变量如何安全访问的问题</li><li>2.都是可重入锁，也叫做递归锁，同一线程可以多次获得同一个锁，</li><li>3.保证了线程安全的两大特性：可见性、原子性。</li></ul><p><strong>不同点：</strong></p><ul><li>1.ReentrantLock 就像手动汽车，需要显示的调用lock和unlock方法， synchronized 隐式获得释放锁。</li><li>2.ReentrantLock 可响应中断， synchronized 是不可以响应中断的，ReentrantLock 为处理锁的不可用性提供了更高的灵活性</li><li>3.ReentrantLock 是 API 级别的， synchronized 是 JVM 级别的</li><li>4.ReentrantLock 可以实现公平锁、非公平锁，默认非公平锁，synchronized 是非公平锁，且不可更改。</li><li>5.ReentrantLock 通过 Condition 可以绑定多个条件</li></ul><h2 id="3-常问总结"><a href="#3-常问总结" class="headerlink" title="3.常问总结"></a>3.常问总结</h2><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209091344339.png" alt="锁图"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊8种架构模式</title>
      <link href="/2022/09/09/liao-liao-8-chong-jia-gou-mo-shi/"/>
      <url>/2022/09/09/liao-liao-8-chong-jia-gou-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="8种架构模式"><a href="#8种架构模式" class="headerlink" title="8种架构模式"></a>8种架构模式</h1><h2 id="1-什么是架构"><a href="#1-什么是架构" class="headerlink" title="1.什么是架构"></a>1.什么是架构</h2><p>我想这个问题，十个人回答得有十一个答案，因为另外的那一个是大家妥协的结果。哈哈，我理解，架构就是骨架，如下图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090946947.jpeg" alt="img"></p><p>人类的身体的支撑是主要由骨架来承担的，然后是其上的肌肉、神经、皮肤。架构对于软件的重要性不亚于骨架对人类身体的重要性。</p><h2 id="2-什么是设计模式"><a href="#2-什么是设计模式" class="headerlink" title="2.什么是设计模式"></a>2.什么是设计模式</h2><p>在我看来，模式就是经验，设计模式就是<strong>设计经验</strong>，有了这些经验，我们就能在特定情况下使用特定的设计、组合设计，这样可以大大节省我们的设计时间，提高工作效率。接下来，我会把工作中用到的一些架构方面的设计模式分享给大家，望大家少走弯路。总体而言，共有八种，分别是：</p><ol><li><strong>单库单应用模式</strong>：最简单的，可能大家都见过</li><li><strong>内容分发模式</strong>：目前用的比较多</li><li><strong>查询分离模式</strong>：对于大并发的查询、业务</li><li><strong>微服务模式</strong>：适用于复杂的业务模式的拆解</li><li><strong>多级缓存模式</strong>：可以把缓存玩的很好</li><li><strong>分库分表模式</strong>：解决单机数据库瓶颈</li><li><strong>弹性伸缩模式</strong>：解决波峰波谷业务流量不均匀的方法之一</li><li><strong>多机房模式</strong>：解决高可用、高性能的一种方法</li></ol><h3 id="2-1单库单应用模式"><a href="#2-1单库单应用模式" class="headerlink" title="2.1单库单应用模式"></a>2.1单库单应用模式</h3><p>这是最简单的一种设计模式，我们的大部分本科毕业设计、一些小的应用，基本上都是这种模式，这种模式的一般设计见下图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090946248.jpeg" alt="img"></p><p>如上图所示，这种模式一般只有一个数据库，一个业务应用层，一个后台管理系统，所有的业务都是用过业务层完成的，所有的数据也都是存储在一个数据库中的，好一点会有数据库的同步。虽然简单，但是<strong>也并不是一无是处</strong>。</p><ul><li><strong>优点</strong>：结构简单、开发速度快、实现简单，可用于产品的第一版等有原型验证需求、用户少的设计。</li><li><strong>缺点</strong>：性能差、基本没有高可用、扩展性差，不适用于大规模部署、应用等生产环境。</li></ul><h3 id="2-2内容分发模式"><a href="#2-2内容分发模式" class="headerlink" title="2.2内容分发模式"></a>2.2<strong>内容分发模式</strong></h3><p>基本上所有的大型的网站都有或多或少的采用这一种设计模式，常见的应用场景是使用CDN技术把网页、图片、CSS、JS等这些静态资源分发到离用户最近的服务器。这种模式的一般设计见下图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090946090.jpeg" alt="img"></p><p>如上图所示，这种模式较单库单应用模式多了一个CDN、一个云存储OSS(七牛、又拍等雷同)。一个典型的应用流程(以用户上传、查看图片需求为例)如下：</p><ol><li>上传的时候，用户选择本地机器上的一个图片进行上传</li><li>程序会把这个图片上传到云存储OSS上，并返回该图片的一个URL</li><li>程序把这个URL字符串存储在业务数据库中，上传完成。</li><li>查看的时候，程序从业务数据库得到该图片的URL</li><li>程序通过DNS查询这个URL的图片服务器</li><li>智能DNS会解析这个URL，得到与用户最近的服务器(或集群)的地址A</li><li>然后把服务器A上的图片返回给程序</li><li>程序显示该图片，查看完成。</li></ol><p>由上可知，这个模式的关键是智能DNS，它能够解析出离用户最近的服务器。运行原理大致是：根据请求者的IP得到请求地点B，然后通过计算或者配置得到与B最近或通讯时间最短的服务器C，然后把C的IP地址返回给请求者。这种模式的优缺点如下：</p><ul><li><strong>优点</strong>：资源下载快、无需过多的开发与配置，同时也减轻了后端服务器对资源的存储压力，减少带宽的使用。</li><li><strong>缺点</strong>：目前来说OSS，CDN的价格还是稍微有些贵(虽然已经降价好几次了)，只适用于中小规模的应用，另外由于网络传输的延迟、CDN的同步策略等，会有一些一致性、更新慢方面的问题。</li></ul><h3 id="2-3查询分离模式"><a href="#2-3查询分离模式" class="headerlink" title="2.3查询分离模式"></a>2.3查询分离模式</h3><p>这种模式主要解决单机数据库压力过大，从而导致业务缓慢甚至超时，查询响应时间变长的问题，也包括需要大量数据库服务器计算资源的查询请求。这个可以说是单库单应用模式的升级版本，也是技术架构迭代演进过程中的必经之路。这种模式的一般设计见下图： </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090946820.jpeg" alt="img"></p><p>如上图所示，这种模式较单库单应用模式与内容分发模式多了几个部分，一个是<strong>业务数据库的主从分离</strong>，一个是<strong>引入了ES</strong>，为什么要这样？都解决了哪些痛点，下面具体结合业务需求场景进行叙述。</p><hr><p><strong>场景一：全文关键词检索</strong></p><p>我想这个需求，绝大多数应用都会有，如果使用传统的数据库技术，大部分可能都会使用like这种SQL语句，高级一点可能是先分词，然后通过分词index相关的记录。SQL语句的性能问题与全表扫描机制导致了非常严重的性能问题，现在基本上很少见到。这里的ES是ElasticSearch的缩写，是一种查询引擎，类似的还有Solr等，都差不多的技术，ES较Solr配置简单、使用方便，所以这里选用了它。另外，ES支持横向扩展，理论上没有性能的瓶颈。同时，还支持各种插件、自定义分词器等，可扩展性较强。在这里，使用ES不仅可以替代数据库完成全文检索功能，还可以实现诸如分页、排序、分组、分面等功能。具体的，请同学们自行学习之。那怎么使用呢？一个一般的流程是这样的：</p><ol><li>服务端把一条业务数据落库</li><li>服务端异步把该条数据发送到ES</li><li>ES把该条记录按照规则、配置<strong>放入自己的索引库</strong></li><li>客户端查询的时候，由服务端把这个<strong>请求发送到ES</strong>，得到数据后，根据需求拼装、组合数据，返回给客户端</li></ol><p>实际中怎么用，还请同学们根据实际情况做组合、取舍。</p><hr><p>场景二：大量的普通查询**</p><p>这个场景是指我们的业务中的大部分辅助性的查询，如：取钱的时候先查询一下余额，根据用户的ID查询用户的记录，取得该用户最新的一条取钱记录等。我们肯定是要天天要用的，而且用的还非常多。同时呢，我们的写入请求也是非常多的，导致<strong>大量的写入、查询操作压向同一数据库</strong>，然后，数据库挂了，系统挂了，领导生气了，被开除了，还不起房贷了，露宿街头了，老婆跟别人跑了，……</p><p>不敢想，所以要求我们必须分散数据库的压力，一个业界较成熟的方案就是数据库的读写分离，<strong>写的时候入主库，读的时候读从库</strong>。这样就把压力分散到不同的数据库了，如果一个读库性能不行，扛不住的话，可以一主多从，横向扩展。可谓是一剂良药啊！那怎么使用呢？一个一般的流程是这样的：</p><ol><li>服务端把一条业务数据落库</li><li>数据库同步或异步或半同步把该条数据<strong>复制</strong>到从库</li><li>服务端读数据的时候直接去<strong>从库读</strong>相应的数据</li></ol><p>比较简单吧，一些聪明的、爱思考的、上进的同学可能发现问题了，也包括上面介绍的场景一，就是延迟问题，如：数据还没有到从库，我就马上读，那么是读不到的，会发生问题的。对于这个问题，各家公司解决的思路不一样，方法不尽相同。一个普遍的解决方案是：<strong>读不到就读主库</strong>，当然这么说也是有前提条件的，但具体的方案这里就不一一展开了，我可能会在接下来的分享中详解各种方案。另外，关于数据库的复制模式，还请同学们自行学习，太多了，这里说不清。该总结一下这种模式的优缺点的了，如下：</p><ul><li><strong>优点</strong>：减少数据库的压力，理论上提供无限高的读性能，间接提高业务(写)的性能，专用的查询、索引、全文(分词)解决方案。</li><li><strong>缺点</strong>：数据延迟，数据一致性的保证。</li></ul><h3 id="2-4微服务模式"><a href="#2-4微服务模式" class="headerlink" title="2.4微服务模式"></a>2.4<strong>微服务模式</strong></h3><p>上面的模式看似不错，解决了性能问题，我可以不用露宿街头了、老婆还是我的，哈哈。但是软件系统天生的复杂性决定了，除了性能，还有其他诸如高可用、健壮性等大量问题等待我们解决，再加上各个部门间的撕逼、扯皮，更让我们码农雪上加霜，所以</p><p>继续吧……</p><p>微服务模式可以说是最近的热点，花花绿绿、大大小小、国内国外的公司都在鼓吹，实践这个模式，可是大部分都没有弄清楚<strong>为什么</strong>要这么做，也并不知道这么做有什么<strong>好处、坏处</strong>，在这里，我说一下我对这个模式的看法，不喜勿喷！随着业务与人员的增加，遇到了如下的问题：</p><ol><li>单机数据库写请求量大量增加，导致数据库压力变大</li><li>数据库一旦挂了，那么整个业务都挂了</li><li>业务代码越来越多，都在一个GIT里，越来越难以维护</li><li>代码腐化严重、臭味越来越浓</li><li>上线越来越频繁，经常是一个小功能的修改，就要整个大项目要重新编译</li><li>部门越来越多，该哪个部门改动大项目中的哪个东西，撕逼的厉害</li><li>其他一些外围系统直接连接数据库，导致一旦数据库结构发生变化，所有的相关系统都要通知，甚至对修改不敏感的系统也要通知</li><li>每个应用服务器需要开通所有的权限、网络、FTP、各种各样的，因为每个服务器部署的应用都是一样的</li><li>作为架构师，我已经失去了对这个系统的把控……</li></ol><p>为了解决上述问题，我司使用了微服务模式，这种模式的一般设计见下图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090946494.jpeg" alt="img"></p><p>如上图所示，我把<strong>业务分块，做了垂直切分，切成一个个独立的系统，每个系统各自衍化，有自己的库、缓存、ES等辅助系统，系统之间的实时交互通过RPC，异步交互通过MQ，通过这种组合，共同完成整个系统功能。</strong> 那么，这么做是否真的解决上述问题了呢？不玩虚的，一个个来说。<br>对于问题一，由于拆分成了多个子系统，系统的压力被分散了，而各个子系统都有自己的数据库实例，所以数据库的压力变小。</p><p>对于问题二，一个子系统A的数据库挂了，只是影响到系统A和使用系统A的那些功能，不会所有的功能不可用，从而解决一个数据库挂了，导致所有功能不可用的问题。</p><p>问题三、四，也因为拆分得到了解决，各个子系统有自己独立的GIT代码库，不会相互影响。通用的模块可通过库、服务、平台的形式解决。</p><p>问题五，子系统A发生改变，需要上线，那么我只需要编译A，然后上线就可以了，不需要其他系统做同样的事情。</p><p>问题六，顺应了<strong>康威定律</strong>，我部门该干什么事、输出什么，也通过服务的形式暴露出来，我部只管把我部的职责、软件功能做好就可以。</p><p>问题七，所有需要我部数据的需求，都通过接口的形式发布出去，客户通过接口获取数据，从而屏蔽了底层数据库结构，甚至数据来源，我部只需保证我部的接口契约没有发生变化即可，新的需求增加新的接口，不会影响老的接口。</p><p>问题八，不同的子系统需要不同的权限，这个问题也优雅的解决了。</p><p>问题九，暂时控制住了复杂性，我只需控制好大的方面，定义好系统边界、接口、大的流程，然后再分而治之、逐个击破、合纵连横。</p><p>目前来说，所有问题得到解决！bingo! 但是，还有许多其他的副作用会随之产生，如RPC、MQ的超高稳定性、超高性能，网络延迟，数据一致性等问题，这里就不展开来讲了，太多了，一本书都讲不完。</p><p>另外，对于这个模式来说，最难把握的是<strong>度</strong>，切记<strong>不要切分过细</strong>，我见过一个功能一个子系统，上百个方法分成上百个子系统的，真的是太过度了。实践中，一个较为可行的方法是：<strong>能不分就不分，除非有非常必要的理由</strong>！。</p><ul><li><strong>优点</strong>：相对高性能，可扩展性强，高可用，适合于中等以上规模公司架构。</li><li><strong>缺点</strong>：复杂、度不好把握。指不仅需要一个能在高层把控大方向、大流程、总体技术的人，还需要能够针对各个子系统有针对性的开发。把握不好度或者滥用的话，这个模式适得其反！</li></ul><h3 id="2-5多级缓存模式"><a href="#2-5多级缓存模式" class="headerlink" title="2.5多级缓存模式"></a>2.5多级缓存模式</h3><p>这个模式可以说是应对超高查询压力的一种普遍采用的策略，基本的思想就是在所有链路的地方，能加缓存就加缓存，如下图所示： </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090947511.jpeg" alt="img"></p><p>如上图所示，一般在三个地方加入缓存，一个是客户端处，一个是API网关处，一个是具体的后端业务处，下面分别介绍。</p><p><strong>客户端处缓存</strong>：这个地方加缓存可以说是效果最好的—无延迟。因为不用经过长长的网络链条去后端业务处获取数据，从而导致加载时间过长，客户流失等损失。虽然有CDN的支持，但是从客户端到CDN还是有网络延迟的，虽然不大。具体的技术依据不同的客户端而定，对于WEB来讲，有浏览器本地缓存、Cookie、Storage、缓存策略等技术；对于APP来讲，有本地数据库、本地文件、本地内存、进程内缓存支持。以上提到的各种技术有兴趣的同学可以继续展开来学习。如果客户端缓存没有命中，那么就会去后端业务拿数据，一般来讲，都会有个API网关，在这里加缓存也是非常有必要的。</p><p><strong>API网关处缓存</strong>：这个地方加缓存的好处是不用把请求发送到后方，直接在这里就处理了，然后返回给请求者。常见的技术，如http请求，API网关用的基本都是nginx，可以使用nginx本身的缓存模块，也可以使用Lua+Redis技术定制化。其他的也都大同小异。</p><p><strong>后端业务处</strong>：这个我想就不用多说了，大家应该差不多都知道，什么Redis,Memcache,Jvm内等等，不熬述了。</p><p>实践中，要结合具体的实际情况，综合利用各级缓存技术，使得各种请求最大程度的在到达后端业务之前就被解决掉，从而减少后端服务压力、减少占用带宽、增强用户体验。至于是否只有这三个地方加缓存，我觉得要活学活用，<strong>心法比剑法重要！</strong>总结一下这个模式的优缺点：</p><ul><li><strong>优点</strong>：抗住大量读请求，减少后端压力。</li><li><strong>缺点</strong>：数据一致性问题较突出，容易发生雪崩，即：如果客户端缓存失效、API网关缓存失效，那么所有的大量请求瞬间压向后端业务系统，后果可想而知。</li></ul><h3 id="2-6分‍‍‍库分表模式"><a href="#2-6分‍‍‍库分表模式" class="headerlink" title="2.6分‍‍‍库分表模式"></a>2.6<strong>分‍‍‍库分表模式</strong></h3><p>这种模式主要解决单表写入、读取、存储压力过大，从而导致业务缓慢甚至超时，交易失败，容量不够的问题。一般有水平切分和垂直切分两种，这里主要介绍水平切分。这个模式也是技术架构迭代演进过程中的必经之路。这种模式的一般设计见下图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090947635.jpeg" alt="img"></p><p>如上图所示红色部分，把一张表分到了几个不同的库中，从而分担压力。是不是很笼统？哈哈，那我们接下来就详细的讲解一下。首先澄清几个概念，如下：</p><ul><li><strong>主机</strong>：硬件，指一台物理机，或者虚拟机，有自己的CPU，内存，硬盘等。</li><li>实例：数据库实例，如一个MySQL服务进程。一个主机可以有多个实例，不同的实例有不同的进程，监听不同的端口。 </li><li>库：指表的集合，如学校库，可能包含教师表、学生表、食堂表等等，这些表在一个库中。一个实例中可以有多个库。库与库之间用库名来区分。 </li><li>表：库中的表，不必多说，不懂的就不用往下看了，不解释。</li></ul><p>那么怎么把单表分散呢？到底怎么个分发呢？分发到哪里呢？以下是几个工作中的实践，分享一下：</p><ul><li><strong>主机</strong>：这是最主要的也是最重要的点，本质上分库分表是因为计算与存储资源不够导致的，而这种资源主要是由物理机，主机提供的，所以在这里分是最基本的，毕竟没有可用的计算资源，怎么分效果都不是太好的。</li><li><strong>实例</strong>：实例控制着连接数，同时受OS限制，CPU、内存、硬盘、网络IO也会受间接影响。会出现热实例的现象，即：有些实例特别忙，有些实例非常的空闲。一个典型的现象是：由于单表反应慢，导致连接池被打满，所有其他的业务都受影响了。这时候，把表分到不同的实例是有一些效果的。</li><li><strong>库</strong>：一般是由于单库中最大单表数量的限制，才采取分库。</li><li><strong>表</strong>：单表压力过大，索引量大，容量大，单表的锁。据以上，把单表水平切分成不同的表。</li></ul><p>大型应用中，都是一台主机上只有一个实例，一个实例中只有一个库，<strong>库==实例==主机，所以才有了分库分表</strong>这个简称。</p><p>既然知道了基本理论，那么具体是怎么做的呢？逻辑是怎么跑的呢？接下来以一个例子来讲解一下。这个需求很简单，用户表(user)，单表数据量1亿，查询、插入、存储都出现了问题，怎么办呢？</p><p>首先，分析问题，这个明显是由于数据量太大了而导致的问题。其次，设计方案，可以分为10个库，这样每个库的数据量就降到了1KW，单表1KW数据量还是有些大，而且不利于以后量的增长，所以每个库再分100个表，这个每个单表数据量就为10W了，对于查询、索引更新、单表文件大小、打开速度，都有一些益处。接下来，给IT部门打电话，要10台物理机，扩展数据库…… 最后，逻辑实现，这里应该是最有学问的地方。首先是写入数据，需要知道写到哪个分库分表中，读也是一样的，所以，需要有个请求<strong>路由层</strong>，负责把请求分发、转换到不同的库表中，一般有路由规则的概念。</p><p>怎么样，简单吧？哈哈，too 那义务。说说这个模式的问题，主要是带来了事务上的问题，因为分库分表，事务完成不了，而<strong>分布式事务</strong>又太笨重，所以这里需要有一定的策略，保证在这种情况下事务能够完成。采取的策略如：最终一致性、复制、特殊设计等。再有就是业务代码的改造，一些关联查询要改造，一些单表orderBy的问题需要特殊处理，也包括groupBy语句，如何解决这些副作用不是一句两句能说清楚的，以后有时间，我单独讲讲这些。</p><p>该总结一下这种模式的优缺点的了，如下：</p><ul><li><strong>优点</strong>：减少数据库单表的压力。</li><li><strong>缺点</strong>：事务保证困难、业务逻辑需要做大量改造。</li></ul><h3 id="2-7弹性伸缩模式"><a href="#2-7弹性伸缩模式" class="headerlink" title="2.7弹性伸缩模式"></a>2.7弹性伸缩模式</h3><p>这种模式主要解决突发流量的到来，导致无法横向扩展或者横向扩展太慢，进而影响业务，全站崩溃的问题。这个模式是一种相对来说比较高级的技术，也是各个大公司目前都在研究、试用的技术。截至今日，有这种思想的架构师就已经是很不错了，能够拿到较高薪资，更别提那些已经实践过的，甚至实现了底层系统的那些，所以，你懂得…… 这种模式的一般设计见下图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090947036.jpeg" alt="img"></p><p>如上图所示，多了一个弹性伸缩服务，用来动态的增加、减少实例。原理上非常简单，但是这个模式到底解决什么问题呢？先说说由来和意义。</p><p>每年的双11、六一八或者一些大促到来之前，我们都会为大流量的到来做以下几个方面的工作: 提前准备10倍甚至更多的机器，即使用不上也要放在那里备着，以防万一。这样浪费了大量的资源。每台机器配置、调试、引流，以便让所有的机器都可用。这样浪费了大量的人力、物力，更容易出错。如果机器准备不充分，那么还要加班加点的重复上面的工作。这样做特别容易出错，引来领导的不满，没时间回家陪老婆，然后你的老婆就……(自己想)</p><p>在双十一之后，我们还要人工做缩容，非常的辛苦。一般一年中会有多次促销，那么我们就会一直这样，实在是烦！</p><p>最严重的，<strong>突然间的大流量爆发，会让我们触不及防</strong>，半夜起来扩容是在正常不过的事情，为此，我们偷懒起来，要更多的机器备着，也就出现了大量的cpu利用率为1%的机器。</p><p>我相信，如果你是老板一定很<strong>震惊</strong>吧！！！哈哈，那么如何改变这种情况呢？请接着看</p><p>为此，首先把所有的计算资源整合成资源池的概念，然后通过一些策略、监控、服务，动态的从资源池中获取资源，用完后在放回到池子中，供其他系统使用。具体实现上比较成熟的两种资源池方案是VM、docker，每个都有着自己强大的生态。监控的点有CPU、内存、硬盘、网络IO、服务质量等，根据这些，在配合一些预留、扩张、收缩策略，就可以简单的实现自动伸缩。怎么样？是不是很神奇？</p><p>该总结一下这种模式的优缺点的了，如下：</p><ul><li><strong>优点</strong>：弹性、随需计算，充分优化企业计算资源。</li><li><strong>缺点</strong>：应用要从架构层做到可横向扩展化改造、依赖的底层配套比较多，对技术水平、实力、应用规模要求较高。</li></ul><h3 id="2-8多机房模式"><a href="#2-8多机房模式" class="headerlink" title="2.8多机房模式"></a>2.8多机房模式</h3><p>这种模式主要解决<strong>不同地区高性能、高可用</strong>的问题。</p><p>随着应用用户不断的增加，用户群体分布在全球各地，如果把服务器部署在一个地方，一个机房，比如北京，那么美国的用户使用应用的时候就会特别慢，因为每一个请求都需要通过海底光缆走上个那么一秒钟(预估)左右，这样对用户体验及其不好。怎么办？使用多机房部署。</p><p>这种模式的一般设计见下图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090947062.jpeg" alt="img"></p><p>如上图所示，一个典型的用户请求流程如下：</p><p>用户请求一个链接A 通过DNS智能解析到离用户最近的机房B 使用B机房服务链接A</p><p>是不是觉得很简单，没啥？其实这里面的问题没有表面这么简单，下面一一道来。首先是<strong>数据同步</strong>问题，在中国产生的数据要同步到美国，美国的也一样，数据同步就会涉及数据版本、一致性、更新丢弃、删除等问题。其次是一地多机房的请求<strong>路由</strong>问题，典型的是如上图，中国的北京机房和杭州机房，如果北京机房挂了，那么要能够通过路由把所有发往北京机房的请求转发到杭州机房。异地也存在这个问题。</p><p>所以，多机房模式，也就是异地多活并不是那么的简单，这里只是起了个头，具体的有哪些坑，会在另一篇文章中介绍。</p><p>该总结一下这种模式的优缺点的了，如下：</p><ul><li><strong>优点</strong>：高可用、高性能、异地多活。</li><li><strong>缺点</strong>：数据同步、数据一致性、请求路由。</li></ul><p>至此，整个关于<strong>八种架构设计模式及其优缺点概述</strong>就介绍完了。最后，我想说的是没有银弹、灵活运用，共勉！</p><p> 原文：juejin.cn/post/6844904007438172167</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 聊聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限系统设计方案（图解）</title>
      <link href="/2022/09/09/quan-xian-xi-tong-she-ji-fang-an-tu-jie/"/>
      <url>/2022/09/09/quan-xian-xi-tong-she-ji-fang-an-tu-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么需要权限管理"><a href="#1-为什么需要权限管理" class="headerlink" title="1.为什么需要权限管理"></a><strong>1.为什么需要权限管理</strong></h2><p>日常工作中权限的问题时时刻刻伴随着我们，程序员新入职一家公司需要找人开通各种权限，比如网络连接的权限、编码下载提交的权限、监控平台登录的权限、运营平台查数据的权限等等。</p><p><strong>在很多时候我们会觉得这么多繁杂的申请给工作带来不便，并且如果突然想要查一些数据，发现没有申请过权限，需要再走审批流程，时间拉得会很长。那为什么还需要这么严格的权限管理呢？</strong></p><p>举个例子，一家支付公司有运营后台，运营后台可以查到所有的商户信息，法人代表信息，交易信息以及费率配置信息，如果我们把这些信息不加筛选都给到公司的每一个小伙伴，那么跑市场的都可以操作商家的费率信息，如果一个不小心把费率改了会造成巨大的损失。</p><p>又比如商户的信息都是非常隐秘的，有些居心不良的小伙伴把这些信息拿出来卖给商家的竞争对手，会给商家造成严重的不良后果。虽然这么做都是个别人人为的过错，但是制度上如果本身这些信息不开放出来就能在很大程度上避免违法乱纪的事情发生了。</p><p>总体来讲<strong>权限管理是公司数据安全的重要保证，针对不同的岗位，不同的级别看到的数据是不一样的，操作数据的限制也是不一样的。</strong>比如涉及到资金的信息只开放给财务的相关岗位，涉及到配置的信息只开放给运营的相关岗位，这样各司其职能避免很多不必要的安全问题。</p><blockquote><p>如何让各个岗位的人在系统上各司其职，就是权限管理要解决的问题。</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-权限模型"><a href="#2-权限模型" class="headerlink" title="2.权限模型"></a><strong>2.权限模型</strong></h2><h3 id="2-1-权限设计"><a href="#2-1-权限设计" class="headerlink" title="2.1 权限设计"></a><strong>2.1 权限设计</strong></h3><p>从业务分类上来讲权限可以分为数据查看权限，数据修改权限等，对应到系统设计中有页面权限、菜单权限、按钮权限等。菜单也分一级菜单、二级菜单甚至三级菜单，以csdn文章编辑页面左侧菜单栏为例是分了两级菜单。菜单对应的页面里又有很多按钮，我们在设计的时候最好把权限设计成树形结构，这样在申请权限的时候就可以一目了然的看到菜单的结构，需要哪些权限就非常的明了了。</p><p>如下图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929596.png" alt="img"></p><p>按照这个架构，按钮的父级是二级菜单，二级菜单的父级是一级菜单，这样用户申请权限的时候非常清晰的看到自己需要哪些权限。</p><h3 id="2-2-为什么需要角色"><a href="#2-2-为什么需要角色" class="headerlink" title="2.2 为什么需要角色"></a><strong>2.2 为什么需要角色</strong></h3><p>权限结构梳理清晰之后，需要思考怎么把权限分配给用户，用户少的情况下，可以直接分配，一个用户可以有多个权限，统一一个权限可以被多个用户拥有，用户-权限的模型结构如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929030.png" alt="img">这种模型能够满足权限的基本分配能力，但是随着用户数量的增长，这种模型的弊端就凸显出来了，每一个用户都需要去分配权限，非常的浪费管理员的时间和精力，并且用户和权限杂乱的对应关系会给后期带来巨大的维护成本。用户-权限对应关系图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929636.png" alt="img">这种对应关系在用户多的情况下基本无法维护了。其实很多用户负责同一个业务模块所需要的权限是一样的，这样的话我们是不是可以借助第三个媒介，把需要相同的权限都分配给这个媒介，然后用户和媒介关联起来，用户就拥有了媒介的权限了。这就是经典的RBAC模型，其中媒介就是我们通常所说的角色。</p><h3 id="2-3-权限模型的演进"><a href="#2-3-权限模型的演进" class="headerlink" title="2.3 权限模型的演进"></a><strong>2.3 权限模型的演进</strong></h3><h4 id="2-3-1-RBAC模型"><a href="#2-3-1-RBAC模型" class="headerlink" title="2.3.1 RBAC模型"></a>2.3.1 RBAC模型</h4><p>有了角色之后可以把权限分配给角色，需要相同权限的用户和角色对应起来就可以了，一个权限可以分配给多个角色，一个角色可以拥有多个权限，同样一个用户可以分配多个角色，一个角色也可以对应多个用户，对应模型如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929408.png" alt="img"></p><p>这就是经典的RBAC模型了（role-based-access-control），在这里面角色起到了桥梁左右，连接了用户和权限的关系，每个角色可以拥有多个权限，每个用户可以分配多个角色，这样用户就拥有了多个角色的多个权限。</p><p>同时因为有角色作为媒介，大大降低了错综复杂的交互关系，比如一家有上万人的公司，角色可能只需要几百个就搞定了，因为很多用户需要的权限是一样的，分配一样的角色就可以了。这种模型的对应关系图如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929540.png" alt="img"></p><p>用户和角色，角色和权限都是多对多的关系，这种模型是最通用的权限管理模型，节省了很大的权限维护成本， 但是实际的业务千变万化，权限管理的模型也需要根据不同的业务模型适当的调整，比如一个公司内部的组织架构是分层级的，层级越高权限越大，因为层级高的人不仅要拥有自己下属拥有的权限，二期还要有一些额外的权限。</p><p>RBAC模型可以给不同层级的人分配不同的角色，层级高的对应角色的权限就多，这样的处理方式可以解决问题，但是有没有更好的解决办法呢，答案肯定是有的，这就引出<strong>角色继承的RBAC模型</strong>。</p><h4 id="2-3-2-角色继承的RBAC模型"><a href="#2-3-2-角色继承的RBAC模型" class="headerlink" title="2.3.2 角色继承的RBAC模型"></a>2.3.2 角色继承的RBAC模型</h4><p>角色继承的RBAC模型又称RBAC1模型。每个公司都有自己的组织架构，比如公司里管理财务的人员有财务总监、财务主管、出纳员等，财务主管需要拥有但不限于出纳员的权限，财务总监需要拥有但不限于财务主管的权限，像这种管理关系向下兼容的模式就需要用到角色继承的RBAC模型。<strong>角色继承的RBAC模型的思路是上层角色继承下层角色的所有权限，并且可以额外拥有其他权限。</strong></p><p>模型如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929720.png" alt="img">从模型图中可以看出下级角色拥有的权限，上级角色都拥有，并且上级角色可以拥有其他的权限。角色的层级关系可以分为两种，一种是下级角色只能拥有一个上级角色，但是上级角色可以拥有多个下级角色，这种结构用图形表示是一个树形结构，如下图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929406.png" alt="img">还有一种关系是下级角色可以拥有多个上级角色，上级角色也可以拥有多个下级角色，这种结构用图形表示是一个有向无环图，如下图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929859.png" alt="img">树形图是我们比较常用的，因为一个用户一般情况下不会同时有多个直属上级，比如财务部只能有一个财务总监，但是可以有多个财务主管和收纳员。</p><h4 id="2-3-3-带约束的RBAC模型"><a href="#2-3-3-带约束的RBAC模型" class="headerlink" title="2.3.3 带约束的RBAC模型"></a>2.3.3 带约束的RBAC模型</h4><p>带约束的RBAC模型又成RBAC2模型。在实际工作中，为了安全的考虑会有很多约束条件，比如财务部里同一个人不能即是会计又是审核员，跟一个人同一时间不能即是运动员又是裁判员是一个道理的，又比如财务部的审核员不能超过2个，不能1个也没有。因为角色和权限是关联的，所以我们做好角色的约束就可以了。</p><blockquote><p>常见的约束条件有：角色互斥、基数约束、先决条件约束等。</p></blockquote><p><strong>角色互斥：</strong> 如果角色A和角色B是互斥关系的话，那么一个用户同一时间不能即拥有角色A，又拥有角色B，只能拥有其中的一个角色。</p><blockquote><p>比如我们给一个用户赋予了会计的角色就不能同时再赋予审核员的角色，如果想拥有审核员的角色就必须先去掉会计的角色。假设提交角色和审核角色是互质的，我们可以用图形表示：</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929159.png" alt="img"><strong>基数约束：</strong> 同一个角色被分配的用户数量可以被限制，比如规定拥有超级管理员角色的用户有且只有1个；用户被分配的角色数量也需要被限制，角色被分配的权限数量也可以被限制。</p><p><strong>先决条件约束：</strong>用户想被赋予上级角色，首先需要拥有下级角色，比如技术负责人的角色和普通技术员工角色是上下级关系，那么用户想要用户技术负责人的角色就要先拥有普通技术员工的角色。</p><h3 id="2-4-用户划分"><a href="#2-4-用户划分" class="headerlink" title="2.4 用户划分"></a><strong>2.4 用户划分</strong></h3><h4 id="2-4-1-用户组"><a href="#2-4-1-用户组" class="headerlink" title="2.4.1 用户组"></a>2.4.1 用户组</h4><p>我们创建角色是为了解决用户数量大的情况下，用户分配权限繁琐以及用户-权限关系维护成本高的问题。抽象出一个角色，把需要一起操作的权限分配给这个角色，把角色赋予用户，用户就拥有了角色上的权限，这样避免了一个个的给用户分配权限，节省了大量的资源。</p><p>同样的如果有一批用户需要相同的角色，我们也需要一个个的给用户分配角色，比如一个公司的客服部门有500多个人，有一天研发部研发了一套查询后台数据的产品，客服的小伙伴都需要使用，但是客服由于之前并没有统一的一个角色给到所有的客服小伙伴，这时候需要新加一个角色，把权限分配给该角色，然后再把角色一个个分配给客服人员，这时候会发现给500个用户一个个添加角色非常的麻烦。但是客服人员又有共同的属性，所以我们可以创建一个用户组，所有的客服人员都属于客服用户组，把角色分配给客服用户组，这个用户组下面的所有用户就拥有了需要的权限。</p><p>RBAC模型添加用户组之后的模型图如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090929954.png" alt="img">很多朋友会问，用户组和角色有什么区别呢？简单的来说，<strong>用户组是一群用户的组合，而角色是用户和权限之间的桥梁。</strong> 用户组把相同属性的用户组合起来，比如同一个项目的开发、产品、测试可以是一个用户组，同一个部门的相同职位的员工可以是一个用户组， 一个用户组可以是一个职级，可以是一个部门，可以是一起做事情的来自不同岗位的人。</p><p>用户可以分组，权限也可以分组，权限特别多的情况下，可以把一个模块的权限组合起来成为一个权限组，权限组也是解决权限和角色对应关系复杂的问题。</p><p>比如我们定义权限的时候一级菜单、二级菜单、按钮都可以是权限，一个一级菜单下面有几十个二级菜单，每个二级菜单下面又有几十个按钮，这时候我们把权限一个个分配给角色也是非常麻烦的，可以采用分组的方法把权限分组，然后把分好的组赋予角色就可以了。</p><p>给权限分组也是个技术活，需要理清楚权限之间的关系，比如支付的运营后台我们需要查各种信息，账务的数据、订单的数据、商户的数据等等，这些查询的数据并不在一个页面，每个页面也有很多按钮，我们可以把这几个页面以及按钮对应的权限组合成一个权限组赋予角色。加入权限组之后的RBAC模型如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090930553.png" alt="img">实际工作中我们很少给权限分组，给用户分组的场景会多一些，有的时候用户组也可以直接和权限关联，这个看实际的业务场景是否需要，权限模型没有统一的，业务越复杂业务模型会约多样化。</p><h4 id="2-4-2-组织"><a href="#2-4-2-组织" class="headerlink" title="2.4.2 组织"></a>2.4.2 组织</h4><p>每个公司都有自己的组织架构，很多时候权限的分配可以根据组织架构来划分。因为同一个组织内的小伙伴使用的大部分权限是一样的。如下所示一个公司的组织架构图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090930627.png" alt="img">按照这个组织架构，每一个组织里的成员使用的基础权限很可能是一样的，比如人力资源都需要看到人才招聘的相关信息，市场推广都需要看到行业分析的相关信息，按照组织来分配角色会有很多优势：</p><p><strong>实现权限分配的自动化：</strong> 和组织关系打通之后，按照组织来分配角色，如果有新入职的用户，被划分在某个组织下面之后，会自动获取该组织下所有的权限，无需人工分配。又比如有用户调岗，只需要把组织关系调整就可以了，权限会跟着组织关系自动调整，也无需人工干预。这么做首先需要把权限和组织关系打通。</p><p><strong>控制数据权限：</strong> 把角色关联到组织，组织里的成员只能看到本组织下的数据，比如市场推广和大客定制，市场推广针对的是零散的客户，大可定制针对的是有一定体量的客户，相互的数据虽然在一个平台，但是只能看自己组织下的数据。</p><p>加入组织之后的RBAC模型如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090930095.png" alt="img">用户可以在多个组织中，因为组织也有层级结构，一个组织里只可以有多个用户，所以用户和组织的关系是多对多的关系，组织和角色的关系是一对一的关系。这个在工作中可以根据实际情况来确定对应关系。</p><h4 id="2-4-3-职位"><a href="#2-4-3-职位" class="headerlink" title="2.4.3 职位"></a>2.4.3 职位</h4><p>一个组织下面会有很多职位，比如财务管理会有财务总监、财务主管、会计、出纳员等职位，每个职位需要的权限是不一样的，可以像组织那样根据职位来分配不同的角色，由于一个人的职位是固定的，所以用户跟职位的对应关系时一对一的关系，职位跟角色的对应关系可以是多对多的关系。加入职位的RBAC模型如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090930459.png" alt="img"></p><h3 id="2-5-理想的RBAC模型"><a href="#2-5-理想的RBAC模型" class="headerlink" title="2.5 理想的RBAC模型"></a><strong>2.5 理想的RBAC模型</strong></h3><p>RBAC模型根据不同业务场景的需要会有很多种演变，实际工作中业务是非常复杂的，权限分配也是非常复杂的，想要做出通用且高效的模型很困难。我们把RBAC模型的演变汇总起来会是一个支撑大数据量以及复杂业务的理想的模型。把RBAC、RBAC1、RBAC2、用户组、组织、职位汇总起来的模型如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090930436.png" alt="img">按照这个模型基本上能够解决所有的权限问题，其中的对应关系可以根据实际的业务情况来确定，一般情况下，组织和职位是一对多的关系，特殊情况下可以有多对多的情况，需要根据实际情况来定。</p><p>理想的RBAC模型并不是说我们一开始建权限模型就可以这么做，而是数据体量、业务复杂度达到一定程度之后可以使用这个模型来解决权限的问题，如果数据量特别少，比如刚成立的公司只有十几个人，那完全可以用用户-权限模型，都没有必要使用RBAC模型。</p><h2 id="3-权限系统表设计"><a href="#3-权限系统表设计" class="headerlink" title="3.权限系统表设计"></a><strong>3.权限系统表设计</strong></h2><h3 id="3-1-标准RBAC模型表设计"><a href="#3-1-标准RBAC模型表设计" class="headerlink" title="3.1 标准RBAC模型表设计"></a><strong>3.1 标准RBAC模型表设计</strong></h3><p>标准RBAC模型的表是比较简单了，要表示<code>用户-角色-权限</code>三者之前的关系，首先要创建用户表、角色表、权限表，用户和角色是多对多的关系，角色和权限是多对多的关系，需要再创建两章关系表，分别是用户-角色关系表和角色-权限关系表。这六张表的ER图如下所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090930899.png" alt="img"></p><h3 id="3-2-理想RBAC模型表设计"><a href="#3-2-理想RBAC模型表设计" class="headerlink" title="3.2 理想RBAC模型表设计"></a><strong>3.2 理想RBAC模型表设计</strong></h3><p>理想的RBAC模型是标准RBAC模型经过多次扩展得到的，表结构也会比较复杂，因为要维护很多关系，如下图所示是理想的RBAC模型的ER图：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090930898.png" alt="img">这里面需要强调的是角色互斥表，互斥的关系可以放在角色上，也可以放在权限上，看实际工作的需求。</p><p>4、结语</p><p>本文从易到难非常详细的介绍了权限模型的设计，在工作中需要根据实际情况来定义模型，千人以内的公司使用RBAC模型是完全够用的，没有必要把权限模型设计的过于复杂。模型的选择要根据具体情况，比如公司体量、业务类型、人员数量等。总之最适合自己公司的模型就是最好的模型，权限模式和设计模式是一样的，都是为了更好的解决问题，不要为了使用模型而使用模型。</p><p>原文：<br>blog.csdn.net/u010482601/article/details/104989532</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖 IBM LinuxOne 服务器</title>
      <link href="/2022/09/08/bai-piao-ibm-linuxone-fu-wu-qi/"/>
      <url>/2022/09/08/bai-piao-ibm-linuxone-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="白嫖-IBM-LinuxOne-教程"><a href="#白嫖-IBM-LinuxOne-教程" class="headerlink" title="白嫖 IBM LinuxOne 教程"></a>白嫖 IBM LinuxOne 教程</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><h3 id="1-1前言"><a href="#1-1前言" class="headerlink" title="1.1前言"></a>1.1前言</h3><p>LinuxONE Community Cloud是IBM联合Marist大学为学生提供的用于测试应用程序和网站的平台，提供长达120天的免费VPS。</p><blockquote><p>温馨提醒：：这个 VPS 是 S390X 架构的，兼容性不如 x86-64或arm架构，能安装的软件不多，这个机子比较适合建站，LNMP、LAMP、宝塔之类的都可以跑，性能和并发也是挺强的，做编译机也是很好的<br>挖矿的话大概率是不行的，__而且条款也不允许__，高技术力的可以试试自己编译 xmrig 测试<br>也<strong>不建议</strong>你用这个东西搭建代理工具，易封号，但是这个机子确实能搭<br>也可以开 Minecraft 服务器，但是延迟会比较高</p></blockquote><h3 id="1-2配置"><a href="#1-2配置" class="headerlink" title="1.2配置"></a>1.2配置</h3><table><thead><tr><th>选项</th><th></th></tr></thead><tbody><tr><td>CPU2</td><td>2核</td></tr><tr><td>内存</td><td>4G</td></tr><tr><td>磁盘</td><td>50G</td></tr><tr><td>带宽</td><td>1Gbps</td></tr><tr><td>地域</td><td>美国 纽约州</td></tr><tr><td>时间</td><td>120天(以邮件为准)</td></tr><tr><td>价格</td><td>$0</td></tr></tbody></table><h2 id="2-基础准备"><a href="#2-基础准备" class="headerlink" title="2.基础准备"></a>2.<strong>基础准备</strong></h2><ul><li>一个邮箱，推荐 GMail，国内可以 QQ、163同样可以</li><li>英文基础，看不懂英文请使用浏览器翻译插件</li><li>Linux 基础</li></ul><h2 id="3-申请实例"><a href="#3-申请实例" class="headerlink" title="3.申请实例"></a>3.申请实例</h2><p>官网链接：<a href="https://linuxone.cloud.marist.edu/#/register?flag=VM">https://linuxone.cloud.marist.edu/#/register?flag=VM</a></p><p>点击跳转官网注册。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209082228776.png" alt="image-20220908222833434"></p><p>需要填写一些基本信息，可以填写自己的信息，也可以使用美国人信息生成器等生成，申请理由填写“Machine Learning”“develop website”这样的就可以了，描述不清楚可能不通过。</p><p>美国人信息生成器网址：<a href="https://www.shenfendaquan.com/">https://www.shenfendaquan.com/</a></p><p>例如我生成的</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209082228307.png" alt="image-20220908214940399"></p><p>好吧，为了演示效果，我又注册了一个qq，开通了qq邮箱。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090651162.png" alt="image-20220909065123697"></p><p>在邮箱中去确认：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090652082.png" alt="image-20220909065238237"></p><p>注册成功之后，使用刚刚注册的账号密码登录，登录成功即可进入如下页面。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090656063.png" alt="image-20220909065618169"></p><p>点击管理实例</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090700447.png" alt="image-20220909065640316"></p><p>点击创建：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090700831.png" alt="image-20220909065914030"></p><p>这里我选择了RHEL8.4,都可以。</p><p>点击create，创建key，会生成一个密钥对，下载一个pem文件。也就是上图中的key。</p><p>选中自己刚生成的key，点击右下角创建。<br>然后实例状态会在spawning持续一段时间。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090700475.png" alt="image-20220909070020433"></p><p>当实例处于active的时候，就可以使用Xshell链接了。</p><h2 id="4-实例配置"><a href="#4-实例配置" class="headerlink" title="4.实例配置"></a>4.实例配置</h2><h3 id="4-1远程连接"><a href="#4-1远程连接" class="headerlink" title="4.1远程连接"></a>4.1远程连接</h3><p>我使用的是Xshell工具,新建一个会话，输入实例ip，选择public key方式,输入用户linux1,点击确定。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090852249.png" alt="image-20220909070607084"></p><blockquote><p>注意：Xshell4 无法连接(亲测),会提示加密方式不支持。本人下载了Xshell7</p></blockquote><p>会有SSH安全警告：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090708478.png" alt="image-20220909070809304"></p><p>点击接受并保存，选择刚刚生成的key。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090851449.png" alt="image-20220909071131261"></p><p>点击确定，即可远程连接到服务器。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090712264.png" alt="image-20220909071216118"></p><p>这样登录进来的只是Linux1用户，他对于很多文件没有权限进行操作。因此要获取root用户进行操作。</p><h3 id="4-2配置root用户"><a href="#4-2配置root用户" class="headerlink" title="4.2配置root用户"></a>4.2配置root用户</h3><p>切换到root账号</p><pre class="line-numbers language-none"><code class="language-none">sudo -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置root密码(可略过)</p><pre class="line-numbers language-none"><code class="language-none">passwd打开ssh配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vi /etc/ssh/sshd_config修改或添加下面配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">PermitRootLogin yesPubkeyAuthentication yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090718135.png" alt="image-20220909071800552"></p><p>最后编辑认证文件authorized_keys</p><pre class="line-numbers language-none"><code class="language-none">vi /root/.ssh/authorized_keys <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090718245.png" alt="image-20220909071853392"></p><p>将两个</p><pre class="line-numbers language-none"><code class="language-none">no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="echo 'Please login as the user \"linux1\" rather than the user \"root\".';echo;sleep 10;exit 142"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>都删除掉。然后wq保存退出，这样就可以新建会话使用root账户进行登录了。</p><h3 id="4-3配置httpd服务"><a href="#4-3配置httpd服务" class="headerlink" title="4.3配置httpd服务"></a>4.3配置httpd服务</h3><p>安装 gcc-c++</p><pre class="line-numbers language-none"><code class="language-none">yum install -y gcc gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装httpd</p><pre class="line-numbers language-none"><code class="language-none">yum install httpd -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>httpd命令</p><pre class="line-numbers language-none"><code class="language-none">systemctl start httpd.service #启动 或者 service httpd start(下面同理)systemctl stop httpd.service #停止systemctl restart httpd.service #重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置开机启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable httpd.service #开机启动systemctl disable httpd.service #开机不启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>检查httpd状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查防火墙状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status firewalld 或者service firewalld status#如果没有关闭，关闭即可systemctl stop firewalld 或者 service firewalld stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时应该就可以访问到了，如果仍然没有，重启一下服务器就好了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090733260.png" alt="image-20220909073316041"></p><h2 id="5-域名配置"><a href="#5-域名配置" class="headerlink" title="5.域名配置"></a>5.域名配置</h2><p>打开cloudflare，找到DNS，将刚刚的主机ip配置给springmvc.tk。这里ip和前面图片不一样了是因为出了点问题，我重新装了系统。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090851663.png" alt="image-20220909085103118"></p><p>最后，来看一下效果把。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090851537.png" alt="image-20220909085136679"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 自定义starter</title>
      <link href="/2022/09/06/spring-boot-zi-ding-yi-starter/"/>
      <url>/2022/09/06/spring-boot-zi-ding-yi-starter/</url>
      
        <content type="html"><![CDATA[<p>在编写 <code>starter</code> 之前我们先了解一下什么是 <code>starter</code>，一个 <code>starter</code> 其实就是对一个功能的集成封装，然后对外提供一个依赖，让业务去使用，像我们熟悉的 <code>Redis</code>，<code>mongo</code>，<code>mybatis</code> 等。另外由于任何人都可以编写自己的 <code>starter</code>，那么为了区分官方的 <code>starter</code> 和个人的 <code>starter</code>，通常在命名上面会有一个规范。所以 <code>SpringBoot</code> 官方提出，第三方在建立自己的 <code>Starter</code> 的时候命名规则统一用<code>xxx-spring-boot-starter</code>，而官方提供的 <code>Starter</code> 统一命名方式为<code>spring-boot-starter-xxx</code>。</p><p>通过我们前面的文章，我们知道自动装配首先要有一个配置类，其次还要有 <code>spring.factories</code> 文件，所以这两步是必不可少的。接下来我们就实操一下。</p><h2 id="1-编写配置类"><a href="#1-编写配置类" class="headerlink" title="1.编写配置类"></a>1.编写配置类</h2><p>编写配置类首先要添加一个自动装配的依赖，然后再编写对应的配置类和业务实现类，在 <code>pom</code> 中添加如下依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;      &lt;version&gt;2.7.1&lt;/version&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1装配类"><a href="#1-1装配类" class="headerlink" title="1.1装配类"></a>1.1装配类</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.hash.starter.config;import com.example.hash.starter.service.MyHashTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@ConditionalOnClass({MyHashTemplate.class})@EnableConfigurationProperties(MyHashProperties.class)public class MyHashAutoConfiguration {  @Autowired  MyHashProperties myHashProperties;  @Bean  @ConditionalOnMissingBean(MyHashTemplate.class)  public MyHashTemplate myJsonService() {    MyHashTemplate myHashTemplate = new MyHashTemplate();    myHashTemplate.setPrefix(myHashProperties.getHashPre());    return myHashTemplate;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2属性类"><a href="#1-2属性类" class="headerlink" title="1.2属性类"></a>1.2属性类</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.hash.starter.config;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = "ziyou.hash")public class MyHashProperties {  private String hashPre;  public String getHashPre() {    return hashPre;  }  public void setHashPre(String hashPre) {    this.hashPre = hashPre;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3业务实现类"><a href="#1-3业务实现类" class="headerlink" title="1.3业务实现类"></a>1.3业务实现类</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.hash.starter.service;import javax.xml.bind.DatatypeConverter;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MyHashTemplate {  private String prefix;  public String myHash(String origin) {    if (null == origin || origin.length() == 0) {      return null;    }    try {      MessageDigest md = MessageDigest.getInstance("MD5");      md.update(origin.getBytes());      byte[] digest = md.digest();      return this.prefix + ":" + DatatypeConverter.printHexBinary(digest).toUpperCase();    } catch (NoSuchAlgorithmException e) {      throw new RuntimeException(e);    }  }  public void setPrefix(String prefix) {    this.prefix = prefix;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单说明一下上面三个类都是干什么的，<code>MyHashTemplate</code> 该类是实际业务需要注入的类，用来对入参进行 <code>MD5</code> 摘要，然后返回一个拼接了前缀的字符串给业务。这个前缀是通过 <code>application.properties</code> 中配置 <code>ziyou.hash.hashPre=JavaGeekTech666</code> 配置后传递过来的。<code>MyHashProperties</code> 是接受属性值的类，<code>MyHashAutoConfiguration</code> 则是自动装配类，这个类会根据条件进行 <code>MyHashTemplate</code> <code>Bean</code> 的初始化，并将前缀进行赋值。</p><h2 id="2-增加配置文件"><a href="#2-增加配置文件" class="headerlink" title="2.增加配置文件"></a>2.增加配置文件</h2><p>最后还需要在 <code>resource</code> 文件中编写一个 <code>META-INF/spring.factories</code> 文件，内容如下</p><pre class="line-numbers language-none"><code class="language-none">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.hash.starter.config.MyHashAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的 <code>Key</code> 是固定写法，后面的 <code>value</code> 就是配置类的全路径引用地址。</p><h2 id="3-在项目中使用"><a href="#3-在项目中使用" class="headerlink" title="3.在项目中使用"></a>3.在项目中使用</h2><p>编写完了 <code>starter</code> 过后，我们再创建一个新的 <code>web</code> 应用，在其中增加我们编写的 <code>starter</code> 来验证是否成功。第一步在 <code>pom</code> 文件中增加依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;   &lt;groupId&gt;com.starter.example&lt;/groupId&gt;   &lt;artifactId&gt;myhash-spring-boot-starter&lt;/artifactId&gt;   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写代码并测试</p><pre class="line-numbers language-none"><code class="language-none">package com.example.demo.controller;import com.example.demo.service.HelloService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController {  @Autowired  private HelloService helloService;  @GetMapping(value = "/hello")  public String hello(@RequestParam("name") String name) {    return helloService.sayHello(name);  }}package com.example.demo.service;import com.example.hash.starter.service.MyHashTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class HelloService {  @Autowired  private MyHashTemplate myHashTemplate;  public String sayHello(String name) {    return myHashTemplate.myHash(name);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>application.properties</code> 文件中增加如下配置</p><pre class="line-numbers language-none"><code class="language-none">ziyou.hash.hashPre=JavaGeekTech<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动项目，我们访问地址 <a href="http://127.0.0.1:8080/hello?name=ziyou">http://127.0.0.1:8080/hello?name=ziyou</a> 可以看到效果如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061107767.jpeg" alt="img"></p><p>至此可以看到，我们自己编写的 <code>starter</code> 已经成功生效了，只不过功能很简单而已，我们完全可以根据自己需要的实际功能来实现一个复杂一点的 <code>starter</code> 来提供开箱即用的效果。</p><p>在一些大公司特别是一些中间件或者中台团队，很多时候都是提供各种工具的 <code>starter</code> 来给业务团队使用的，毕竟很多重复的功能如果每个业务团队都自己开发的话，完全是浪费资源，通过中台团队统一封装 <code>starter</code>，让各个业务团队拿来就用快速搭建业务即可。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 自动装配原理</title>
      <link href="/2022/09/06/spring-boot-zi-dong-zhuang-pei-yuan-li/"/>
      <url>/2022/09/06/spring-boot-zi-dong-zhuang-pei-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>首先，先看SpringBoot的主配置类：</p><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplicationpublic class StartEurekaApplication{    public static void main(String[] args)    {        SpringApplication.run(StartEurekaApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点进@SpringBootApplication来看，发现@SpringBootApplication是一个组合注解。</p><pre class="line-numbers language-none"><code class="language-none">@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = {      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })public @interface SpringBootApplication {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们先来看 @SpringBootConfiguration：</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Configurationpublic @interface SpringBootConfiguration {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这个注解除了元注解以外，就只有一个@Configuration，那也就是说这个注解相当于@Configuration，所以这两个注解作用是一样的，它让我们能够去注册一些额外的Bean，并且导入一些额外的配置。</p><p>那@Configuration还有一个作用就是把该类变成一个配置类，不需要额外的XML进行配置。所以@SpringBootConfiguration就相当于@Configuration。进入@Configuration，发现@Configuration核心是@Component，说明Spring的配置类也是Spring的一个组件。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Componentpublic @interface Configuration {    @AliasFor(        annotation = Component.class    )    String value() default "";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续来看下一个@EnableAutoConfiguration,这个注解是开启自动配置的功能。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@AutoConfigurationPackage@Import({AutoConfigurationImportSelector.class})public @interface EnableAutoConfiguration {    String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";    Class&lt;?&gt;[] exclude() default {};    String[] excludeName() default {};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到它是由 @AutoConfigurationPackage，@Import(EnableAutoConfigurationImportSelector.class)这两个而组成的，我们先说@AutoConfigurationPackage，他是说：让包中的类以及子包中的类能够被自动扫描到spring容器中。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@Import({Registrar.class})public @interface AutoConfigurationPackage {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用@Import来给Spring容器中导入一个组件 ，这里导入的是Registrar.class。来看下这个Registrar：</p><pre class="line-numbers language-none"><code class="language-none">static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports {        Registrar() {        }        public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {            AutoConfigurationPackages.register(registry, (new AutoConfigurationPackages.PackageImport(metadata)).getPackageName());        }        public Set&lt;Object&gt; determineImports(AnnotationMetadata metadata) {            return Collections.singleton(new AutoConfigurationPackages.PackageImport(metadata));        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是通过以上这个方法获取扫描的包路径，可以debug查看具体的值：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055223.png" alt="img">那metadata是什么呢，可以看到是标注在@SpringBootApplication注解上的DemosbApplication，也就是我们的主配置类Application：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055458.png" alt="img">其实就是将主配置类（即@SpringBootApplication标注的类）的所在包及子包里面所有组件扫描加载到Spring容器。因此我们要把DemoApplication放在项目的最高级中（最外层目录)。</p><p>看看注解@Import(AutoConfigurationImportSelector.class)，@Import注解就是给Spring容器中导入一些组件，这里传入了一个组件的选择器:AutoConfigurationImportSelector。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055688.png" alt="img">可以从图中看出AutoConfigurationImportSelector 继承了 DeferredImportSelector 继承了 ImportSelector，ImportSelector有一个方法为：selectImports。将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中。</p><pre class="line-numbers language-none"><code class="language-none">public String[] selectImports(AnnotationMetadata annotationMetadata) {    if (!this.isEnabled(annotationMetadata)) {        return NO_IMPORTS;    } else {        AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry =         this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);        return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055858.png" alt="img">有了自动配置类，免去了我们手动编写配置注入功能组件等的工作。那是如何获取到这些配置类的呢，看看下面这个方法：</p><pre class="line-numbers language-none"><code class="language-none">protected AutoConfigurationImportSelector.AutoConfigurationEntry   getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {    if (!this.isEnabled(annotationMetadata)) {        return EMPTY_ENTRY;    } else {        AnnotationAttributes attributes = this.getAttributes(annotationMetadata);        List&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);        configurations = this.removeDuplicates(configurations);        Set&lt;String&gt; exclusions = this.getExclusions(annotationMetadata, attributes);        this.checkExcludedClasses(configurations, exclusions);        configurations.removeAll(exclusions);        configurations = this.filter(configurations, autoConfigurationMetadata);        this.fireAutoConfigurationImportEvents(configurations, exclusions);        return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到getCandidateConfigurations()这个方法，他的作用就是引入系统已经加载好的一些类，到底是那些类呢：</p><pre class="line-numbers language-none"><code class="language-none">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());    Assert.notEmpty(configurations,     "No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.");    return configurations;}public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) {    String factoryClassName = factoryClass.getName();    return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会从META-INF/spring.factories中获取资源，然后通过Properties加载资源：</p><pre class="line-numbers language-none"><code class="language-none">private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);    if (result != null) {        return result;    } else {        try {            Enumeration&lt;URL&gt; urls = classLoader !=           null ? classLoader.getResources("META-INF/spring.factories") : ClassLoader.getSystemResources("META-INF/spring.factories");            LinkedMultiValueMap result = new LinkedMultiValueMap();            while(urls.hasMoreElements()) {                URL url = (URL)urls.nextElement();                UrlResource resource = new UrlResource(url);                Properties properties = PropertiesLoaderUtils.loadProperties(resource);                Iterator var6 = properties.entrySet().iterator();                while(var6.hasNext()) {                    Map.Entry&lt;?, ?&gt; entry = (Map.Entry)var6.next();                    String factoryClassName = ((String)entry.getKey()).trim();                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());                    int var10 = var9.length;                    for(int var11 = 0; var11 &lt; var10; ++var11) {                        String factoryName = var9[var11];                        result.add(factoryClassName, factoryName.trim());                    }                }            }            cache.put(classLoader, result);            return result;        } catch (IOException var13) {            throw new IllegalArgumentException("Unable to load factories from location [META-INF/spring.factories]", var13);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以知道SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作。以前我们需要自己配置的东西，自动配置类都帮我们完成了。如下图可以发现Spring常见的一些类已经自动导入。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055446.png" alt="img">接下来看@ComponentScan注解，@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })，这个注解就是扫描包，然后放入spring容器。</p><pre class="line-numbers language-none"><code class="language-none">@ComponentScan(excludeFilters = {  @Filter(type = FilterType.CUSTOM,classes = {TypeExcludeFilter.class}),   @Filter(type = FilterType.CUSTOM,classes = {AutoConfigurationExcludeFilter.class})})public @interface SpringBootApplication {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>总结下@SpringbootApplication：就是说，他已经把很多东西准备好，具体是否使用取决于我们的程序或者说配置。</p><p>接下来继续看run方法：</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) {        SpringApplication.run(Application.class, args);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来看下在执行run方法到底有没有用到哪些自动配置的东西，我们点进run：</p><pre class="line-numbers language-none"><code class="language-none">public ConfigurableApplicationContext run(String... args) {    //计时器    StopWatch stopWatch = new StopWatch();    stopWatch.start();    ConfigurableApplicationContext context = null;    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList();    this.configureHeadlessProperty();    //监听器    SpringApplicationRunListeners listeners = this.getRunListeners(args);    listeners.starting();    Collection exceptionReporters;    try {        ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);        ConfigurableEnvironment environment = this.prepareEnvironment(listeners, applicationArguments);        this.configureIgnoreBeanInfo(environment);        Banner printedBanner = this.printBanner(environment);        //准备上下文        context = this.createApplicationContext();        exceptionReporters = this.getSpringFactoriesInstances(SpringBootExceptionReporter.class,                       new Class[]{ConfigurableApplicationContext.class}, context);        //预刷新context        this.prepareContext(context, environment, listeners, applicationArguments, printedBanner);        //刷新context        this.refreshContext(context);        //刷新之后的context        this.afterRefresh(context, applicationArguments);        stopWatch.stop();        if (this.logStartupInfo) {            (new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), stopWatch);        }        listeners.started(context);        this.callRunners(context, applicationArguments);    } catch (Throwable var10) {        this.handleRunFailure(context, var10, exceptionReporters, listeners);        throw new IllegalStateException(var10);    }    try {        listeners.running(context);        return context;    } catch (Throwable var9) {        this.handleRunFailure(context, var9, exceptionReporters, (SpringApplicationRunListeners)null);        throw new IllegalStateException(var9);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们关注的就是 refreshContext(context); 刷新context，我们点进来看。</p><pre class="line-numbers language-none"><code class="language-none">private void refreshContext(ConfigurableApplicationContext context) {   refresh(context);   if (this.registerShutdownHook) {      try {         context.registerShutdownHook();      }      catch (AccessControlException ex) {         // Not allowed in some environments.      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们继续点进refresh(context);</p><pre class="line-numbers language-none"><code class="language-none">protected void refresh(ApplicationContext applicationContext) {   Assert.isInstanceOf(AbstractApplicationContext.class, applicationContext);   ((AbstractApplicationContext) applicationContext).refresh();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>他会调用 ((AbstractApplicationContext) applicationContext).refresh();方法，我们点进来看：</p><pre class="line-numbers language-none"><code class="language-none">public void refresh() throws BeansException, IllegalStateException {   synchronized (this.startupShutdownMonitor) {      // Prepare this context for refreshing.      prepareRefresh();      // Tell the subclass to refresh the internal bean factory.      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();      // Prepare the bean factory for use in this context.      prepareBeanFactory(beanFactory);      try {         // Allows post-processing of the bean factory in context subclasses.         postProcessBeanFactory(beanFactory);         // Invoke factory processors registered as beans in the context.         invokeBeanFactoryPostProcessors(beanFactory);         // Register bean processors that intercept bean creation.         registerBeanPostProcessors(beanFactory);         // Initialize message source for this context.         initMessageSource();         // Initialize event multicaster for this context.         initApplicationEventMulticaster();         // Initialize other special beans in specific context subclasses.         onRefresh();         // Check for listener beans and register them.         registerListeners();         // Instantiate all remaining (non-lazy-init) singletons.         finishBeanFactoryInitialization(beanFactory);         // Last step: publish corresponding event.         finishRefresh();      }catch (BeansException ex) {         if (logger.isWarnEnabled()) {            logger.warn("Exception encountered during context initialization - " +                  "cancelling refresh attempt: " + ex);         }         // Destroy already created singletons to avoid dangling resources.         destroyBeans();         // Reset 'active' flag.         cancelRefresh(ex);         // Propagate exception to caller.         throw ex;      }finally {         // Reset common introspection caches in Spring's core, since we         // might not ever need metadata for singleton beans anymore...         resetCommonCaches();      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可知，就是一个spring的bean的加载过程。继续来看一个方法叫做 onRefresh()：</p><pre class="line-numbers language-none"><code class="language-none">protected void onRefresh() throws BeansException {   // For subclasses: do nothing by default.}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>他在这里并没有直接实现，但是我们找他的具体实现：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055771.png" alt="img">比如Tomcat跟web有关，我们可以看到有个ServletWebServerApplicationContext：</p><pre class="line-numbers language-none"><code class="language-none">@Overrideprotected void onRefresh() {   super.onRefresh();   try {      createWebServer();   }   catch (Throwable ex) {      throw new ApplicationContextException("Unable to start web server", ex);   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有一个createWebServer();方法他是创建web容器的，而Tomcat不就是web容器，那是如何创建的呢，我们继续看：</p><pre class="line-numbers language-none"><code class="language-none">private void createWebServer() {   WebServer webServer = this.webServer;   ServletContext servletContext = getServletContext();   if (webServer == null &amp;&amp; servletContext == null) {      ServletWebServerFactory factory = getWebServerFactory();      this.webServer = factory.getWebServer(getSelfInitializer());   }   else if (servletContext != null) {      try {         getSelfInitializer().onStartup(servletContext);      }      catch (ServletException ex) {         throw new ApplicationContextException("Cannot initialize servlet context",               ex);      }   }   initPropertySources();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>factory.getWebServer(getSelfInitializer());他是通过工厂的方式创建的。</p><pre class="line-numbers language-none"><code class="language-none">public interface ServletWebServerFactory {   WebServer getWebServer(ServletContextInitializer... initializers);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到 它是一个接口，为什么会是接口。因为我们不止是Tomcat一种web容器。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061056038.png" alt="img"></p><p>我们看到还有Jetty，那我们来看TomcatServletWebServerFactory：</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic WebServer getWebServer(ServletContextInitializer... initializers) {   Tomcat tomcat = new Tomcat();   File baseDir = (this.baseDirectory != null) ? this.baseDirectory         : createTempDir("tomcat");   tomcat.setBaseDir(baseDir.getAbsolutePath());   Connector connector = new Connector(this.protocol);   tomcat.getService().addConnector(connector);   customizeConnector(connector);   tomcat.setConnector(connector);   tomcat.getHost().setAutoDeploy(false);   configureEngine(tomcat.getEngine());   for (Connector additionalConnector : this.additionalTomcatConnectors) {      tomcat.getService().addConnector(additionalConnector);   }   prepareContext(tomcat.getHost(), initializers);   return getTomcatWebServer(tomcat);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那这块代码，就是我们要寻找的内置Tomcat，在这个过程当中，我们可以看到创建Tomcat的一个流程。</p><p>如果不明白的话， 我们在用另一种方式来理解下，大家要应该都知道starter举点例子。</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先自定义一个starter。详细定义starter的步骤参考</p><pre class="line-numbers language-none"><code class="language-none">&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.1.4.RELEASE&lt;/version&gt;    &lt;relativePath/&gt;&lt;/parent&gt;&lt;groupId&gt;com.demo&lt;/groupId&gt;&lt;artifactId&gt;gw-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先来看maven配置写入版本号，如果自定义一个starter的话必须依赖spring-boot-autoconfigure这个包,我们先看下项目目录。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061056702.png" alt="img">img</p><pre class="line-numbers language-none"><code class="language-none">public class GwServiceImpl  implements GwService{    @Autowired    GwProperties properties;    @Override    public void Hello()    {        String name=properties.getName();        System.out.println(name+"说:你们好啊");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们做的就是通过配置文件来定制name这个是具体实现。</p><pre class="line-numbers language-none"><code class="language-none">@Component@ConfigurationProperties(prefix = "spring.gwname")public class GwProperties {    String name="Beaumon";    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类可以通过@ConfigurationProperties读取配置文件。</p><pre class="line-numbers language-none"><code class="language-none">@Configuration@ConditionalOnClass(GwService.class)  //扫描类@EnableConfigurationProperties(GwProperties.class) //让配置类生效public class GwAutoConfiguration {    /**    * 功能描述 托管给spring    * @author Beaumon    * @return    */    @Bean    @ConditionalOnMissingBean    public GwService gwService()    {        return new GwServiceImpl();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个为配置类，为什么这么写因为，spring-boot的starter都是这么写的，我们可以参照他仿写starter，以达到自动配置的目的，然后我们在通过spring.factories也来进行配置。</p><pre class="line-numbers language-none"><code class="language-none">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.gw.GwAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后这样一个简单的starter就完成了，然后可以进行maven的打包，在其他项目引入就可以使用。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用教程</title>
      <link href="/2022/09/03/typora-shi-yong-jiao-cheng/"/>
      <url>/2022/09/03/typora-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora使用教程"><a href="#Typora使用教程" class="headerlink" title="Typora使用教程"></a>Typora使用教程</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>一次偶然的机会，让我接触到了 .md 文档，进而开始摸索，并意外结识了 Typora 这个编辑器。</p><blockquote><p>百度解释：Typora 是一款由 Abner Lee 开发的轻量级 Markdown 编辑器，与其他 Markdown 编辑器不同的是，Typora 没有采用源代码和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式.</p></blockquote><p>也确实如此。Typora 是一款轻便简洁的 Markdown 编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写 Markdown 就像是写Word文档一样流畅自如。个人认为是一款很好用的 MarkDown 编辑器，特来分享给大家❤️</p><h3 id="1-1MarkDown"><a href="#1-1MarkDown" class="headerlink" title="1.1MarkDown"></a>1.1MarkDown</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Markdown 是一种轻量级标记语言，创始人为 John Gruber。它允许人们「使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档」。</p></blockquote><h3 id="1-2为什么要用MarkDown"><a href="#1-2为什么要用MarkDown" class="headerlink" title="1.2为什么要用MarkDown"></a>1.2为什么要用MarkDown</h3><p>对于我而言，我选择MarkDown的原因如下：</p><ol><li><p>回归到内容本身，注重文章本身的结构，而不是样式</p></li><li><ul><li>不需要考虑字体大小、颜色等，因为 Markdown 中字体样式都与结构有关，无法手动设置</li></ul></li><li><p>MarkDown的语法简单，记住几个常用的就可以释放鼠标了</p></li><li><ul><li>比如，我想要将 “这是个标题” 设置成二级标题，只需要在标题前添加<code>##</code>+空格即可实现，而不需要用鼠标先选中 “这是个标题”，然后在设置成二级标题</li></ul></li><li><p>当前许多网站都支持用 Markdown 来撰写文档</p></li><li><ul><li>如 博客园、CSDN、简书、语雀 等，有了这么多网站的支持，你可以随时随地上传本地 MarkDown 文件到博客中</li></ul></li></ol><h2 id="2-MarkDown-基本语法"><a href="#2-MarkDown-基本语法" class="headerlink" title="2.MarkDown 基本语法"></a>2.MarkDown 基本语法</h2><h3 id="2-1标题"><a href="#2-1标题" class="headerlink" title="2.1标题"></a>2.1标题</h3><p>语法格式：<code>#+空格+标题</code>，一个<code>#</code>是一级标题，两个<code>##</code>是两级标题，以此类推，支持六级标题</p><h3 id="2-2字体"><a href="#2-2字体" class="headerlink" title="2.2字体"></a>2.2字体</h3><ul><li><p><strong>加粗</strong>语法格式：<code>**加粗**</code></p></li><li><p><em>斜体</em>语法格式：<code>*斜体*</code></p></li><li><p><em><strong>斜体加粗</strong></em>语法格式：``<em><strong>斜体加粗</strong></em>`</p></li><li><p>删除线 语法格式：<code>~~删除线~~</code></p></li><li><p>高亮</p><p>语法格式：<code>==高亮==</code></p></li></ul><h3 id="2-3引用"><a href="#2-3引用" class="headerlink" title="2.3引用"></a>2.3引用</h3><p>语法格式：<code>&gt;+引用文字</code></p><blockquote><p>我是引用文字</p></blockquote><p>引用也可以嵌套：</p><blockquote><blockquote><p>如加两个<code>&gt;&gt;</code></p><blockquote><p>三个<code>&gt;&gt;&gt;</code></p></blockquote></blockquote></blockquote><p>支持无线套娃~~</p><h3 id="2-4分割线"><a href="#2-4分割线" class="headerlink" title="2.4分割线"></a>2.4分割线</h3><p>语法格式：三个或者三个以上的 - 或者 * 都可以，如<code>***</code></p><h3 id="2-5图片"><a href="#2-5图片" class="headerlink" title="2.5图片"></a>2.5图片</h3><p>详细的图片引用以及图床配置请参考<a href="https://beaumon.tk/2022/08/25/hexo-tu-pian-pei-zhi/">hexo图片配置</a> </p><p>这里只介绍一下Typora默认的引入方式。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">![alt](图片地址 ''title'')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>alt 指的是当图片链接失效时显示的提示文字，可加可不加 title是图片的标题，当鼠标移到图片上时显示的内容，可加可不加</p></blockquote><h3 id="2-6超链接"><a href="#2-6超链接" class="headerlink" title="2.6超链接"></a>2.6超链接</h3><p>语法格式：<code>[超链接名](超链接地址)</code></p><h3 id="2-7列表"><a href="#2-7列表" class="headerlink" title="2.7列表"></a>2.7列表</h3><ul><li>无序列表</li></ul><p>语法格式：无序列表用 - + * 任何一种都可以，如<code>+ 我是无序列表</code></p><blockquote><p>加号和内容之间需要放置一个空格</p></blockquote><ul><li>有序列表</li></ul><p>语法格式：<code>数字+点+空格+内容</code>，如<code>1. 我是有序列表</code></p><ul><li>子列表</li></ul><p>在子列表前按下tab键即可构成子列表。</p><h3 id="2-8表格"><a href="#2-8表格" class="headerlink" title="2.8表格"></a>2.8表格</h3><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">|左对齐|居中对齐|右对齐||:----|:----:|---:||左|中|右|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">左</td><td align="center">中</td><td align="right">右</td></tr></tbody></table><blockquote><p>第二行分割表头和内容，并声明内容的对齐格式。一般而言，不这么用，感觉太费劲了，下面再介绍快捷键。</p></blockquote><h3 id="2-9代码"><a href="#2-9代码" class="headerlink" title="2.9代码"></a>2.9代码</h3><ul><li>行内代码</li></ul><p>语法格式：用一个反引号包起来 <code>代码内容</code>，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</p><ul><li>多行代码</li></ul><p>语法格式：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><blockquote><p>``` 语言 代码内容 ```</p><p>语言：C、C++、JAVA 等</p></blockquote><ul><li>流程图</li></ul><p>正因为Typora支持mermaid语言,所以使用只需要插入代码块，把语言调成mermaid即可流程图。</p><p>官方介绍地址：<a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=a-hexagon-node">https://mermaid-js.github.io/mermaid/#/flowchart?id=a-hexagon-node</a></p><blockquote><p>Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901755.png" alt="image-20220903085104557"></p><ul><li>视频</li></ul><p>同理，点击嵌入代码，可以通过video|iframe标签引入视频。</p><pre class="line-numbers language-none"><code class="language-none">栗子：&lt;iframe src="//player.bilibili.com/player.html?aid=762955321&amp;bvid=BV1z64y1h74z&amp;cid=406257730&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>网页片段</li></ul><p>通过嵌入codepen，你甚至可以在typora里玩贪吃蛇！！！</p><pre class="line-numbers language-none"><code class="language-none">&lt;p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="moPsych" data-slug-hash="KKgQxWb" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Snake Game"&gt;  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/moPsych/pen/KKgQxWb"&gt;  Snake Game&lt;/a&gt; by moPsych (&lt;a href="https://codepen.io/moPsych"&gt;@moPsych&lt;/a&gt;)  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;script async src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PDF</li></ul><p>当然，区区PDF也不在话下，如果是本地文件，直接拖入即可。</p><p>如果想导入云端PDF，需要通过 <code>Google Drive Viewer</code> 来显示：</p><pre class="line-numbers language-none"><code class="language-none">&lt;iframe src="https://docs.google.com/gview?embedded=true&amp;url=http://infolab.stanford.edu/pub/papers/google.pdf" style="width:800px; height:500px;" frameborder="0"&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只需把 <code>url=http://infolab.stanford.edu/pub/papers/google.pdf</code> 替换成自己的PDF链接即可，例如 GitHub 上的PDF也可以：</p><pre class="line-numbers language-none"><code class="language-none">&lt;iframe src="https://docs.google.com/gview?embedded=true&amp;url=https://raw.githubusercontent.com/Theigrams/Mathematical-optimization/d304e27f613352b5d8240010cc58ddb4360ac48d/%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A/%E6%9C%80%E4%BC%98%E5%8C%96%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A.pdf" style="width:800px; height:500px;" frameborder="0"&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现了一个新的本地嵌入 PDF 的方法，把下面 <code>src</code> 中的 PDF 路径换成自己的即可。</p><pre class="line-numbers language-none"><code class="language-none">&lt;embed id="pdfPlayer" src="C:\Users\question.pdf" type="application/pdf" width="100%" height="600" &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-高级技巧"><a href="#3-高级技巧" class="headerlink" title="3.高级技巧"></a>3.高级技巧</h2><h3 id="3-1转义字符"><a href="#3-1转义字符" class="headerlink" title="3.1转义字符"></a>3.1转义字符</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>行内公式（inline）用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li>块间公式（display）用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ul><pre class="line-numbers language-none"><code class="language-none">$$块间公式$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>支持HTML</li></ul><h3 id="3-2在Typora中书写MarkDown"><a href="#3-2在Typora中书写MarkDown" class="headerlink" title="3.2在Typora中书写MarkDown"></a>3.2在Typora中书写MarkDown</h3><table><thead><tr><th align="left">Markdown语法</th><th align="center">Typora快捷键</th><th></th></tr></thead><tbody><tr><td align="left">一级标题</td><td align="center"><code>#</code></td><td>ctrl+1</td></tr><tr><td align="left">二级标题</td><td align="center"><code>##</code></td><td>ctrl+2</td></tr><tr><td align="left">三级标题</td><td align="center"><code>###</code></td><td>ctrl+3</td></tr><tr><td align="left">四级标题</td><td align="center"><code>####</code></td><td>ctrl+4</td></tr><tr><td align="left">五级标题</td><td align="center"><code>#####</code></td><td>ctrl+5</td></tr><tr><td align="left">六级标题</td><td align="center"><code>######</code></td><td>ctrl+6</td></tr><tr><td align="left">加粗</td><td align="center"><code>**粗体**</code></td><td>ctrl+B</td></tr><tr><td align="left">斜体</td><td align="center"><code>*斜体*</code></td><td>ctrl+I</td></tr><tr><td align="left">下划线</td><td align="center"><code>&lt;u&gt;下划线&lt;/u&gt;</code></td><td>ctrl+U</td></tr><tr><td align="left">删除线</td><td align="center"><code>~~删除线~~</code></td><td>alt+shift+5</td></tr><tr><td align="left">创建表格</td><td align="center"></td><td>ctrl+T</td></tr><tr><td align="left">创建超链接</td><td align="center"><code>[超链接名](超链接地址)</code></td><td>ctrl+K</td></tr><tr><td align="left">插入图片</td><td align="center"><code>![alt](图片地址)</code></td><td>ctrl+shift+I</td></tr><tr><td align="left">插入公式块</td><td align="center"><code>$$公式$$</code></td><td>ctrl+shift+M</td></tr><tr><td align="left">添加引用</td><td align="center"><code>&gt;内容</code></td><td>ctrl+shift+Q</td></tr><tr><td align="left">无序列表</td><td align="center"><code>+ 内容</code></td><td>ctrl+shift+]</td></tr><tr><td align="left">有序列表</td><td align="center"><code>1. 内容</code></td><td>ctrl+shift+[</td></tr><tr><td align="left">粘贴为纯文本</td><td align="center"></td><td>ctrl+shift+V</td></tr><tr><td align="left">返回Typora顶部</td><td align="center"></td><td>ctrl+Home</td></tr><tr><td align="left">返回Typora底部</td><td align="center"></td><td>ctrl+End</td></tr><tr><td align="left">启用/退出 源代码模式</td><td align="center"></td><td>ctrl+/</td></tr><tr><td align="left">搜索</td><td align="center"></td><td>ctrl+F</td></tr><tr><td align="left">搜索并替换</td><td align="center"></td><td>ctrl+H</td></tr><tr><td align="left">选中光标所在行</td><td align="center"></td><td>ctrl+L</td></tr><tr><td align="left">生成文档目录</td><td align="center"></td><td><code>[toc]</code>+Enter</td></tr><tr><td align="left">快速打开最新文档</td><td align="center"></td><td>ctrl+P</td></tr></tbody></table><blockquote><p>TOC从文档中提取所有标题，其内容将自动更新。</p></blockquote><h4 id="3-2-1图片插入"><a href="#3-2-1图片插入" class="headerlink" title="3.2.1图片插入"></a>3.2.1图片插入</h4><p>插入图片除了使用插入语句外，还可以：</p><ul><li>ctrl+C/V 将网络图片、剪贴板图片复制到文档中</li><li>拖动本地图片到文档中</li></ul><p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它添加<code>alt</code>。</p><h4 id="3-2-2打字机模式和专注模式"><a href="#3-2-2打字机模式和专注模式" class="headerlink" title="3.2.2打字机模式和专注模式"></a>3.2.2打字机模式和专注模式</h4><p>通过 视图→→打字机模式/专注模式 开启或关闭：</p><ul><li>「打字机模式」使得你所编辑的那一行永远处于屏幕正中央。</li><li>「专注模式」使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</li></ul><h4 id="3-2-3空格与换行"><a href="#3-2-3空格与换行" class="headerlink" title="3.2.3空格与换行"></a>3.2.3空格与换行</h4><ul><li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li></ul><blockquote><p>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的，且换行分为软换行和硬换行。</p></blockquote><ul><li><strong>软换行</strong>：在 Typora 中，你可以通过shift+enter完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li><li><strong>硬换行：</strong>你可以通过 空格+ 空格+ shift+enter完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过enter完成一次换段。Typora 会自动帮你完成两次shift+enter的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li><li><strong>Windows 风格（CR+LF）与 Unix 风格（LF）的换行符：</strong>CR表示回车<code>\r</code>，即回到一行的开头，而LF表示换行<code>\n</code>，即另起一行。所以 Windows 风格的换行符本质是「回车+换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix/Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。你可以在「文件 - 偏好设置 - 编辑器 - 默认换行符」中对此进行切换。</li></ul><h4 id="3-2-4支持emoji-表情"><a href="#3-2-4支持emoji-表情" class="headerlink" title="3.2.4支持emoji 表情"></a>3.2.4支持emoji 表情</h4><p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示。</p><h2 id="4-Typora主题"><a href="#4-Typora主题" class="headerlink" title="4.Typora主题"></a>4.Typora主题</h2><ol><li><p>使用 Typora 内置主题：点击状态栏「主题」，选择喜欢的主题样式</p></li><li><p>自定义主题：通过「文件-偏好设置-外观-打开主题文件夹」打开Typora的主题文件夹<code>Typora\themes</code>，将自定义的 CSS 文件导入到 <code>themes</code>文件夹中并重启Typora，在「主题」中选择你导入的主题样式即可</p><p>自定义的主题样式：</p></li></ol><ul><li>mo主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901591.png" alt="img"></p><ul><li>mo-dark主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901404.png" alt="img"></p><ul><li>pie主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901056.png" alt="img"></p><ul><li>pie-dark主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901228.png" alt="img"></p><ul><li>melephant主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901976.png" alt="img"></p><ul><li>melephant-2主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901682.png" alt="img"></p><p>​     大家可以根据自己的喜好找寻更多好看的主题。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MonogoDB入门基础教程</title>
      <link href="/2022/09/02/monogodb-ru-men/"/>
      <url>/2022/09/02/monogodb-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB入门基础教程"><a href="#MongoDB入门基础教程" class="headerlink" title="MongoDB入门基础教程"></a>MongoDB入门基础教程</h1><p>本文主要围绕 MongoDB 的使用，从环境配置、数据库使用，再到客户端工具选用，做了简单的介绍，可能有的地方总结的不到位，还望指正。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>在介绍 MongoDB 之前，我先介绍一下业务开发的时候遇到的痛点，以便大家对它有一个更加清晰的认识！</p><p>最近在用数据库存储数据的时候发现这么一个坑，例如从消息队列中监听消息的时候，原来的做法是将监听的消息json数据存储在数据库，以便好对异常消息数据进行追溯，消息内容使用<code>text</code>类型存储，起初因为数据内容很短，没啥毛病，但是当随着业务的扩展，收到的消息内容越来越长，最后发现数据库中的<code>text</code>字段类型无法很好的支持查询，于是在这个时候，就开始考虑采用更加合适的数据库来存储这种消息数据！在经过一番讨论之后，对于这种 json 类型的消息数据的存储，大家一致认为采用 MongoDB 是最佳的选择！</p><p>据官方介绍，MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富、最像关系数据库的一款高性能的 NoSQL 数据库。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(<code>key=&gt;value</code>)对组成。其中的文档类似于 JSON 对象。字段值可以包含其他文档、数组及文档数组，数据结构的支持非常灵活！的确，在使用的过程当中，正如所介绍的，数据的存储和查询，性能极快，而且很好的满足我们的需求！</p><p>话不多说，下面我们就一起来了解一下，这款数据库应该如何使用！</p><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h2><p>在学习它之前，我们需要先搭建好环境，MongoDB 的安装也非常简单！</p><h3 id="2-1、Windows-平台"><a href="#2-1、Windows-平台" class="headerlink" title="2.1、Windows 平台"></a>2.1、Windows 平台</h3><p>如果你是 Windows 平台，MongoDB 提供了可用于 32 位和 64 位系统的预编译二进制，安装基本是傻瓜式的操作，登录 MongoDB 官网并且下载安装包，然后一步一步的操作即可！</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021039727.jpeg" alt="img"></p><h3 id="2-2、Linux-平台"><a href="#2-2、Linux-平台" class="headerlink" title="2.2、Linux 平台"></a>2.2、Linux 平台</h3><p>生产环境基本都是 Linux 平台，为了和生产保持一致，小编采用的服务器是<code>CentOS7</code>，安装过程也比较简单！</p><ul><li>创建资源文件</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/yum.repos.d/mongodb-org-4.0.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编辑内容如下</li></ul><pre class="line-numbers language-none"><code class="language-none">[mongodb-org-4.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行以下命令安装 mongodb</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y mongodb-org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成之后，配置<code>mongod.conf</code>允许远程连接</li></ul><pre class="line-numbers language-none"><code class="language-none">#编辑mongod.confvim /etc/mongod.conf#将net:bindIp: 127.0.0.1 改为 0.0.0.0net:   bindIp:0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后启动服务</li></ul><pre class="line-numbers language-none"><code class="language-none">#开启服务systemctl start mongod#关闭服务systemctl stop mongod#重启服务systemctl restart mongod#开机自启systemctl enable mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，环境配置已经完成！</p><h2 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3.数据库操作"></a>3.数据库操作</h2><p>MongoDB 的数据操作，是开发人员接触最频繁的部分，第一次使用的时候，你会发现它和我们传统使用的 sql 脚本命令完全不同，但是又类似，下面我们就一起来深入的了解下！</p><h3 id="3-1进入-MongoDB"><a href="#3-1进入-MongoDB" class="headerlink" title="3.1进入 MongoDB"></a>3.1进入 MongoDB</h3><p>进入 MongoDB 服务很简单，输入如下命令即可进入！</p><pre class="line-numbers language-none"><code class="language-none">mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，在<code>CentOS</code>里面输入命令之后，进入的服务界面如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021039639.jpeg" alt="img"></p><h3 id="3-2创建数据库"><a href="#3-2创建数据库" class="headerlink" title="3.2创建数据库"></a>3.2创建数据库</h3><p>MongoDB 创建数据库的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">use DATABASE_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果数据库不存在，则创建数据库，否则切换到指定数据库</strong>。</p><p>输入如下命令，可以查询数据库列表</p><pre class="line-numbers language-none"><code class="language-none">#查询数据库列表show dbs#命令输出结果：adminconfiglocal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，当前 MongoDB 有三个数据库！</p><p>输入如下命令，可以切换到<code>admin</code>数据库</p><pre class="line-numbers language-none"><code class="language-none">use admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入<code>db</code>命令，还可以查询当前数据库</p><pre class="line-numbers language-none"><code class="language-none">db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3创建用户"><a href="#3-3创建用户" class="headerlink" title="3.3创建用户"></a>3.3创建用户</h3><p>默认的情况下，是没有用户的，也无法操作数据库，因此我们需要创建一个用户，同时给他分配权限！</p><h4 id="3-3-1、创建一个管理员用户"><a href="#3-3-1、创建一个管理员用户" class="headerlink" title="3.3.1、创建一个管理员用户"></a>3.3.1、创建一个管理员用户</h4><p>创建一个用户、密码都是<code>admin</code>的用户，同时给这个用户分配<code>userAdminAnyDatabase</code>角色，指定的数据库为<code>admin</code>！</p><pre class="line-numbers language-none"><code class="language-none">#创建一个admin用户db.createUser({  user: "admin",  pwd: "admin",  roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中字段含义如下：</p><ul><li>user：用户的名字；</li><li>pwd：用户的密码；</li><li>roles：指定用户的角色，可以用一个空数组给新用户设定空角色。</li><li>roles 中的 role：指定角色。</li><li>roles 中的 db：指定的数据库，例如上面中的角色<code>userAdminAnyDatabase</code>，只在 admin 数据库中可用。</li></ul><p>角色在 MongoDB 中，<strong>代表着某个用户是否有权限访问数据库或者操作数据库</strong>，理解这点非常重要！</p><p>MongoDB 角色定义如下：</p><table><thead><tr><th align="center">角色类型</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">admin数据库角色</td><td align="center">readAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的读权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">readWriteAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的读写权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">userAdminAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">dbAdminAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">clusterAdmin</td><td align="center">只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">root</td><td align="center">只在admin数据库中可用，超级账号，超级权限</td></tr><tr><td align="center">数据库管理角色</td><td align="center">dbAdmin</td><td align="center">允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td></tr><tr><td align="center">数据库管理角色</td><td align="center">userAdmin</td><td align="center">允许用户向system.users集合写入，可以在指定数据库里创建、删除和管理用户</td></tr><tr><td align="center">数据库用户角色</td><td align="center">read</td><td align="center">允许用户读取指定数据库</td></tr><tr><td align="center">数据库用户角色</td><td align="center">readWrite</td><td align="center">允许用户读写指定数据库</td></tr></tbody></table><h4 id="3-3-2创建一个不受访问限制的超级用户"><a href="#3-3-2创建一个不受访问限制的超级用户" class="headerlink" title="3.3.2创建一个不受访问限制的超级用户"></a>3.3.2创建一个不受访问限制的超级用户</h4><p>如果你想创建一个不受访问限制的超级用户，赋予<code>root</code>角色即可！</p><pre class="line-numbers language-none"><code class="language-none">#创建超级用户db.createUser(    {        user:"root",        pwd:"root",        roles:["root"]    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3创建一个业务数据库普通用户"><a href="#3-3-3创建一个业务数据库普通用户" class="headerlink" title="3.3.3创建一个业务数据库普通用户"></a>3.3.3创建一个业务数据库普通用户</h4><p>如果你想创建一个业务数据库普通用户，例如只能访问<code>test_db</code>数据库，并且只负责数据的増查改删。</p><pre class="line-numbers language-none"><code class="language-none"># 创建或者切换数据库到test_dbuse test_db# 创建一个test用户，并且只能访问test_db，对表只有读写权限db.createUser({  user: "test",  pwd: "test",  roles: [ { role: "readWrite", db: "test_db" } ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4验证用户是否可以正常登录"><a href="#3-3-4验证用户是否可以正常登录" class="headerlink" title="3.3.4验证用户是否可以正常登录"></a>3.3.4验证用户是否可以正常登录</h4><p>对于刚刚创建的用户，我们怎么验证它是否能正常登录呢？命令也很简单！</p><pre class="line-numbers language-none"><code class="language-none">db.auth("test","test")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果返回是<code>1</code>表示鉴权正常！</p><h4 id="3-3-5查询当前数据库用户信息"><a href="#3-3-5查询当前数据库用户信息" class="headerlink" title="3.3.5查询当前数据库用户信息"></a>3.3.5查询当前数据库用户信息</h4><p>查询创建的用户，命令也很简单！</p><pre class="line-numbers language-none"><code class="language-none"># 查看创建的用户show users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-3-6修改用户密码"><a href="#3-3-6修改用户密码" class="headerlink" title="3.3.6修改用户密码"></a>3.3.6修改用户密码</h4><p>有些时候，我们会忘记密码，可通过如下方式进行修改！</p><pre class="line-numbers language-none"><code class="language-none">#修改用户密码db.changeUserPassword("username", "xxxxx")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-3-7删除用户"><a href="#3-3-7删除用户" class="headerlink" title="3.3.7删除用户"></a>3.3.7删除用户</h4><p>如果某个用户需要停用，可通过如下方式进行删除</p><pre class="line-numbers language-none"><code class="language-none">#切换指定数据库use test_db#删除用户db.dropUser('test')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-8删除数据库"><a href="#3-3-8删除数据库" class="headerlink" title="3.3.8删除数据库"></a>3.3.8删除数据库</h4><p>如果某个数据库需要停用，可通过如下方式进行删除（只有超级管理员有权限删除）</p><pre class="line-numbers language-none"><code class="language-none">#切换指定数据库use test_db#删除数据库db.dropDatabase()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4创建集合"><a href="#3-4创建集合" class="headerlink" title="3.4创建集合"></a>3.4创建集合</h3><p>MongoDB 并无<strong>表</strong>这个概念，而对应的定义叫：<strong>集合</strong>，我们在关系型数据库中看到的<strong>表数据</strong>，在 MongoDB 中被定义为：<strong>文档</strong>，MongoDB 也被很多人成为<strong>文档数据库</strong>！</p><p>在关系型数据库中，表数据是一行一行的存储，但是在 MongoDB 中，可能不是这样，如果你存储的 json 非常复杂，嵌套很深，那么在 MongoDB 中存储的行数，可能非常深，存储的时候类似我们在页面看到的父子表结构！</p><h4 id="3-4-1创建一个集合"><a href="#3-4-1创建一个集合" class="headerlink" title="3.4.1创建一个集合"></a>3.4.1创建一个集合</h4><p>MongoDB 中使用 createCollection() 方法来创建集合。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">db.createCollection(name, options)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li>name: 要创建的集合名称</li><li>options: 可选参数, 指定有关内存大小及索引的选项</li></ul><p>例如，在 test_db 数据库中创建 tb_user 集合：</p><pre class="line-numbers language-none"><code class="language-none"># 切换到test_db数据库use test_db# 创建 tb_user 集合db.createCollection("tb_user")#输出结果{ "ok" : 1 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要查看已有的集合，可以使用<code>show collections</code>命令！</p><pre class="line-numbers language-none"><code class="language-none">show collections<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是带有几个关键参数的<code>createCollection()</code>的用法，下面命令表示：创建固定集合<code>tb_user</code>，整个集合空间大小<code>6142800</code>KB, 文档最大个数为<code>10000</code> 个</p><pre class="line-numbers language-none"><code class="language-none">db.createCollection("tb_user", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 MongoDB 中，很多时候不需要手动创建集合。当你插入一个文档时，MongoDB 会自动创建集合！</p><pre class="line-numbers language-none"><code class="language-none"># 向集合tb_user 插入一条文档数据db.tb_user.insert({"name" : "张三"})#查询集合show collections# 输出结果tb_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-2删除一个集合"><a href="#3-4-2删除一个集合" class="headerlink" title="3.4.2删除一个集合"></a>3.4.2删除一个集合</h4><p>MongoDB 中使用 drop() 方法来删除集合。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.drop()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，删除在 test_db 数据库中 tb_user 集合：</p><pre class="line-numbers language-none"><code class="language-none"># 切换到test_db数据库use test_db# 创建 tb_user 集合db.tb_user.drop()#输出结果true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5、创建文档"><a href="#3-5、创建文档" class="headerlink" title="3.5、创建文档"></a>3.5、创建文档</h3><p>创建文档，类似我们在关系型数据库中，将数据插入到数据库，操作也很简单！</p><h4 id="3-5-1插入文档"><a href="#3-5-1插入文档" class="headerlink" title="3.5.1插入文档"></a>3.5.1插入文档</h4><p>MongoDB 使用 <code>insert()</code> 或 <code>save()</code> 方法向集合中插入文档。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">db.COLLECTION_NAME.insert(document)或db.COLLECTION_NAME.save(document)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>save()</code>：如果<code>_id</code>主键存在则更新数据，如果不存在就插入数据。</li><li><code>insert()</code>：若插入的数据主键已经存在，则会抛异常，提示主键重复，不保存当前数据。</li></ul><p>例如，在<code>test_db</code>数据库的<code>tb_user</code>集合中，插入一条数据</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.insert({    name:"张三",    age:18,    gender:"男",    tags: ['宅男', '技术控', '脱发严重']})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档。</p><p>查看已插入文档，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">#查询tb_user集合中的数据db.tb_user.find()# 输出结果{ "_id" : ObjectId("6022310f6b5e964b0a5916e6"), "name" : "张三", "age" : 18, "gender" : "男", "tags" : [ "宅男", "技术控", "脱发严重" ] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，你还可以通过<code>save()</code>命令进行插入，如果不指定<code>_id</code>字段 <code>save()</code> 方法类似于 <code>insert()</code> 方法。如果指定 <code>_id</code> 字段，则会更新该 <code>_id</code> 的数据。</p><p>例如，将<code>张三</code>年龄更新到<code>30</code>岁！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.save({    _id: ObjectId("6022310f6b5e964b0a5916e6"),    name:"张三",    age:30,    gender:"男",    tags: ['宅男', '技术控', '脱发严重']})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看文档</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.find()# 输出结果{ "_id" : ObjectId("6022310f6b5e964b0a5916e6"), "name" : "张三", "age" : 30, "gender" : "男", "tags" : [ "宅男", "技术控", "脱发严重" ] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-5-2更新文档"><a href="#3-5-2更新文档" class="headerlink" title="3.5.2更新文档"></a>3.5.2更新文档</h4><p>MongoDB 提供了 <code>update()</code> 和 <code>save()</code> 方法来更新集合中的文档。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.update(   &lt;query&gt;,   &lt;update&gt;,   {     upsert: &lt;boolean&gt;,     multi: &lt;boolean&gt;,     writeConcern: &lt;document&gt;   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>query : update的查询条件，类似sql update查询内where后面的。</li><li>update : update的对象和一些更新的操作符（如inc…）等，也可以理解为sql update查询内set后面的</li><li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入</li><li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li><li>writeConcern :可选，抛出异常的级别。</li></ul><p>例如，将<code>张三</code>年龄更新到<code>22</code>岁！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.update({'name':'张三'},{$set:{'age':22}})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询已更新的数据</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.find()# 输出结果{ "_id" : ObjectId("602235216b5e964b0a5916e8"), "name" : "张三", "age" : 22, "gender" : "男", "tags" : [ "宅男", "技术控", "脱发严重" ] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置<code>multi</code>参数为<code>true</code>。</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.update({'name':'张三'},{$set:{'age':22}},{multi:true})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-5-3删除文档"><a href="#3-5-3删除文档" class="headerlink" title="3.5.3删除文档"></a>3.5.3删除文档</h4><p>MongoDB 中的<code>remove()</code>函数是用来移除集合中的数据</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.remove(   &lt;query&gt;,   {     justOne: &lt;boolean&gt;,     writeConcern: &lt;document&gt;   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>query :（可选）删除的文档的条件。</li><li>justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li><li>writeConcern :（可选）抛出异常的级别。</li></ul><p>例如，删除姓名为<code>张三</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.remove({'name':'张三'})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询数据是否被删除</p><pre class="line-numbers language-none"><code class="language-none">db.col.find()#结果为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-5-4查询文档"><a href="#3-5-4查询文档" class="headerlink" title="3.5.4查询文档"></a>3.5.4查询文档</h4><p>MongoDB 查询文档使用 find() 方法。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.find(query, projection)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>query ：可选，使用查询操作符指定查询条件</li><li>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ul><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.col.find().pretty()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先我们插入几条数据，插入结果如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021039417.jpeg" alt="img"></p><p>例如，查询一个性别为<code>男</code>的用户信息</p><pre class="line-numbers language-none"><code class="language-none">#单个条件查询，类似 sql语句中的 gender = '男'db.tb_user.find({"gender":"男"})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个性别为<code>男</code>，姓名为<code>张三</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">#多条件查询，类似 sql语句中的 gender = '男' and name = '李四'db.tb_user.find({"gender":"男","name":"李四"})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个性别为<code>男</code> 或者 姓名为<code>张三</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">#多条件查询，类似 sql语句中的 gender = '男' or name = '李四'db.tb_user.find({$or:[{"gender":"男"},{"name": "李四"}]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个性别为<code>男</code> 或者 姓名为<code>张三</code>，同时年龄大于<code>30</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">#多条件查询，类似 sql语句中的 age &gt; 30 and ( gender = '男' or name = '李四')db.tb_user.find({"age": {$gt:30}, $or:[{"gender":"男"},{"name": "李四"}]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-4-5分页查询文档"><a href="#3-4-5分页查询文档" class="headerlink" title="3.4.5分页查询文档"></a>3.4.5分页查询文档</h4><p>如果需要分页查询集合数据，可以使用<code>limit()</code>和<code>skip()</code>函数，其中<code>limit()</code>表示读几条数据，<code>skip()</code>表示从第几条数据开始。</p><pre class="line-numbers language-none"><code class="language-none">#从集合中的第三行数据开始，读2条数据返回db.tb_user.find({}).limit(2).skip(3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-5-6文档排序"><a href="#3-5-6文档排序" class="headerlink" title="3.5.6文档排序"></a>3.5.6文档排序</h4><p>和关系型数据库一样，MongoDB 可以使用<code>sort()</code>方法进行排序，通过参数指定排序的字段，并使用 <code>1</code> 和 <code>-1</code> 来指定排序的方式，其中 <code>1</code> 为升序排列，而 <code>-1</code> 是用于降序排列。</p><p>例如，查询<code>tb_user</code>文档，按照<code>age</code>进行升序排序！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.find({}).sort({"age":1})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-6创建索引"><a href="#3-6创建索引" class="headerlink" title="3.6创建索引"></a>3.6创建索引</h3><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB 在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p><p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p><h4 id="3-6-1创建索引"><a href="#3-6-1创建索引" class="headerlink" title="3.6.1创建索引"></a>3.6.1创建索引</h4><p>MongoDB 使用 <code>createIndex()</code> 方法来创建索引，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.createIndex(keys, options)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法中 Key 值为你要创建的索引字段，<code>1</code> 为指定按升序创建索引，如果你想按降序来创建索引指定为 <code>-1</code> 即可！</p><p>例如，给<code>tb_user</code>文档中的<code>age</code>创建一个索引！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.createIndex({"age":1})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建索引是一个比较耗时的动作，我们还可以通过参数配置，在后台创建索引。</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.createIndex({"age":1}, {background: true})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过在创建索引时加<code>background:true</code>的选项，让创建工作在后台执行！</p><h4 id="3-6-2查看索引"><a href="#3-6-2查看索引" class="headerlink" title="3.6.2查看索引"></a>3.6.2查看索引</h4><p>MongoDB 提供了<code>getIndexes()</code>方法，可以进行查看索引。</p><p>例如，查询<code>tb_user</code>集合中的索引</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.getIndexes()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-6-3删除索引"><a href="#3-6-3删除索引" class="headerlink" title="3.6.3删除索引"></a>3.6.3删除索引</h4><p>不在需要的索引，我们可以将其删除。删除索引时，可以删除集合中的某一索引，可以删除全部索引。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">db.COLLECTION_NAME.dropIndex("INDEX-NAME")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，删除集合<code>tb_user</code>集合中的<code>age</code>索引：</p><pre class="line-numbers language-none"><code class="language-none">#查询索引db.tb_user.getIndexes()#输出结果[    {        "v" : 2,        "key" : {            "_id" : 1        },        "name" : "_id_",        "ns" : "test_db.tb_user"    },    {        "v" : 2,        "key" : {            "age" : 1        },        "name" : "age_1",        "ns" : "test_db.tb_user"    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除对应的<code>age_1</code>索引！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.dropIndex("age_1")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-客户端"><a href="#4-客户端" class="headerlink" title="4.客户端"></a>4.客户端</h2><p>对于任何一款数据库，如果没有可视化界面操作，在开发的时候，可以说极其不方便，下面推荐一款小编经常使用的一款客户端。</p><ul><li>Robo 3T(免费、轻量级) ，可以访问官网获取</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021040062.jpeg" alt="img"></p><ul><li>Studio 3T(全面，收费)，访问官网地址获取</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021040560.jpeg" alt="img"></p><p>其中小编采用的是第二款，整体的体验比<code>Robo 3T</code>要一点，两者功能都比较齐全！</p><p>在使用的时候，可以根据个人喜爱进行选择！</p><h2 id="5-权限控制"><a href="#5-权限控制" class="headerlink" title="5.权限控制"></a>5.权限控制</h2><p>网上发现很多 mongodb 被黑，使大家将目光投向了mongodb 的权限控制。</p><p>其实 mongodb 本身有一套完备的 RBAC 权限控制体系，这次被黑基本都是没有遵照 mongodb 的生产环境部署手册部署的结果。</p><p>我们平时玩一玩 mongodb 习惯了不设置用户名密码，当我们的数据库放到公网时，由于我们也没有设置用户名密码，任何人都可以随便访问，而且由于我们没有开启授权访问，使得任何登录到 mongodb 服务器的用户都拥有最高权限！</p><p>一些居心不良的人发现，就可以把我们的数据拷走，删除我们的数据库，从而勒索赎金！</p><p>再次提醒各位同学，别学会所有的技能，大门还一直开着，还抱怨我方防御塔怎么一直被摧毁！</p><p>以上文<code>CentOS7</code>安装为例，修改<code>/etc/mongod.conf</code>，在<code>security</code>部分添加如下配置，开启授权访问！</p><pre class="line-numbers language-none"><code class="language-none">security:    authorization: enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改完成之后，重启 mongodb 服务</p><pre class="line-numbers language-none"><code class="language-none">#重启服务systemctl restart mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MonogoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MonogoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debug调试</title>
      <link href="/2022/09/01/debug-diao-shi/"/>
      <url>/2022/09/01/debug-diao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA断点调试技巧"><a href="#IDEA断点调试技巧" class="headerlink" title="IDEA断点调试技巧"></a>IDEA断点调试技巧</h1><h2 id="1-问题总结"><a href="#1-问题总结" class="headerlink" title="1. 问题总结"></a>1. 问题总结</h2><blockquote><p>1.怎么开启断点调试?</p></blockquote><blockquote><p>2.调试界面咋那么多按钮？</p><ul><li><ul><li>1.返回断点位置</li><li>2.步过</li><li>3.步入</li><li>4,5.强制步入，步出</li><li>6.回退断点</li><li>7.断点跳到光标处</li><li>8.表达式计算</li><li>9.恢复程序</li><li>10.停止程序</li><li>11.查看所有断点</li><li>12.禁用断点</li><li>13.其他</li></ul></li></ul></blockquote><blockquote><p>竟然有那么多调试断点？</p><ul><li><ul><li>1.方法断点</li><li>2.属性断点</li><li>3.异常断点</li><li>4.终止断点</li><li>5.条件断点</li><li>6.流断点</li><li>7.多线程断点</li><li>8.远程断点</li></ul></li></ul></blockquote><h2 id="2-怎么开启断点调试？"><a href="#2-怎么开启断点调试？" class="headerlink" title="2.怎么开启断点调试？"></a>2.怎么开启断点调试？</h2><p>随着开发的深入，越来越觉得高效的调试方法是多么的重要了，但我们一般上来就是敲一些代码，谁会去静下心来学一些看似没什么用的调试技巧呢？但这恰恰就是新手和老手之间的区别。</p><p>断点调试是很简单的，只需要点击idea上方的小虫子，启动调试即可，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101731.png" alt="img">这当然不是本文的重点，只是开个头。</p><h2 id="3-调试界面咋那么多按钮？"><a href="#3-调试界面咋那么多按钮？" class="headerlink" title="3.调试界面咋那么多按钮？"></a>3.调试界面咋那么多按钮？</h2><p>先来介绍一下界面。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101686.png" alt="img">我给这些区域都标了号，下面来重点介绍。</p><h3 id="3-1返回断点位置"><a href="#3-1返回断点位置" class="headerlink" title="3.1返回断点位置"></a>3.1返回断点位置</h3><p>1号按钮，这个用的不多，如果你从其他地方想要回到断点位置，就按一下即可，如下图所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101716.gif" alt="img"></p><h3 id="3-2步过"><a href="#3-2步过" class="headerlink" title="3.2步过"></a>3.2步过</h3><p>2号按钮，说人话就是一行行的往下执行，不会进入方法里面，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101915.gif" alt="img"></p><h3 id="3-3步入"><a href="#3-3步入" class="headerlink" title="3.3步入"></a>3.3步入</h3><p>3号按钮，可以进入我们自定义的方法，如果是其他类库的方法不会进入，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101559.gif" alt="img"></p><h3 id="3-4强制步入-步出"><a href="#3-4强制步入-步出" class="headerlink" title="3.4强制步入|步出"></a>3.4强制步入|步出</h3><p>4号5号按钮，前者可以进入深层的方法，包括官方的源码，后者就是从对应的方法中出来，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101003.gif" alt="img"></p><h3 id="3-5回退断点"><a href="#3-5回退断点" class="headerlink" title="3.5回退断点"></a>3.5回退断点</h3><p>6号按钮是很特殊的，如果你的代码中没有调用其他地方的方法，那么是呈灰色的，无法使用，只有进入更深层的方法，才能够使用，其实就是后悔药，我们很多时候调试时不小心按的快了点，很容易错过想看的位置，只能再次重启吗？不，使用这个drop frame 就可以了，演示如下。</p><p>可以看到，这里往下执行了add，但是还没有执行完，按这个按钮，再次回到了调用方法之前，但对于数据库插入等操作，其实是无法回退的，这里的回退只是因为记录了栈信息才能够做到的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101780.gif" alt="img">但是要注意，如果你某个方法调用完毕了，你想再回去那就没有办法了。</p><h3 id="3-6断点跳到光标处"><a href="#3-6断点跳到光标处" class="headerlink" title="3.6断点跳到光标处"></a>3.6断点跳到光标处</h3><p>7号按钮也用的不多，主要是为了快速跳转到光标指向的那一行，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102813.gif" alt="img"></p><h3 id="3-7表达式计算"><a href="#3-7表达式计算" class="headerlink" title="3.7表达式计算"></a>3.7表达式计算</h3><p>8号按钮是计算表达式的，我们模拟从数据库获取集合，用表达式查询对应的元素，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011116506.gif" alt="img"></p><h3 id="3-8恢复程序"><a href="#3-8恢复程序" class="headerlink" title="3.8恢复程序"></a>3.8恢复程序</h3><p>9号按钮称为 <code>Resume Program</code>，能够跳转到指定的断点处，我们在10行和第100行各加一个断点，需要点几下该按钮跳转到100行呢？答案是一次即可，第一次断点会在第10行停下，点击改按钮直接飞越90行到第100行，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102946.gif" alt="img"></p><h3 id="3-9停止程序"><a href="#3-9停止程序" class="headerlink" title="3.9停止程序"></a>3.9停止程序</h3><p>10号按钮就是停止调试，但是注意，即便停止了调试，程序也会继续运行下去，如何想让他就在断点处停止呢？后面我会说到。</p><h3 id="3-10查看所有断点"><a href="#3-10查看所有断点" class="headerlink" title="3.10查看所有断点"></a>3.10查看所有断点</h3><p>11号按钮打开又别有乾坤，基本功能如下图所示，主要是设置，查看断点信息，大家看着应吧，实用的方法我会在下面讲的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102417.png" alt="img"></p><h3 id="3-11禁用断点"><a href="#3-11禁用断点" class="headerlink" title="3.11禁用断点"></a>3.11禁用断点</h3><p>12号按钮就简单了，暂时禁用掉断点，方便程序继续执行，一般配合 <code>Resume Program</code>。</p><h3 id="3-12其他"><a href="#3-12其他" class="headerlink" title="3.12其他"></a>3.12其他</h3><p>13号其实不是按钮，而是一块区域，这里面存放了很多变量的信息，方便我们查看。</p><p>14号按钮其实之前被我忽略掉了，这次拿出来讲一下，在watch可以监控变量的变化，有同学说，中间的变量栏也可以看啊，但是单独拉出来，看起来更加的方便，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102929.gif" alt="img"></p><h2 id="4-竟然有那么多调试断点？"><a href="#4-竟然有那么多调试断点？" class="headerlink" title="4. 竟然有那么多调试断点？"></a>4. 竟然有那么多调试断点？</h2><p>这里省略了普通的行断点调试，毕竟是最简单的，大家都会。</p><h3 id="4-1方法断点"><a href="#4-1方法断点" class="headerlink" title="4.1方法断点"></a>4.1方法断点</h3><p>方法断点是不是用在普通方法上的，最好的用法是在接口上使用，当我们在调试源码的时候，如果在接口上打了断点，再往下走，可以直接跳转到实现类的实现方法上，而不需要我们一个个的去找。</p><p>案例中，有一个接口<code>DemoInterface</code>，它有两个实现类，让我们看下效果吧，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011111531.png" alt="img">注意：方法断点是一个菱形标志。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011111977.gif" alt="img"></p><p>其实可以直接在接口方法上打断点，直接跳转到对应的实现方法的，这里是为了放慢演示速度。</p><h3 id="4-2属性断点"><a href="#4-2属性断点" class="headerlink" title="4.2属性断点"></a>4.2属性断点</h3><p>属性断点是打在属性上的，我们无需再<code>getter setter</code>方法上打断点，在属性上打上断点，就会出现一个小眼睛的标志，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011112502.png" alt="img"></p><p>在眼睛上点击右键可以设置。</p><p>我们一般是通过getter，setter方法设值的，所以就会在这两个方法上停留。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011112914.png" alt="img"></p><p>看一下GIF演示吧。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113662.gif" alt="img"></p><h3 id="4-3异常断点"><a href="#4-3异常断点" class="headerlink" title="4.3异常断点"></a>4.3异常断点</h3><p>在线上由于空指针出现了BUG，我们想快速定位到哪里出现了空指针，应该怎么做呢，答案就是，异常断点！演示如下。</p><p>注意，异常断点是一个闪电的标志。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113574.gif" alt="img"></p><p>可以看到，我们在全局打了个空指针断点，只要哪里出现了空指针，就会在那里停止，太方便了！</p><h3 id="4-4终止断点"><a href="#4-4终止断点" class="headerlink" title="4.4终止断点"></a>4.4终止断点</h3><p>前面我们说过，即便停止程序，也不会让我们后面运行的代码取消执行，那么我一定要取消执行可以吗？当然是可以的，演示如，在方法栈上点击右键，有一个<code>Force Return</code>，然后再点击<code>Resumer Program</code>，就可以直接终止返回了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113627.gif" alt="img"></p><h3 id="4-5条件断点"><a href="#4-5条件断点" class="headerlink" title="4.5条件断点"></a>4.5条件断点</h3><p>我想要在某个条件满足的时候打上断点，而不想一步步的走下去，有什么办法吗？当然有，在断点处右击，在<code>condition</code>里填入相应的条件即可，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011115237.gif" alt="img"></p><h3 id="4-6流断点"><a href="#4-6流断点" class="headerlink" title="4.6流断点"></a>4.6流断点</h3><p>我们使用流的时候，很难看到中间做了什么，但其实idea就帮我们解决了，我用断点调试下面代码，给大家演示下。</p><p>其实只需要找到这个按钮就行了</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113955.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">List&lt;Integer&gt; list = new ArrayList&lt;&gt;(Arrays.asList(1, 3, 3, 4, 4, 4, 5, 6, 78));       List&lt;Integer&gt; collect = list.stream()         //先将偶数筛选，再去重，返回集合               .filter(s -&gt; s % 2 == 0)               .distinct()               .collect(Collectors.toList());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113718.gif" alt="img"></p><h3 id="4-7多线程断点"><a href="#4-7多线程断点" class="headerlink" title="4.7多线程断点"></a>4.7多线程断点</h3><p>给大家演示两种情况，多线程下调试，定时任务下调试。</p><p>这个演示比较简单，可能有同学不以为意，你可以去尝试下，如果使用默认All来调试多线程程序会发生什么，可能某条线程就跑掉了，没有停留，而这种方式可以捕获到运行的所有线程。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113144.gif" alt="img">定时任务这样调试有个好处，即便我们在调试的过程中下一个任务也到时间了，也不会执行，防止多次定时任务执行带来的干扰，我在演示前已经提前一分钟启动了程序，每隔10秒钟打印一次，但是由于暂停了线程的执行，多次点击<code>Resumer Program</code>，发现并没有往下执行哦，而是再等了10秒钟之后执行。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113981.gif" alt="img"></p><h3 id="4-8远程断点"><a href="#4-8远程断点" class="headerlink" title="4.8远程断点"></a>4.8远程断点</h3><p>顾名思义，远程debug就是断点打在你的本地环境, 但是代码是跑在远端的(可以理解为是服务端)。</p><h4 id="4-8-1为什么需要远程debug"><a href="#4-8-1为什么需要远程debug" class="headerlink" title="4.8.1为什么需要远程debug"></a>4.8.1为什么需要远程debug</h4><p>相信很多人在开发中遇到过这样的问题, 就是明明代码在自己的环境上是好的, 为什么去了测试环境就有问题, 这个时候你可能会质疑测试, 是不是准备的数据有问题?还是不会使用, 导致用错了场景? 还是部署有问题?</p><p>在做数据项目的时候, 遇到bug可能会把相应的数据下载到本地开发环境, 然后进行debug, 但如果遇到了如下的问题, 该怎么办呢</p><ul><li>数据量特别大, 本地无法下载</li><li>数据比较敏感, 安全原因不让下载</li><li>本地无法搭建环境, 比如, 需要启动cluster, 需要至少三台物理节点</li></ul><p>这个时候远程debug就要上场了, 这样你就能在本地看到远端运行的样子了, 而不用只看输出日志去推断可能哪里出了错误。</p><h4 id="4-8-2如何远程debug"><a href="#4-8-2如何远程debug" class="headerlink" title="4.8.2如何远程debug"></a>4.8.2如何远程debug</h4><h5 id="4-8-2-1首先看服务器是不是在Debug模式下工作"><a href="#4-8-2-1首先看服务器是不是在Debug模式下工作" class="headerlink" title="4.8.2.1首先看服务器是不是在Debug模式下工作"></a>4.8.2.1首先看服务器是不是在Debug模式下工作</h5><p>不是则进行（tomcat/bin/catalina.sh）配置。</p><pre class="line-numbers language-none"><code class="language-none">-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>具体解释：</p><ul><li><strong>-Xdebug ：</strong> 启用调试特性。</li><li>-<strong>Xrunjdwp</strong>:在目标 VM 中加载 JDWP 实现。它通过传输和 JDWP 协议与独立的调试器应用程序通信。下面介绍一些特定的子选项。</li><li><strong>transport</strong>: 这里通常使用套接字传输。但是在 Windows 平台上也可以使用共享内存传输。</li><li><strong>address</strong> 这是连接的传输地址。如果服务器为 <em>n</em> ，将尝试连接到该地址上的调试器应用程序。否则，将在这个端口监听连接。</li><li><strong>server</strong> 如果值为 <em>y</em> ，目标应用程序监听将要连接的调试器应用程序。否则，它将连接到特定地址上的调试器应用程序。</li><li><strong>suspend</strong> 如果值为 <em>y</em> ，目标 VM 将暂停，直到调试器应用程序进行连接。</li></ul></blockquote><h5 id="4-8-2-2本地IDEA进行远程Debug"><a href="#4-8-2-2本地IDEA进行远程Debug" class="headerlink" title="4.8.2.2本地IDEA进行远程Debug"></a>4.8.2.2本地IDEA进行远程Debug</h5><p>其实非常简单, 用Intellij IDEA打开你的代码, 点击右上角的“Edit Configurations”</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011114216.png" alt="image-20220901104745631"></p><p>然后点击左上角的”+“, 添加一个“Remote”, 这个选项就是用来做远程Debug用的, 并且添加远程DEBUG配置项，Host和Port，端口默认给的是5005。配置后，点击<code>Apply</code>和<code>OK</code>按钮（然后只要把IP和刚才配置的端口号加上就行。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011114467.png" alt="image-20220901104935150"></p><h4 id="4-8-3远程debug测试"><a href="#4-8-3远程debug测试" class="headerlink" title="4.8.3远程debug测试"></a>4.8.3远程debug测试</h4><p>我们直接在TestController类里的test方法上打断点：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011114854.png" alt="image-20220901105824672"></p><p>然后选择远程debug启动项，点击调试按钮启动。</p><p>打开postman测试：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011115937.png" alt="image-20220901105616699"><br>发现成功进入断点</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011115278.png" alt="image-20220901105729273"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudFlare-githubpages配置</title>
      <link href="/2022/08/31/cloudflare-githubpages-pei-zhi/"/>
      <url>/2022/08/31/cloudflare-githubpages-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudFlare-githubpages-配置"><a href="#CloudFlare-githubpages-配置" class="headerlink" title="CloudFlare+githubpages 配置"></a>CloudFlare+githubpages 配置</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1CDN简介"><a href="#1-1CDN简介" class="headerlink" title="1.1CDN简介"></a>1.1CDN简介</h3><p>关于 CDN 是什么，我想应该不用做过多的介绍，毕竟现在是一个 “云” 的时代，你至少也听说过 阿里云 或者 腾讯云 吧，当然其中就包括 CDN 业务。</p><p>CDN 的作用有很多，比如可以用来加速网站的访问，可以用来防护网站等。本篇文章讨论的就是使用 cloudflare 作为 CDN 来加速博客网站，并让博客开启 https，提升博客安全等级。</p><p>由于 GitHub Pages 在国外，而且有时候因为图片过多等原因，静态博客页面在国内访问速度可能会非常慢，我们可以用 CDN 来加速，选择 CDN，对于个人来说，主要考虑的还是访问速度以及价格，既免费又快的 CDN就最好了。经过一番寻找，发现 <a href="https://dash.cloudflare.com/">Cloudflare</a> 免费版速度还可以，而且配置起来非常简单，所以在此选用 CloudFlare CDN 来加速页面访问。也就是说，借用了cloudflare免费提供的serveless服务：workers。搭建一个反向代理。</p><p>反向代理的话相当于是我们的节点代替github pages接受了客户端的请求，所以其实我们只需要做两件事：</p><ol><li>接收客户端的请求，对其进行必要的修改之后发送给真正的服务端（<a href="https://beaumon.github.io/">github pages</a>）。这些修改主要是针对一些headers的设置，包括替换Host地址，允许任意源头资源共享(access-control-allow-origin: *)等，具体见代码。</li><li>接收服务端的响应，同样地我们需要对响应的内容做一些修改再发送给客户端的浏览器。这部分主要是把响应中所有的<a href="https://beaumon.github.io/">github pages</a>出现的部分改换成workers站点的url，否则我们的客户端就获取这些信息之后下一次就会直接访问github pages源站了。这一步可以通过简单的文本查找和替换来实现，我们可以维护一个替换对字典，对响应的内容进行正则查找替换后把响应发送给客户端。</li></ol><h3 id="1-2-DNS简介"><a href="#1-2-DNS简介" class="headerlink" title="1.2 DNS简介"></a>1.2 DNS简介</h3><p>域名系统(Domain Name System,DNS)是<a href="https://baike.baidu.com/item/Internet/272794?fromModule=lemma_inlink">Internet</a>上解决网上机器命名的一种系统。它将简单易记的域名转换成可由计算机识别的IP地址，以便客户端对服务器的正常访问，就像拜访朋友要先知道别人家怎么走一样。Internet上当一台<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151?fromModule=lemma_inlink">主机</a>要访问另外一台主机时，必须首先获知其地址，<a href="https://baike.baidu.com/item/TCP/33012?fromModule=lemma_inlink">TCP</a>/IP中的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859?fromModule=lemma_inlink">IP地址</a>是由四段以“.”分开的数字组成(此处以IPv4的地址为例，IPv6的地址同理)，记起来总是不如名字那么方便，所以，就采用了域名系统来管理名字和IP的对应关系。</p><h3 id="1-3域名介绍"><a href="#1-3域名介绍" class="headerlink" title="1.3域名介绍"></a>1.3域名介绍</h3><h4 id="1-3-1域名的形式"><a href="#1-3-1域名的形式" class="headerlink" title="1.3.1域名的形式"></a>1.3.1域名的形式</h4><p>域名可以划分为各个子域，子域还可以继续划分为子域的子域，这样就形成了顶级域、二级域、三级域等。<br>如下图所示：<br><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202211180930046.png" alt="这里写图片描述"><br>其中顶级域名分为：国家顶级域名、通用顶级域名、反向域名。</p><table><thead><tr><th>国家顶级域名</th><th>中国:cn， 美国:us，英国uk…</th></tr></thead><tbody><tr><td>通用顶级域名</td><td>com公司企业，edu教育机构，gov政府部门，int国际组织，mil军事部门 ，net网络，org非盈利组织…</td></tr><tr><td>反向域名</td><td>arpa，用于PTR查询（IP地址转换为域名）</td></tr></tbody></table><h4 id="1-3-2域名的层级"><a href="#1-3-2域名的层级" class="headerlink" title="1.3.2域名的层级"></a>1.3.2域名的层级</h4><ul><li>根域名 ：<code>.root</code> 或者 <code>.</code> ，根域名通常是省略的</li><li>顶级域名，如 <code>.com</code>，<code>.cn</code> 等</li><li>次级域名，如 <code>baidu.com</code> 里的 <code>baidu</code>，这个是用户可以进行注册购买的</li><li>主机域名，比如 <code>baike.baidu.com</code> 里的<code>baike</code>，这个是用户可分配的</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">主机名<span class="token punctuation">.</span>次级域名<span class="token punctuation">.</span>顶级域名<span class="token punctuation">.</span>根域名baike<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202211180930713.png" alt="在这里插入图片描述"></p><p>换一种形式展示，如下图所示：<br><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202211180930288.png" alt="这里写图片描述"><br>例如 :我们熟悉的，<a href="http://www.baidu.com/">www.baidu.com</a></p><ol><li>com: 一级域名. 表示这是一个企业域名。同级的还有 “net”(网络提供商), “org”(⾮非盈利组织) 等。</li><li>baidu: 二级域名，指公司名。</li><li>www: 表示主机域名为 www。</li></ol><p><strong>域名是分层结构，域名服务器也是对应的层级结构。</strong><br>有了域名结构，还需要有一个东西去解析域名，域名需要由遍及全世界的域名服务器去解析，域名服务器实际上就是装有域名系统的主机。</p><p>由高向低进行层次划分，可分为以下几大类：</p><table><thead><tr><th>分类</th><th>作用</th></tr></thead><tbody><tr><td>根域名服务器</td><td>最高层次的域名服务器，本地域名服务器解析不了的域名就会向其求助</td></tr><tr><td>顶级域名服务器</td><td>负责管理在该顶级域名服务器下注册的二级域名</td></tr><tr><td>权限域名服务器</td><td>负责一个区的域名解析工作</td></tr><tr><td>本地域名服务器</td><td>当一个主机发出DNS查询请求时，这个查询请求首先发给本地域名服务器</td></tr></tbody></table><p>注：一个域名服务器所负责的范围，或者说有管理权限的范围，就称为 区域 （Zone）<br><strong>关于分层， 需要注意的是:</strong></p><ul><li>每个层的域名上都有自己的域名服务器，最顶层的是根域名服务器</li><li>每一级域名服务器都知道下级域名服务器的IP地址</li><li>为了容灾, 每一级至少设置两个或以上的域名服务器</li></ul><p><strong>域名的层级有关要点，说明如下：</strong></p><p>（1）“<a href="http://www.baidu.com”/">www.baidu.com”</a> 的一个最完整的形式应该是 “<a href="http://www.baidu.com.”./">www.baidu.com.”。</a></p><p>即在每个域名后面会有一个 “.” ，“.” 来表示根，我们统称这种域名叫绝对域名“ Fully Qualified Domain Name ”(FQDN)，相当于Linux 系统中的文件绝对路径。可以通过在计算机中输入 “<a href="http://www.baidu.com.”/">www.baidu.com.”</a> 或 “<a href="http://www.dianrong.com.”/">www.dianrong.com.”</a> 来确认是否可以打开网站。</p><blockquote><p>不需要输入，不代表不存在。</p></blockquote><blockquote><p>“.” 来表示根,通常我们不需要输入这个根 ，因为计算机和浏览器默认已帮我们输入了这个“.” 根。</p></blockquote><p>（2）域名体系，使用 逆向树 所示，树中的每一个分支，都称为域，一个域名可以属于多个域，如域名 <a href="http://www.baidu.com/">www.baidu.com</a> 属于baidu.com域的一部分，同时也是 com 域的一部分。</p><p>（3）“.” 是最树状结构中最顶层的域名，统称为“根”，即每个域名都是由根开始索引的，所有域名都属于根。</p><p>（4）域名体系是通过倒着来叙述一个域名，如 <a href="http://www.baidu.com/">www.baidu.com</a> 是先写最下面的 www，在写中间的 baidu ，接着写上面的 com ，最后写 “.” ，只是根可以省略。</p><p>（5）顶级域名下面的分支是二级域名，即我们平时通过阿里云、腾讯云购买的域名，如 baidu.com 、fastcp.cn 、dianrong.com 等。</p><p>（6）二级域名下面的分支为三级域名，有时也可称为服务器名称，如 baidu下面的 www 代表了百度的网站服务名称，music 代表了百度的音乐网站服务器名称。</p><p>（7）由根分支出的域名叫 顶域域名（一般简称为 TLD ），一般分为国家地区顶级域名和通用顶级域名。</p><ul><li>国家顶级域名如我们了解的 cn、jp等。</li><li>通用顶级域名如我们了解的 com、org、net、edu等，其中表示工商企业的是 .com；表示网络提供商的 .net，表示非盈利组织的 .org ；表示教育的 .edu 。</li><li>通常我们只能注册二级域名，如果需要注册顶级域名，比如注册类似 .com 这样的域名，在国内需要联系 CNNIC ，由他们进行代理注册，通常价格不菲。大多数情况下，二级域名已经可以完全满足当下的业务需求。</li></ul><p>当然三级域名下还可以在分支四级域名出来，DNS 类似于 Unix 文件系统的结构，由根节点在上的反转树表示。最多分分支 127 层，每一层可以由最多 63 个字符组成，每层中间都以 “.” 进行分隔，类似 Unix 文件中以 “/” 分隔每一个目录。域名的总长度不可超过255个字符，仅可使用字符、数字和连字符，不区分大小写。</p><h4 id="1-3-3DNS-资源记录"><a href="#1-3-3DNS-资源记录" class="headerlink" title="1.3.3DNS 资源记录"></a>1.3.3DNS 资源记录</h4><p>由DNS构建起的域名与IP地址之间的对应关系，称之为“DNS资源记录”（record）。通过设置不同的解析记录，可以实现对主机名不同的解析效果，从而满足不同场景下的域名解析需求。在 DNS 服务器上，一个域名及其下级域名组成一个区域 （Zone）。一个 Zone的 相关的 DNS 信息构成一个数据库文件。</p><p>下面是一条A类型的资源记录（简称为A记录）：域名 <a href="http://www.zdns.cn/">www.zdns.cn</a> 的数据为 202.173.11.10</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311931609.png" alt="在这里插入图片描述"></p><p>记录一条域名信息映射关系，称之为资源记录（RR）。当我们查询域名<a href="http://www.zdns.cn的时候，查询结果得到的资源记录结构体中有如下数据：">www.zdns.cn的时候，查询结果得到的资源记录结构体中有如下数据：</a></p><ul><li>TTL，就是生存周期，是递归服务器会在缓存中保存该资源记录的时长。</li><li>网络/协议类型，它的代表的标识是IN，IN就是internet，目前DNS系统主要支持的协议是IN。</li><li>type，就是资源记录类型，一般的网站都是都是A记录（IPv4的主机地址）。</li><li>rdata是资源记录数据，就是域名关联的信息数据。</li></ul><p>每个区域（Zone）数据库文件都是由资源记录（RR）构成的，一个资源记录就是一行文本，提供了一组有用的 DNS 配置信息。在DNS系统中，最常见的资源记录是Internet类记录，该记录由包含4个字段的数据构成：Name、Value、Type、TTL。其中Name和Value可以理解为一对键值对，但是其具体含义取决于Type的类型，TTL记录了该条记录应当从缓存中删除的时间。</p><p>常见的资源记录类型如表所示。</p><table><thead><tr><th>类型</th><th>编码</th><th>内容</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>主机记录，将 DNS 域名映射到 IPv4 地址，基本作用是说明一个域名对应了哪些 IPv4 地址</td></tr><tr><td>NS</td><td>2</td><td>权威名称服务器记录，用于说明这个区域有哪些 DNS 服务器负责解析</td></tr><tr><td>CNAME</td><td>5</td><td>别名记录，主机别名对应的规范名称，用于将多个DNS记录指向已存在A记录的主机</td></tr><tr><td>SOA</td><td>6</td><td>起始授权机构记录，NS 记录说明了有多台服务器在进行解析，但哪一个才是主服务器，NS 并没有说明，SOA 记录了说明在众多 NS 记录里哪一台才是主要的服务器</td></tr><tr><td>PTR</td><td>12</td><td>指针记录，IP 地址反向解析，是 A 记录的逆向记录，作用是把 IP 地址解析为域名</td></tr><tr><td>MX</td><td>15</td><td>邮件交换记录，指定负责接收和发送到域中的电子邮件的主机</td></tr><tr><td>TXT</td><td>16</td><td>文本资源记录，用来为某个主机名或域名设置的说明</td></tr><tr><td>AAAA</td><td>28</td><td>主机记录，将 DNS 域名映射到 IPv6 地址，基本作用是说明一个域名对应了哪些 IPv6 地址</td></tr><tr><td>SRV</td><td>–</td><td>用于指定服务器提供服务的位置（如主机名和端口）数据</td></tr></tbody></table><h4 id="1-3-4-域名记录的区别和联系"><a href="#1-3-4-域名记录的区别和联系" class="headerlink" title="1.3.4 域名记录的区别和联系"></a>1.3.4 域名记录的区别和联系</h4><blockquote><p>问题：域名解析中，A记录、CNAME、MX记录、NS记录的区别和联系?</p></blockquote><p><strong>联系：</strong></p><blockquote><p>都是区域（Zone）数据库文件都是由资源记录。</p></blockquote><p><strong>A记录: 又称IP指向</strong></p><p>用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。</p><blockquote><p>说明：指向的目标主机地址类型只能使用IP地址；<br>附加说明：</p></blockquote><ul><li>泛域名解析即将该域名所有未指定的子域名都指向一个空间。在“主机名”中填入*，“类型”为A，“IP地址/主机名”中填入web服务器的IP地址，点击“新增”按钮即可。</li><li>负载均衡的实现：负载均衡(Server Load Balancing，SLB)是指在一系列资源上面动态地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性， 并确保企业关键性应用的可用性。</li></ul><blockquote><p>当相同子域名有多个目标地址时，表示轮循，可以达到负载均衡的目的，但需要虚拟主机服务商支持。</p></blockquote><p><strong>CNAME : 通常称别名指向</strong></p><p>您可以为一个主机设置别名。<br>比如设置 test.mydomain.com，用来指向一个主机<a href="http://www.rddns.com/">www.rddns.com</a> ,那么以后就可以用test.mydomain.com来代替访问<a href="http://www.rddns.com了./">www.rddns.com了。</a></p><p>说明：·</p><ul><li>CNAME的目标主机地址只能使用主机名，不能使用IP地址；</li><li>主机名前不能有任何其他前缀，如：http://等是不被允许的；</li><li>A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。</li></ul><p><strong>MX记录 : 邮件交换记录</strong></p><blockquote><p>用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p></blockquote><p>说明：</p><ul><li>MX记录可以使用主机名或IP地址；</li><li>MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。</li><li>也可以使用相同优先级达到负载均衡的目的；</li><li>如果在“主机名”中填入子域名则此MX记录只对该子域名生效。</li></ul><p>附加说明：</p><ol><li>负载均衡服务器负载均衡(Server Load Balancing，SLB)是指在一系列资源上面智能地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性，并确保企业关键性应用的可用性。当域名的MX记录有多个目标地址且优先级相同时，表示轮循，可以达到负载均衡的目的，但需要邮箱服务商支持。</li></ol><p><strong>NS记录:指向DNS子域名</strong></p><p>服务器解析记录, 用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。</p><p>例如用户希望由12.34.56.78 这台服务器解析 news.mydomain.com，则需要设置 news.mydomain.com 的NS记录。</p><p>说明：</p><ul><li>“优先级”中的数字越小表示级别越高；</li><li>“IP地址/主机名”中既可以填写IP地址，也可以填写像 ns.mydomain.com 这样的主机地址，但必须保证该主机地址有效。</li></ul><blockquote><p>如，将news.mydomain.com的NS记录指向到 ns.mydomain.com，在设置NS记录的同时还需要设置ns.mydomain.com的指向，否则NS记录将无法正常解析；</p></blockquote><ul><li>NS记录优先于A记录。</li></ul><blockquote><p>即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。</p></blockquote><h3 id="1-4Cloudflare-Workers简介"><a href="#1-4Cloudflare-Workers简介" class="headerlink" title="1.4Cloudflare Workers简介"></a>1.4Cloudflare Workers简介</h3><blockquote><p>Cloudflare Workers的名称来自Web Workers，更具体地说是Service Workers，一个用于在web浏览器后台运行并拦截HTTP请求的脚本的W3C标准API。Cloudflare Workers是针对相同的标准API编写的，但是是在Cloudflare的服务器上运行，而不是在浏览器中运行。 以下是您可以使用的工具：<br>- 使用最新的标准语言功能执行任意JavaScript代码。<br>- 拦截和修改HTTP请求和响应URL，状态，标头和正文内容。<br>- 直接从您的Worker响应请求，或将其转发到其他地方。<br>- 将HTTP请求发送到第三方服务器。<br>- 以串行或并行方式发送多个请求，并使用响应组成对原始请求的最终响应。<br>- 在响应已经返回到客户端之后发送异步请求（例如，用于记录或分析）。<br>- 控制其他Cloudflare功能，例如缓存行为。</p></blockquote><h3 id="1-5HTTP-强制跳转-HTTPS"><a href="#1-5HTTP-强制跳转-HTTPS" class="headerlink" title="1.5HTTP 强制跳转 HTTPS"></a>1.5HTTP 强制跳转 HTTPS</h3><p>HTTP是明文传输，数据很容易被窃取甚至篡改，HTTPS在HTTP的基础上设置了SSL证书，对传输中的数据进行机密，确保数据的安全性及真实性。<br>其次，现在各大浏览器都在推进HTTPS的发展，SEO方面都给了HTTPS较好的排名，HTTP网站则给出了“不安全”的提示，很影响用户信任度和体验感。<br>如果你的网站加载了大量资源，那么实施HTTPS是必须的。<br>默认情况下配置完成后 HTTPS 是开启的，会在 24 小时内给你配的站点颁发 https 证书，并且证书是自动更新的。我们可以在 CloudFlare 控制台配置 HTTP 强制跳转 HTTPS(详见下文配置)。</p><h3 id="1-6hexo-Gitalk配置proxy的几种方法"><a href="#1-6hexo-Gitalk配置proxy的几种方法" class="headerlink" title="1.6hexo Gitalk配置proxy的几种方法"></a>1.6hexo Gitalk配置proxy的几种方法</h3><h4 id="1-6-1jsdelivr-cdn"><a href="#1-6-1jsdelivr-cdn" class="headerlink" title="1.6.1jsdelivr cdn"></a>1.6.1jsdelivr cdn</h4><p>这种也是<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>主题中默认配置的cdn,但是在比较新的更新中，作者已经声明Jsdelivr 已经被封了。</p><p>所以主题模版中的cors-anywhere反向代理已不能直接使用，而Gitalk的默认proxy为</p><pre class="line-numbers language-none"><code class="language-none">Default: https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接导致了代理访问Github时会直接forbidden，也就是Request failed with status code 403。</p><h4 id="1-6-2netnr-proxy"><a href="#1-6-2netnr-proxy" class="headerlink" title="1.6.2netnr-proxy"></a>1.6.2netnr-proxy</h4><p>可以更换反向代理，直接白嫖别人代理。即：</p><pre class="line-numbers language-none"><code class="language-none">proxy: https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是人人都想白嫖，因此，有时候代理的速度甚至比不开代理更慢。也就可能导致出现<strong>429</strong>。</p><p>429的含义是收到了太多的请求，一开始还没意识到白嫖代理的问题，一直在想429就该怎么解决。知道后来才恍然大悟，我会白嫖，许多人也会白嫖，这个代理很多人都会使用，但是使用次数有限制，就会造成过多的人使用请求。</p><p>比较好的解决办法就是不偷懒,也就是关于<a href="https://github.com/gitalk/gitalk/issues/429">Gitalk后出现403错误</a>讨论出的一种比较简单的解决方案，自己部署反向代理。</p><h4 id="1-6-3Cloudflare-Workers"><a href="#1-6-3Cloudflare-Workers" class="headerlink" title="1.6.3Cloudflare Workers"></a>1.6.3Cloudflare Workers</h4><p>首先创建一个账号</p><p><a href="https://www.cloudflare.com/zh-cn/">Cloudflare 中国官网</a></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208310959571.png" alt="image-20220831095726221"></p><p>注册成功之后就可以使用刚刚注册的邮箱和密码进行登录了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311001068.png" alt="image-20220831100100506"></p><p>新建一个workers即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311005057.png" alt="image-20220831100552309"></p><p>然后再config.yml中使用</p><p>例如我的</p><pre class="line-numbers language-none"><code class="language-none">proxy: https://cloudflare-cors-anywhere.gitalkreslove.introduce.workers.dev/?https://github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-使用CloudFlare-Pages进行反代理"><a href="#2-使用CloudFlare-Pages进行反代理" class="headerlink" title="2.使用CloudFlare Pages进行反代理"></a>2.使用CloudFlare Pages进行反代理</h2><h3 id="2-1新建一个仓库"><a href="#2-1新建一个仓库" class="headerlink" title="2.1新建一个仓库"></a>2.1新建一个仓库</h3><p>这里不再重复贴图介绍，详情参考<a href="https://beaumon.github.io/2022/08/25/hexo-tu-pian-pei-zhi/">hexo图片配置</a>这篇文章。</p><h3 id="2-2创建一个新文件"><a href="#2-2创建一个新文件" class="headerlink" title="2.2创建一个新文件"></a>2.2创建一个新文件</h3><p>在部署好的github项目的根路径新建一个名为_worker.js的文件，然后复制以下代码，在第五行单引号里改成你想要反代的网站。</p><p><strong>注意，反代的网站不需要加https,http，需要遵守类似<a href="http://www.baidu.com的格式/">www.baidu.com的格式</a></strong></p><pre class="line-numbers language-none"><code class="language-none">export default {  async fetch(request, env) {    let url = new URL(request.url);    if (url.pathname.startsWith('/')) {      url.hostname = '反代地址'      let new_request = new Request(url, request);      return fetch(new_request);    }    return env.ASSETS.fetch(request);  },};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262233468.png" alt="image-20220826223304545"></p><p>点击保存</p><h3 id="2-3在CloudFlare网站导航栏点击Pages"><a href="#2-3在CloudFlare网站导航栏点击Pages" class="headerlink" title="2.3在CloudFlare网站导航栏点击Pages"></a>2.3在CloudFlare网站导航栏点击Pages</h3><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262236040.png" alt="image-20220826223557883"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262237601.png" alt="image-20220826223657520"></p><p>输入项目名称，其他不动，点击“Save and deploy”</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262237343.png" alt="image-20220826223754451"></p><p>也可以不配置_worker.js，直接配置<img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311004929.png" alt="image-20220830092551552"></p><p>点击save即可部署完成</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262239071.png" alt="image-20220826223909089"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262239474.png" alt="image-20220826223951909"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311931047.png" alt="image-20220830092744319"></p><p>部署完成之后，原本访问<a href="https://beaumon.github.io/">是Beaumon的小博客鸭</a>的网址可以替换成CloudFlare代理后的地址进行访问了，例如我的 <a href="https://blog-worker.pages.dev/%E3%80%82">https://blog-worker.pages.dev/。</a></p><p>或者使用域名访问： <a href="https://beaumon.tk/">是Beaumon的小博客鸭</a>。</p><h3 id="2-4域名注册"><a href="#2-4域名注册" class="headerlink" title="2.4域名注册"></a>2.4域名注册</h3><h4 id="2-4-1PC注册"><a href="#2-4-1PC注册" class="headerlink" title="2.4.1PC注册"></a>2.4.1PC注册</h4><p>这里我选择了Freenom，可以免费申请顶级域名，最高12个月免费。</p><p><a href="https://my.freenom.com/">Freenom免费域名注册官网</a></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311012498.png" alt="image-20220831101121017"></p><p>进行注册登录即可。有些博主说是必须得在没有登入账号的状态下，搜索域名，添加购物车，然后再注册。</p><p>我没有采纳，我是用了gmail邮箱注册成功之后，再去申请的，同样申请成功了，话不多说，上干货。</p><blockquote><p>注意：注册时候尽量选择国外的邮箱，推荐gmail，还有就是得科学上网，因为它检测到你的ip地址，如果为国内ip，或者你搭了vpn，但是你的注册信息和你的vpn代理地址不一样，也同样会失败。我使用的chrome插件翻出去了，但是ip地址没变，在你购物车跳转的时候会没有反应，当你的vpn代理了ip地址时候，还会有另外一种错误，它会提示：“您的某些域由于技术错误而无法注册。这些域已被取消“</p></blockquote><p>这个我暂时也没有找到一个好的解决办法</p><p>网上解决办法参考：安装Gooreplacer插件，这里我也装了，但因为vpn不给力，没改掉ip地址，因此我选择了在手机上进行注册。</p><p>1，打开浏览器的扩展程序把Gooreplacer启用。</p><p>2，在浏览器地址栏右侧点击这个插件的标志，就会打开它的设置主页。</p><p>3，在这个设置主页上面点击”重定向“标签，在上面添下如下设置。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311023087.png" alt="image-20220831102347283"></p><p>前期准备，生成一个美国人的信息和地址</p><p><a href="https://www.shenfendaquan.com/Index/index/custom_result">点我在线生成美国人信息</a></p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311106566.png" alt="image-20220831110635529"></p><p>注册账号总结</p><pre class="line-numbers language-none"><code class="language-none">1.1首先进入https://www.freenom.com 官网1.2官网首先向下拉，找到合作伙伴的开发人员项。1.3 打开 找到 今天就获得一个随机的域帐户！这 个按钮，进去就是注册页面。这就是直接注册账号的入口了1.4输入邮箱（这里用国内的邮箱是不行的。需要国际邮箱或者美国邮箱。没有的可以用临时邮箱。临时邮箱直接在百度搜(为了安全性考虑不建议使用)，然后点击下方蓝色按钮。1.5回到临时邮箱，刷新邮箱。然后会有一条邮件，打开freenom发来的邮件，打开里面的链接。1.6进去以后发现啥都没有,再按照第二步操作，就会有一个信息表单要你填，这个时候就要用到一个特别重要的网站：美国个人信息生成网（百度即可）。将临时信息的内容填写到freenom（要一一对应]）（邮箱不改）。然后在最后两个编辑框内输入密码。勾选下方的选择框，在点击蓝色按钮。即可注册成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2手机注册"><a href="#2-4-2手机注册" class="headerlink" title="2.4.2手机注册"></a>2.4.2手机注册</h4><p>步骤如下：</p><p>1.开启vpn</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311111826.png" alt="vpn"></p><p>2.访问官网地址注册</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311113728.png" alt="register"><br>3.搜索想要注册的域名</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311117833.png" alt="search"><br>4.选择域名</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311117148.png" alt="choose"><br>5.选择时长(免费的最多12个月)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311118273.png" alt="free12"></p><p>6.确认订单</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311119978.png" alt="confirm"><br>7.订单失败(被取消了，多试几次)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311120865.png" alt="failure"></p><p>8.订单成功</p><p>小tips:白天一般不容易成功，晚上几率更大一些(个人观点)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311122787.png" alt="success"></p><p>9.my Domains展示</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311123112.png" alt="image-20220831112356912"></p><p>至此，域名注册成功</p><p>注册域名总结:</p><pre class="line-numbers language-none"><code class="language-none">1.打开freenom官网 https://www.freenom.com2.在首页的编辑框输入域名，比如你想要springweb.*的域名，那就输入springweb，然后点击CheckAvailability3.进去后，选择一个免费的后辍，官网提供了cf,ml,ga,tk等几种可供选择。选择好之后，点击Checkout，让后选择选择域名到期时间，推荐12个月。然后点击Continue。4.点击确认订单5.成功/失败(网站有防滥用策略，挂梯子可能会提示您的某些域由于技术错误而无法注册。这些域已被取消。)，若失败，多试几次，或者到晚上再行测试注意：你的ip地址和你的个人信息里面不匹配（如果确保ip和个人信息是同一个国家，还是没有办法。把ip地址的街道地址填进去，或者换美国地址ip，美国ip好像更容易通过）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-域名解析配置"><a href="#3-域名解析配置" class="headerlink" title="3.域名解析配置"></a>3.域名解析配置</h2><h3 id="3-1新增站点"><a href="#3-1新增站点" class="headerlink" title="3.1新增站点"></a>3.1新增站点</h3><p>在cloudflare中点击Websites，然后点击Add a Site,将刚注册的域名填入即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311128735.png" alt="image-20220831112840827"></p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311347261.png" alt="image-20220831134656004"></p><h3 id="3-2选择free计划"><a href="#3-2选择free计划" class="headerlink" title="3.2选择free计划"></a>3.2选择free计划</h3><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311347234.png" alt="image-20220831134747981"></p><h3 id="3-3直接continue"><a href="#3-3直接continue" class="headerlink" title="3.3直接continue"></a>3.3直接continue</h3><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311359474.png" alt="image-20220831134841843"></p><h3 id="3-4设置DNS记录"><a href="#3-4设置DNS记录" class="headerlink" title="3.4设置DNS记录"></a>3.4设置DNS记录</h3><p>点击了continue后，会提示：如果没有 DNS 记录，Cloudflare 将无法激活您的站点。最好现在设置 DNS 记录。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311408972.png" alt="image-20220831140527666"></p><h3 id="3-5-指向-Cloudflare-的名称服务器"><a href="#3-5-指向-Cloudflare-的名称服务器" class="headerlink" title="3.5 指向 Cloudflare 的名称服务器"></a>3.5 指向 Cloudflare 的名称服务器</h3><p><strong>点击confirm,会出现指向 Cloudflare 的名称服务器是激活过程中的关键步骤，Cloudflare 必须完成此操作才能优化和保护您的站点</strong>，域名服务器是您的主要DNS控制器，可识别您的域在 Internet 上的位置字样，Cloudflare 已经默认配置好，划到最下方点击完成，检查域名服务器即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311408076.png" alt="image-20220831140801076"></p><p>然后会有一个配置小建议，可以跳过，可以看一下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311930055.png" alt="image-20220831140943379"></p><p>建议是</p><pre class="line-numbers language-none"><code class="language-none">1.启用始终使用 HTTPS：将所有使用方案“http”的请求重定向到“https”2.启用自动缩小：减少网站上 Javascript、CSS 和 HTML 源代码的文件大小。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311929084.png" alt="image-20220831141035679"></p><p>可以应用它的建议。</p><p>如果没有使用建议的话，也可以在Rules中自行添加规则。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311539582.png" alt="image-20220831153931659"></p><h3 id="3-6使得域名在-Cloudflare-上活跃"><a href="#3-6使得域名在-Cloudflare-上活跃" class="headerlink" title="3.6使得域名在 Cloudflare 上活跃"></a>3.6使得域名在 Cloudflare 上活跃</h3><p>在概览页面点击检查名称服务器(check nameservers)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311929796.png" alt="image-20220831141412032"></p><p>点击了提示Cloudflare 现在正在检查博蒙.tk 的名称服务器。请等待几个小时以获取更新。检查完之后，WebSites上的就会变为active。</p><h3 id="3-7为域名配置配置DNS解析"><a href="#3-7为域名配置配置DNS解析" class="headerlink" title="3.7为域名配置配置DNS解析"></a>3.7为域名配置配置DNS解析</h3><h4 id="3-7-1-查询github-pages对应的ip地址"><a href="#3-7-1-查询github-pages对应的ip地址" class="headerlink" title="3.7.1 查询github pages对应的ip地址"></a>3.7.1 查询github pages对应的ip地址</h4><p><a href="https://www.ipaddress.com/">ip查询地址</a></p><p>输入username.github.io(github pages)进行检索</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311543030.png" alt="image-20220831154306202"></p><h4 id="3-7-2-添加记录"><a href="#3-7-2-添加记录" class="headerlink" title="3.7.2 添加记录"></a>3.7.2 添加记录</h4><p>点击Add record,</p><p>选择type为A,Name为www,IPV4为刚刚查到的IPV4的地址</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311544154.png" alt="image-20220831154414330"></p><p>再次点击Add record,</p><p>选择type为A,Name为@,IPV4为刚刚查到的IPV4的地址</p><p>或者直接选择type为CNAME,Namewww,Target为username.github.io。</p><h3 id="3-8修改freenom默认的nameservers"><a href="#3-8修改freenom默认的nameservers" class="headerlink" title="3.8修改freenom默认的nameservers"></a>3.8修改freenom默认的nameservers</h3><p>将freenom默认的nameservers修改为cloudflare提供的nameservers。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311930086.png"></p><h3 id="3-9测试域名"><a href="#3-9测试域名" class="headerlink" title="3.9测试域名"></a>3.9测试域名</h3><p>配置完成之后打开github，选择对应的仓库，依次点击setting–&gt;pages，输入Custom domain,点击save,等待检查。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311551197.png" alt="image-20220831155113323"></p><p>稍等一会儿，</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311847107.png" alt="image-20220831184704699"></p><p>此时就可以打开浏览器输入beaumon.cf进行访问了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311928905.png" alt="image-20220831192834828"></p><h2 id="4-使用cloudflare-workers进行反代理"><a href="#4-使用cloudflare-workers进行反代理" class="headerlink" title="4.使用cloudflare workers进行反代理"></a>4.使用cloudflare workers进行反代理</h2><h3 id="4-1安装-Cloudflare-提供的部署程序-Wrangler"><a href="#4-1安装-Cloudflare-提供的部署程序-Wrangler" class="headerlink" title="4.1安装 Cloudflare 提供的部署程序 Wrangler"></a>4.1安装 Cloudflare 提供的部署程序 Wrangler</h3><h4 id="4-1-1安装-Wrangler"><a href="#4-1-1安装-Wrangler" class="headerlink" title="4.1.1安装 Wrangler"></a>4.1.1安装 Wrangler</h4><p>Wrangler 的项目地址：<a href="https://github.com/cloudflare/wrangler">cloudflare wrangler</a> 按照官方教程，使用 npm 安装 Wrangler ，在控制台输入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ npm i @cloudflare<span class="token operator">/</span>wrangler <span class="token operator">-</span>g    #全局安装$ # npm i @cloudflare<span class="token operator">/</span>wrangler     #如果默认环境无法进行全局安装，可以使用此局部安装命令，在工程目录需使用npx调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>cargo 方式安装 Wrangler（未使用）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ cargo install wrangler<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-1-2获取-Cloudflare-api-密钥"><a href="#4-1-2获取-Cloudflare-api-密钥" class="headerlink" title="4.1.2获取 Cloudflare api 密钥"></a>4.1.2获取 Cloudflare api 密钥</h4><p>在<a href="https://dash.cloudflare.com/profile/api-tokens">Cloudflare 的 api 控制台</a>中创建一个新的 api-token，点击新建 api-token，选择使用模板（Start with a template）。</p><p>使用<code>Edit Cloudflare Workers</code>模板创建新的 api，配置相应的权限即可获得一个新的<code>api-tokens</code>，保存备用。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311949662.png" alt="img"></p><h4 id="4-1-3配置-Wrangler-全局密钥"><a href="#4-1-3配置-Wrangler-全局密钥" class="headerlink" title="4.1.3配置 Wrangler 全局密钥"></a>4.1.3配置 Wrangler 全局密钥</h4><p>控制台执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ wrangler config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入刚才保存的<code>api-tokens</code>运行验证即可完成全部配置。</p><h3 id="4-2初始化-Wrangler"><a href="#4-2初始化-Wrangler" class="headerlink" title="4.2初始化 Wrangler"></a>4.2初始化 Wrangler</h3><p>在工程目录终端中执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ wrangler init <span class="token operator">--</span>site my<span class="token operator">-</span><span class="token keyword">static</span><span class="token operator">-</span>site        #my<span class="token operator">-</span><span class="token keyword">static</span><span class="token operator">-</span>site替换为要创建的Works名称# $ npx wrangler init <span class="token operator">--</span>site my<span class="token operator">-</span><span class="token keyword">static</span><span class="token operator">-</span>site    #局部安装使用此命令，用法如上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行此条命令会在工程目录中生成<code>wrangler.toml</code>和<code>aworkers-site</code>,其中<code>wrangler.toml</code>是工程中 Wrangler 的配置文件。</p><h3 id="4-3配置-Wrangler"><a href="#4-3配置-Wrangler" class="headerlink" title="4.3配置 Wrangler"></a>4.3配置 Wrangler</h3><h4 id="4-3-1简单设置-Wrangler-toml"><a href="#4-3-1简单设置-Wrangler-toml" class="headerlink" title="4.3.1简单设置 Wrangler.toml"></a>4.3.1简单设置 Wrangler.toml</h4><p>默认生成的<code>wrangler.toml</code>如下，可依据设置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">name <span class="token operator">=</span> <span class="token string">"my-static-site"</span>               #此处为之前初始化填写的Workes名称type <span class="token operator">=</span> <span class="token string">"webpack"</span>account_id <span class="token operator">=</span> <span class="token string">""</span>             # Cloudflare Account <span class="token constant">ID</span>，去 Cloudflare 的控制面板找找workers_dev <span class="token operator">=</span> <span class="token boolean">true</span>          # 是否启用 workers<span class="token punctuation">.</span>dev 子域名如果需要配置自己的域名，改为<span class="token boolean">false</span>route <span class="token operator">=</span> <span class="token string">""</span>                  # Workers 所载的 Routezone_id <span class="token operator">=</span> <span class="token string">""</span>                # 域名在 Cloudflare 的 Zone <span class="token constant">ID</span><span class="token punctuation">[</span>site<span class="token punctuation">]</span>bucket <span class="token operator">=</span> <span class="token string">"./public"</span>           # 生成的 dist 路径，对于 Hexo 和 Hugo 来说就是 <span class="token keyword">public</span>entry<span class="token operator">-</span>point <span class="token operator">=</span> <span class="token string">"workers-site"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置自定义域名时，可以在 wrangler 配置完成后，在域名管理中的 Workers 设置中添加对应的 Workers 路由，再将 SSL 安全级别调整为 Flexible，否则会遇到 SSL 526 错误。</p><h4 id="4-3-2上传全站到-Cloudflare-Workers"><a href="#4-3-2上传全站到-Cloudflare-Workers" class="headerlink" title="4.3.2上传全站到 Cloudflare Workers"></a>4.3.2上传全站到 Cloudflare Workers</h4><p>首先使用 Hexo 在工程目录生成一次静态文件，以产生<code>public</code>文件，如不生成则会下下一步上传中报错。</p><p>控制台中运行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wrangler preview <span class="token operator">--</span>watch   # 上传并预览wrangler publish           #上传并发布<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示以下即完成所有的运行操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Using namespace <span class="token keyword">for</span> Workers Site <span class="token string">"__site-workers_sites_assets"</span> Uploading site files Success⬇️ Installing wranglerjs<span class="token operator">...</span>⬇️ Installing wasm<span class="token operator">-</span>pack<span class="token operator">...</span> Built successfully<span class="token punctuation">,</span> built project size is <span class="token number">11</span> KiB<span class="token punctuation">.</span> Successfully published your script to https<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">/*.workers.dev    #这里就是生成的预览地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开你生成的地址进行访问即可。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊数据库建表的15个小技巧</title>
      <link href="/2022/08/29/liao-liao-shu-ju-ku-jian-biao-de-15-ge-xiao-ji-qiao/"/>
      <url>/2022/08/29/liao-liao-shu-ju-ku-jian-biao-de-15-ge-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库建表的15个小技巧"><a href="#数据库建表的15个小技巧" class="headerlink" title="数据库建表的15个小技巧"></a>数据库建表的15个小技巧</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于后端开发同学来说，访问数据库，是代码中必不可少的一个环节。</p><p>系统中收集到用户的核心数据，为了安全性，我们一般会存储到数据库，比如：mysql，oracle等。</p><p>后端开发的日常工作，需要不断的建库和建表，来满足业务需求。</p><p>通常情况下，建库的频率比建表要低很多，所以，我们这篇文章主要讨论建表相关的内容。</p><p>如果我们在建表的时候不注意细节，等后面系统上线之后，表的维护成本变得非常高，而且很容易踩坑。</p><p>今天就跟大家一起聊聊，数据库建表的15个小技巧，希望对你会有所帮助。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292154327.png" alt="img"></p><h2 id="1-名字"><a href="#1-名字" class="headerlink" title="1.名字"></a>1.名字</h2><p>建表的时候，给<code>表</code>、<code>字段</code>和<code>索引</code>起个好名字，真的太重要了。</p><h3 id="1-1-见名知意"><a href="#1-1-见名知意" class="headerlink" title="1.1 见名知意"></a><strong>1.1 见名知意</strong></h3><p>名字就像<code>表</code>、<code>字段</code>和<code>索引</code>的一张脸，可以给人留下第一印象。</p><p>好的名字，言简意赅，见名知意，让人心情愉悦，能够提高沟通和维护成本。</p><p>坏的名字，模拟两可，不知所云。而且显得杂乱无章，看得让人抓狂。</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">用户名称字段定义成：yong_hu_ming、用户_name、name、user_name_123456789<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你看了可能会一脸懵逼，这是什么骚操作？</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">用户名称字段定义成：user_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>温馨提醒一下，名字也不宜过长，尽量控制在<code>30</code>个字符以内。</p></blockquote><h3 id="1-2-大小写"><a href="#1-2-大小写" class="headerlink" title="1.2 大小写"></a><strong>1.2 大小写</strong></h3><p>名字尽量都用<code>小写字母</code>，因为从视觉上，小写字母更容易让人读懂。</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：PRODUCT_NAME、PRODUCT_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全部大写，看起来有点不太直观。而一部分大写，一部分小写，让人看着更不爽。</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：product_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名字还是使用全小写字母，看着更舒服。</p><h3 id="1-3-分隔符"><a href="#1-3-分隔符" class="headerlink" title="1.3 分隔符"></a><strong>1.3 分隔符</strong></h3><p>很多时候，名字为了让人好理解，有可能会包含多个单词。</p><p>那么，多个单词间的<code>分隔符</code>该用什么呢？</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：productname、productName、product name、product@name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单词间没有分隔，或者单词间用驼峰标识，或者单词间用空格分隔，或者单词间用@分隔，这几种方式都不太建议。</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：product_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强烈建议大家在单词间用<code>_</code>分隔。</p><h3 id="1-4-表名"><a href="#1-4-表名" class="headerlink" title="1.4 表名"></a><strong>1.4 表名</strong></h3><p>对于表名，在言简意赅，见名知意的基础之上，建议带上<code>业务前缀</code>。</p><p>如果是订单相关的业务表，可以在表名前面加个前缀：<code>order_</code>。</p><p>例如：order_pay、order_pay_detail等。</p><p>如果是商品相关的业务表，可以在表名前面加个前缀：<code>product_</code>。</p><p>例如：product_spu，product_sku等。</p><p>这样做的好处是为了方便归类，把相同业务的表，可以非常快速的聚集到一起。</p><p>另外，还有有个好处是，如果哪天有非订单的业务，比如：金融业务，也需要建一个名字叫做pay的表，可以取名：finance_pay，就能非常轻松的区分。</p><p>这样就不会出现<code>同名表</code>的情况。</p><h3 id="1-5-字段名称"><a href="#1-5-字段名称" class="headerlink" title="1.5 字段名称"></a><strong>1.5 字段名称</strong></h3><p><code>字段名称</code>是开发人员发挥空间最大，但也最容易发生混乱的地方。</p><p>比如有些表，使用flag表示状态，另外的表用status表示状态。</p><p>可以统一一下，使用status表示状态。</p><p>如果一个表使用了另一个表的主键，可以在另一张表的名后面，加<code>_id</code>或<code>_sys_no</code>，例如：</p><p>在product_sku表中有个字段，是product_spu表的主键，这时候可以取名：product_spu_id或product_spu_sys_no。</p><p>还有创建时间，可以统一成：create_time，修改时间统一成：update_time。</p><p>删除状态固定为：delete_status。</p><p>其实还有很多公共字段，在不同的表之间，可以使用全局统一的命名规则，定义成相同的名称，以便于大家好理解。</p><h3 id="1-6-索引名"><a href="#1-6-索引名" class="headerlink" title="1.6 索引名"></a><strong>1.6 索引名</strong></h3><p>在数据库中，索引有很多种，包括：主键、普通索引、唯一索引、联合索引等。</p><p>每张表的主键只有一个，一般使用：<code>id</code>或者<code>sys_no</code>命名。</p><p>普通索引和联合索引，其实是一类。在建立该类索引时，可以加<code>ix_</code>前缀，比如：ix_product_status。</p><p>唯一索引，可以加<code>ux_</code>前缀，比如：ux_product_code。</p><h2 id="2-字段类型"><a href="#2-字段类型" class="headerlink" title="2.字段类型"></a>2.字段类型</h2><p>在设计表时，我们在选择<code>字段类型</code>时，可发挥空间很大。</p><p>时间格式的数据有：date、datetime和timestamp等等可以选择。</p><p>字符类型的数据有：varchar、char、text等可以选择。</p><p>数字类型的数据有：int、bigint、smallint、tinyint等可以选择。</p><p>说实话，选择很多，有时候是一件好事，也可能是一件坏事。</p><p>如何选择一个<code>合适</code>的字段类型，变成了我们不得不面对的问题。</p><p>如果字段类型选大了，比如：原本只有1-10之间的10个数字，结果选了<code>bigint</code>，它占<code>8</code>个字节。</p><p>其实，1-10之间的10个数字，每个数字<code>1</code>个字节就能保存，选择<code>tinyint</code>更为合适。</p><p>这样会白白浪费7个字节的空间。</p><p>如果字段类型择小了，比如：一个18位的id字段，选择了<code>int</code>类型，最终数据会保存失败。</p><p>所以选择一个合适的字段类型，还是非常重要的一件事情。</p><p>以下原则可以参考一下：</p><ol><li>尽可能选择占用存储空间小的字段类型，在满足正常业务需求的情况下，从小到大，往上选。</li><li>如果字符串长度固定，或者差别不大，可以选择char类型。如果字符串长度差别较大，可以选择varchar类型。</li><li>是否字段，可以选择bit类型。</li><li>枚举字段，可以选择tinyint类型。</li><li>主键字段，可以选择bigint类型。</li><li>金额字段，可以选择decimal类型。</li><li>时间字段，可以选择timestamp或datetime类型。</li></ol><h2 id="3-字段长度"><a href="#3-字段长度" class="headerlink" title="3.字段长度"></a>3.字段长度</h2><p>前面我们已经定义好了<code>字段名称</code>，选择了合适的<code>字段类型</code>，接下来，需要重点关注的是<code>字段长度</code>了。</p><p>比如：varchar(20)，biginit(20)等。</p><p>那么问题来了，<code>varchar</code>代表的是<code>字节</code>长度，还是<code>字符</code>长度呢？</p><p>答：在mysql中除了<code>varchar</code>和<code>char</code>是代表<code>字符</code>长度之外，其余的类型都是代表<code>字节</code>长度。</p><p>biginit(n) 这个<code>n</code>表示什么意思呢？</p><p>假如我们定义的字段类型和长度是：bigint(4)，bigint实际长度是<code>8</code>个字节。</p><p>现在有个数据a=1，a显示4个字节，所以在不满4个字节时前面填充0（前提是该字段设置了zerofill属性），比如：0001。</p><p>当满了4个字节时，比如现在数据是a=123456，它会按照实际的长度显示，比如：123456。</p><p>但需要注意的是，有些mysql客户端即使满了4个字节，也可能只显示4个字节的内容，比如会显示成：1234。</p><p>所以bigint(4)，这里的4表示显示的长度为4个字节，实际长度还是占8个字节。</p><h2 id="4-字段个数"><a href="#4-字段个数" class="headerlink" title="4.字段个数"></a>4.字段个数</h2><p>我们在建表的时候，一定要对<code>字段个数</code>做一些限制。</p><p>我之前见过有人创建的表，有几十个，甚至上百个字段，表中保存的数据非常大，查询效率很低。</p><p>如果真有这种情况，可以将一张<code>大表</code>拆成多张<code>小表</code>，这几张表的主键相同。</p><p>建议每表的字段个数，不要超过<code>20</code>个。</p><h2 id="5-主键"><a href="#5-主键" class="headerlink" title="5. 主键"></a>5. 主键</h2><p>在创建表时，一定要创建<code>主键</code>。</p><p>因为主键自带了主键索引，相比于其他索引，主键索引的查询效率最高，因为它不需要回表。</p><p>此外，主键还是天然的<code>唯一索引</code>，可以根据它来判重。</p><p>在<code>单个</code>数据库中，主键可以通过<code>AUTO_INCREMENT</code>，设置成<code>自动增长</code>的。</p><p>但在<code>分布式</code>数据库中，特别是做了分库分表的业务库中，主键最好由外部算法(比如：雪花算法）生成，它能够保证生成的id是全局唯一的。</p><p>除此之外，主键建议保存跟业务无关的值，减少业务耦合性，方便今后的扩展。</p><p>不过我也见过，有些一对一的表关系，比如：用户表和用户扩展表，在保存数据时是一对一的关系。</p><p>这样，用户扩展表的主键，可以直接保存用户表的主键。</p><h2 id="6-存储引擎"><a href="#6-存储引擎" class="headerlink" title="6.存储引擎"></a>6.存储引擎</h2><p>在<code>mysql5.1</code>以前的版本，默认的存储引擎是<code>myslam</code>，而<code>mysql5.1</code>以后的版本，默认的存储引擎变成了<code>innodb</code>。</p><p>之前我们还在创建表时，还一直纠结要选哪种存储引擎？</p><p><code>myslam</code>的索引和数据分开存储，而有利于查询，但它不支持事务和外键等功能。</p><p>而<code>innodb</code>虽说查询性能，稍微弱一点，但它支持事务和外键等，功能更强大一些。</p><p>以前的建议是：读多写少的表，用myslam存储引擎。而写多读多的表，用innodb。</p><p>但虽说mysql对innodb存储引擎性能的不断优化，现在myslam和innodb查询性能相差已经越来越小。</p><p>所以，建议我们在使用<code>mysql8</code>以后的版本时，直接使用默认的<code>innodb</code>存储引擎即可，无需额外修改存储引擎。</p><h2 id="7-NOT-NULL"><a href="#7-NOT-NULL" class="headerlink" title="7. NOT NULL"></a>7. NOT NULL</h2><p>在创建字段时，需要选择该字段是否允许为<code>NULL</code>。</p><p>我们在定义字段时，应该尽可能明确该字段<code>NOT NULL</code>。</p><p>为什么呢？</p><p>我们主要以innodb存储引擎为例，myslam存储引擎没啥好说的。</p><p>主要有以下原因：</p><ol><li>在innodb中，需要额外的空间存储null值，需要占用更多的空间。</li><li>null值可能会导致索引失效。</li><li>null值只能用<code>is null</code>或者<code>is not null</code>判断，用<code>=号</code>判断永远返回false。</li></ol><p>因此，建议我们在定义字段时，能定义成NOT NULL，就定义成NOT NULL。</p><p>但如果某个字段直接定义成NOT NULL，万一有些地方忘了给该字段写值，就会<code>insert</code>不了数据。</p><p>这也算合理的情况。</p><p>但有一种情况是，系统有新功能上线，新增了字段。上线时一般会先执行sql脚本，再部署代码。</p><p>由于老代码中，不会给新字段赋值，则insert数据时，也会报错。</p><p>由此，非常有必要给NOT NULL的字段设置默认值，特别是后面新增的字段。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">alter table product_sku add column  brand_id int(10) not null default 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-外键"><a href="#8-外键" class="headerlink" title="8.外键"></a>8.外键</h2><p>在mysql中，是存在<code>外键</code>的。</p><p>外键存在的主要作用是：保证数据的<code>一致性</code>和<code>完整性</code>。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create table class (  id int(10) primary key auto_increment,  cname varchar(15));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有个班级表class。</p><p>然后有个student表：</p><pre class="line-numbers language-none"><code class="language-none">create table student(  id int(10) primary key auto_increment,  name varchar(15) not null,  gender varchar(10) not null,  cid int,  foreign key(cid) references class(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中student表中的cid字段，保存的class表的id，这时通过<code>foreign key</code>增加了一个外键。</p><p>这时，如果你直接通过student表的id删除数据，会报异常：</p><pre class="line-numbers language-none"><code class="language-none">a foreign key constraint fails<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须要先删除class表对于的cid那条数据，再删除student表的数据才行，这样能够保证数据的一致性和完整性。</p><blockquote><p>顺便说一句：只有存储引擎是innodb时，才能使用外键。</p></blockquote><p>如果只有两张表的关联还好，但如果有十几张表都建了外键关联，每删除一次主表，都需要同步删除十几张子表，很显然性能会非常差。</p><p>因此，互联网系统中，一般建议不使用外键。因为这类系统更多的是为了性能考虑，宁可牺牲一点数据一致性和完整性。</p><p>除了<code>外键</code>之外，<code>存储过程</code>和<code>触发器</code>也不太建议使用，他们都会影响性能。</p><h2 id="9-索引"><a href="#9-索引" class="headerlink" title="9. 索引"></a>9. 索引</h2><p>在建表时，除了指定<code>主键索引</code>之外，还需要创建一些<code>普通索引</code>。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create table product_sku(  id int(10) primary key auto_increment,  spu_id int(10) not null,  brand_id int(10) not null,  name varchar(15) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建商品表时，使用spu_id（商品组表）和brand_id（品牌表）的id。</p><p>像这类保存其他表id的情况，可以增加普通索引：</p><pre class="line-numbers language-none"><code class="language-none">create table product_sku (  id int(10) primary key auto_increment,  spu_id int(10) not null,  brand_id int(10) not null,  name varchar(15) not null,  KEY `ix_spu_id` (`spu_id`) USING BTREE,  KEY `ix_brand_id` (`brand_id`) USING BTREE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面查表的时候，效率更高。</p><p>但索引字段也不能建的太多，可能会影响保存数据的效率，因为索引需要额外的存储空间。</p><p>建议单表的索引个数不要超过：<code>5</code>个。</p><p>如果在建表时，发现索引个数超过5个了，可以删除部分<code>普通索引</code>，改成<code>联合索引</code>。</p><p>顺便说一句：在创建联合索引的时候，需要使用注意<code>最左匹配原则</code>，不然，建的联合索引效率可能不高。</p><p>对于数据重复率非常高的字段，比如：状态，不建议单独创建普通索引。因为即使加了索引，如果mysql发现<code>全表扫描</code>效率更高，可能会导致索引失效。</p><h2 id="10-时间字段"><a href="#10-时间字段" class="headerlink" title="10.时间字段"></a>10.时间字段</h2><p><code>时间字段</code>的类型，我们可以选择的范围还是比较多的，目前mysql支持：date、datetime、timestamp、varchar等。</p><p><code>varchar</code>类型可能是为了跟接口保持一致，接口中的时间类型是String。</p><p>但如果哪天我们要通过时间范围查询数据，效率会非常低，因为这种情况没法走索引。</p><p><code>date</code>类型主要是为了保存<code>日期</code>，比如：2022-08-29，不适合保存<code>日期和时间</code>，比如：2022-08-29 21:55:20。</p><p>而<code>datetime</code>和<code>timestamp</code>类型更适合我们保存<code>日期和时间</code>。</p><p>但它们有略微区别。</p><ul><li><code>timestamp</code>：用4个字节来保存数据，它的取值范围为<code>1970-01-01 00:00:01</code> UTC ~ <code>2038-01-19 03:14:07</code>。此外，它还跟时区有关。</li><li><code>datetime</code>：用8个字节来保存数据，它的取值范围为<code>1000-01-01 00:00:00</code> ~ <code>9999-12-31 23:59:59</code>。它跟时区无关。</li></ul><p>优先推荐使用<code>datetime</code>类型保存日期和时间，可以保存的时间范围更大一些。</p><blockquote><p>温馨提醒一下，在给时间字段设置默认值是，建议不要设置成：<code>0000-00-00 00:00:00</code>，不然查询表时可能会因为转换不了，而直接报错。</p></blockquote><h2 id="11-金额字段"><a href="#11-金额字段" class="headerlink" title="11.金额字段"></a>11.金额字段</h2><p>mysql中有多个字段可以表示浮点数：float、double、decimal等。</p><p>而<code>float</code>和<code>double</code>可能会丢失精度，因此推荐大家使用<code>decimal</code>类型保存金额。</p><p>一般我们是这样定义浮点数的：decimal(m,n)。</p><p>其中<code>n</code>是指<code>小数</code>的长度，而<code>m</code>是指<code>整数加小数</code>的总长度。</p><p>假如我们定义的金额类型是这样的：decimal(10,2)，则表示整数长度是8位，并且保留2位小数。</p><h2 id="12-唯一索引"><a href="#12-唯一索引" class="headerlink" title="12.唯一索引"></a>12.唯一索引</h2><p><code>唯一索引</code>在我们实际工作中，使用频率相当高。</p><p>你可以给单个字段，加唯一索引，比如：组织机构code。</p><p>也可以给多个字段，加一个联合的唯一索引，比如：分类编号、单位、规格等。</p><p>单个的唯一索引还好，但如果是联合的唯一索引，字段值出现null时，则唯一性约束可能会失效。</p><blockquote><p>创建唯一索引时，相关字段一定不能包含null值，否则唯一性会失效。</p></blockquote><h2 id="13-字符集"><a href="#13-字符集" class="headerlink" title="13.字符集"></a>13.字符集</h2><p>mysql中支持的<code>字符集</code>有很多，常用的有：latin1、utf-8、utf8mb4、GBK等。</p><p>这4种字符集情况如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292155161.png" alt="img"></p><p><code>latin1</code>容易出现乱码问题，在实际项目中使用比较少。</p><p>而<code>GBK</code>支持中文，但不支持国际通用字符，在实际项目中使用也不多。</p><p>从目前来看，mysql的字符集使用最多的还是：<code>utf-8</code>和<code>utf8mb4</code>。</p><p>其中<code>utf-8</code>占用3个字节，比<code>utf8mb4</code>的4个字节，占用更小的存储空间。</p><p>但utf-8有个问题：即无法存储emoji表情，因为emoji表情一般需要4个字节。</p><p>由此，使用utf-8字符集，保存emoji表情时，数据库会直接报错。</p><p>所以，建议在建表时字符集设置成：<code>utf8mb4</code>，会省去很多不必要的麻烦。</p><h2 id="14-排序规则"><a href="#14-排序规则" class="headerlink" title="14. 排序规则"></a>14. 排序规则</h2><p>不知道，你关注过没，在mysql中创建表时，有个<code>COLLATE</code>参数可以设置。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE `order` (  `id` bigint NOT NULL AUTO_INCREMENT,  `code` varchar(20) COLLATE utf8mb4_bin NOT NULL,  `name` varchar(30) COLLATE utf8mb4_bin NOT NULL,  PRIMARY KEY (`id`),  UNIQUE KEY `un_code` (`code`),  KEY `un_code_name` (`code`,`name`) USING BTREE,  KEY `idx_name` (`name`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它是用来设置<code>排序规则</code>的。</p><p>字符排序规则跟字符集有关，比如：字符集如果是<code>utf8mb4</code>，则字符排序规则也是以：<code>utf8mb4_</code>开头的，常用的有：<code>utf8mb4_general_ci</code>、<code>utf8mb4_bin</code>等。</p><p>其中utf8mb4_general_ci排序规则，对字母的大小写不敏感。说得更直白一点，就是不区分大小写。</p><p>而utf8mb4_bin排序规则，对字符大小写敏感，也就是区分大小写。</p><p>说实话，这一点还是非常重要的。</p><p>假如order表中现在有一条记录，name的值是大写的YOYO，但我们用小写的yoyo去查，例如：</p><pre class="line-numbers language-none"><code class="language-none">select * from order where name='yoyo';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果字符排序规则是utf8mb4_general_ci，则可以查出大写的YOYO的那条数据。</p><p>如果字符排序规则是utf8mb4_bin，则查不出来。</p><p>由此，字符排序规则一定要根据实际的业务场景选择，否则容易出现问题。</p><h2 id="15-大字段"><a href="#15-大字段" class="headerlink" title="15.大字段"></a>15.大字段</h2><p>我们在创建表时，对一些特殊字段，要额外关注，比如：<code>大字段</code>，即占用较多存储空间的字段。</p><p>比如：用户的评论，这就属于一个大字段，但这个字段可长可短。</p><p>但一般会对评论的总长度做限制，比如：最多允许输入500个字符。</p><p>如果直接定义成<code>text</code>类型，可能会浪费存储空间，所以建议将这类字段定义成<code>varchar</code>类型的存储效率更高。</p><p>当然，我还见过更大的字段，即该字段直接保存合同数据。</p><p>一个合同可能会占<code>几Mb</code>。</p><p>在mysql中保存这种数据，从系统设计的角度来说，本身就不太合理。</p><p>像合同这种非常大的数据，可以保存到<code>mongodb</code>中，然后在mysql的业务表中，保存mongodb表的id。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 聊聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不蒜子统计不显示问题</title>
      <link href="/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/"/>
      <url>/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="不蒜子-busuanzi统计不显示的根本原因及解决办法"><a href="#不蒜子-busuanzi统计不显示的根本原因及解决办法" class="headerlink" title="不蒜子(busuanzi统计不显示的根本原因及解决办法)"></a>不蒜子(busuanzi统计不显示的根本原因及解决办法)</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>我使用的 Hexo 博客遇到了的 busuanzi 访问量统计不显示问题，搜索了csdn，知乎，githubstackoverflow，等等也没找到解决办法，直到我发现了大佬的文章(链接见文章末尾)。</p><p>经过一番研究发现是 busuanzi 代码的一处问题和 <a href="https://github.com/EYHN/hexo-helper-live2d">live2d看板娘插件</a>的一处问题凑在一起导致的。</p><p>今天在写博客之前先搜了一下“busuanzi live2d”，发现搜出来一堆结果，我还以为我白研究了..结果点进去一看，第一页结果里没有一个指出了问题的根本原因，而且修复方法基本上都是删 feature 或者换组件，但实际上只要知道问题的根本原因就可以在不妨碍正常功能运作的前提下进行修复。</p><h1 id="2-问题描述"><a href="#2-问题描述" class="headerlink" title="2.问题描述"></a>2.问题描述</h1><p>在一个同时启用了 busuanzi 访问量统计和 live2d 插件的 Hexo 博客里，访问或刷新博客时有大概率 busuanzi 会被隐藏。</p><p>被隐藏的具体表现为，刷新的瞬间 id 为 <code>busuanzi_container_*</code> 的容器是显示的，然后容器的样式很快被设为 <code>display: none</code>。</p><p>查看 F12 的 Network，busuanzi 相关请求正常返回；console 中没有报错。</p><h1 id="3-问题定位"><a href="#3-问题定位" class="headerlink" title="3.问题定位"></a>3.问题定位</h1><h3 id="3-1标签对比："><a href="#3-1标签对比：" class="headerlink" title="3.1标签对比："></a>3.1标签对比：</h3><p><strong>对比发现出现了多余的style=”display: none”;</strong></p><blockquote><p>正常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;次    &lt;/span&gt;&lt;span id="busuanzi_container_site_uv"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;人    &lt;/span&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>异常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"         class="white-color"&gt;2303950&lt;/span&gt;&amp;nbsp;次&lt;/span&gt;&lt;span id="busuanzi_container_site_uv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"         class="white-color"&gt;160644&lt;/span&gt;&amp;nbsp;人&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2查看display-none的定位"><a href="#3-2查看display-none的定位" class="headerlink" title="3.2查看display: none的定位"></a><strong>3.2查看display: none的定位</strong></h3><p>查看 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">busuanzi.pure.mini.js</a>，发现 <code>display: none</code> 在 <code>hides</code> 函数中被设置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">hides</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 hides 函数仅在一处被调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以是在 <code>a(b), scriptTag.parentElement.removeChild(scriptTag)</code> 抛出异常时容器被隐藏。</p><h3 id="3-3异常原因的定位"><a href="#3-3异常原因的定位" class="headerlink" title="3.3异常原因的定位"></a>3.3异常原因的定位</h3><p>由于在其它地方的 busuanzi 不会出现这一问题，而问题的原因还完全不清楚，为了尽可能还原原始环境以复现问题，我选择了使用 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/header-editor/">Firefox 的 Header Editor 插件</a> 直接在原博客进行测试。具体来说，就是在本地复制一份 busuanzi 的代码，然后跑一个 http server，在 Header Editor 里把 busuanzi 代码的请求重定向到本地的 http server。</p><p>首先，在 <code>catch</code> 中添加 <code>console.error(c)</code>，得到错误内容 <code>TypeError: scriptTag.parentElement is null</code>。</p><p>查看代码中 <code>scriptTag</code> 相关的部分：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">scriptTag = document.createElement("SCRIPT"), scriptTag.type = "text/javascript", scriptTag.defer = !0, scriptTag.src = a, scriptTag.referrerPolicy = "no-referrer-when-downgrade", document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，再在 <code>catch</code> 中添加 <code>s = document.querySelector("[src*=BusuanziCallback]"); console.log(s.parentElement);</code>，发现 <code>s.parentElement</code> 不是 <code>null</code>。</p><p>再添加 <code>console.log(s === scriptTag)</code>，发现结果是 <code>s</code> 和 <code>scriptTag</code> 不同，所以原因在于此时的 <code>scriptTag</code> 变量已经不指向 DOM 中的这个元素了。</p><h3 id="3-4定位到-live2d-插件"><a href="#3-4定位到-live2d-插件" class="headerlink" title="3.4定位到 live2d 插件"></a>3.4定位到 live2d 插件</h3><p>此时我原本是没有任何头绪的，但我发现，并不是每次刷新页面都会触发这一问题，所以没有触发问题时和触发问题时的差别就成了问题的突破口。</p><p>经过多次刷新，我发现，有一串 console 输出，在出现问题时总位于我在 <code>catch</code> 中添加的调试信息之前，而在没出现问题时则位于调试信息之后：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Live2D 2.1.00_1 live2d.core.js:5925:16profile : Desktop live2d.core.js:5913:16  [PROFILE_NAME] = Desktop live2d.core.js:5918:20  [USE_ADJUST_TRANSLATION] = false live2d.core.js:5918:20  [USE_CACHED_POLYGON_IMAGE] = false live2d.core.js:5918:20  [EXPAND_W] = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多亏了 live2d 的这串输出，我得以将问题定位到 live2d 插件上。</p><p>实际上，如果没有这些 console 输出，也可以通过 <code>&lt;head&gt;</code> 中 <code>L2Dwidget.0.min.js</code> 和 <code>busuanzi?jsonpCallback=BusuanziCallback</code> 两个 <code>&lt;script&gt;</code> 的相对位置发现问题，只不过这样的话就更隐蔽更难发现了。</p><h3 id="3-5在-live2d-插件中定位问题"><a href="#3-5在-live2d-插件中定位问题" class="headerlink" title="3.5在 live2d 插件中定位问题"></a>3.5在 live2d 插件中定位问题</h3><p>在 <code>L2Dwidget.min.js</code> 的第一行有源码地址以及时间：<code>/*! https://github.com/xiazeyu/live2d-widget.js built@2019-4-6 09:38:17 */</code></p><p>因为注释中给出的时间不是最新版本，先查看 git log 并 checkout 到相应时间的版本。</p><p>既然问题在于 <code>&lt;script&gt;</code> 元素被重新创建而导致原变量不指向 DOM 中元素，就在代码中 grep <code>head</code>，然后发现 <a href="https://github.com/xiazeyu/live2d-widget.js/blob/fa8f2d831a1a9e96cd85bd1ef593a3336aeac720/src/dialog/index.js#L4-L38">问题代码</a>：<code>document.head.innerHTML += ……</code></p><p>至此，问题原因已发现，就是 live2d 插件通过修改 <code>document.head.innerHTML</code> 来添加样式，导致 busuanzi 的 <code>scriptTag</code> 变量指向的不再是 DOM 中的 <code>&lt;script&gt;</code> 元素。</p><p>实际上，live2d 插件的这一问题 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61">已经修复</a>，但需要使用新版才行。</p><h3 id="3-6解决方法"><a href="#3-6解决方法" class="headerlink" title="3.6解决方法"></a>3.6解决方法</h3><h4 id="3-6-1修改-busuanzi-的解决方法"><a href="#3-6-1修改-busuanzi-的解决方法" class="headerlink" title="3.6.1修改 busuanzi 的解决方法"></a>3.6.1修改 busuanzi 的解决方法</h4><p>因为 busuanzi 的代码较短，而且本来就是用的外部的代码，改起来比较容易。</p><p>把 <code>scriptTag.parentElement.removeChild(scriptTag)</code> 修改为 <code>s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)</code> 即可。可以把修改后的静态文件放在博客里，然后修改 busuanzi <code>&lt;script&gt;</code> 的 <code>src</code>。</p><blockquote><p>相关代码</p><p>busuanzi.js的位置为\themes\hexo-theme-matery\source\libs\others\busuanzi.pure.mini.js</p><p>修改后的 busuanzi 代码（还在 catch 里加了个 console.error）：</p><pre class="line-numbers language-none"><code class="language-none">var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||"interactive"===document.readyState||"complete"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c&gt;a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.detachEvent("onreadystatechange",e),window==window.top&amp;&amp;(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.attachEvent("onreadystatechange",function(){/loaded|complete/.test(document.readyState)&amp;&amp;e()}),window==window.top&amp;&amp;(c=setInterval(function(){try{a||document.documentElement.doScroll("left")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c="BusuanziCallback_"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace("=BusuanziCallback","="+c),scriptTag=document.createElement("SCRIPT"),scriptTag.type="text/javascript",scriptTag.defer=!0,scriptTag.src=a,scriptTag.referrerPolicy="no-referrer-when-downgrade",document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)}catch(c){console.error(c),bszTag.hides()}})}}},bszCaller.fetch("//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:["site_pv","page_pv","site_uv"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById("busuanzi_value_"+b);c&amp;&amp;(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="none")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="inline")})}};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后找到</p><pre class="line-numbers language-none"><code class="language-none">&lt;script async="async" src="&lt;%- theme.jsDelivr.url %&gt;&lt;%-url_for(theme.libs.js.busuanzi) %&gt;"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果和我的一样就不需要修改，这也是主题默认的。成功解决</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292129016.png" alt="image-20220829212911099"></p><p>网上搜到的很多解决办法是把 <code>id="busuanzi_container_*"</code> 删掉，这样当然就不会被隐藏了，只不过这个隐藏本意是在出错时不把错误或者无意义的内容显示给访客，保留这一行为还是挺好的。</p><h4 id="3-6-2修改-live2d-的解决方法"><a href="#3-6-2修改-live2d-的解决方法" class="headerlink" title="3.6.2修改 live2d 的解决方法"></a>3.6.2修改 live2d 的解决方法</h4><p>总之，就是把 <code>innerHTML +=</code> 换成 <code>createElement</code> 和 <code>appendChild</code>，按 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61/files#diff-61426849230d9976d234f7c4ca195c623d9bb05a91d76b7ae51501e394f81860L10-R43">xiazeyu/live2d-widget.js#61</a> 改就行。</p><p>live2d 的代码还是挺长的，直接修改 minify 后的代码不太好。如果是 hexo 插件的话，要修改应该也蛮麻烦的。总之，如果你知道怎么改比较好的话可以改，不然的话还是推荐改 busuanzi。</p><h1 id="4-问题启示"><a href="#4-问题启示" class="headerlink" title="4.问题启示"></a>4.问题启示</h1><h2 id="4-1不要修改原-DOM-中的-innerHTML"><a href="#4-1不要修改原-DOM-中的-innerHTML" class="headerlink" title="4.1不要修改原 DOM 中的 innerHTML"></a>4.1不要修改原 DOM 中的 innerHTML</h2><p>直接修改 DOM 元素的 innerHTML 会让其中的元素都重新渲染（加载？创建？），不仅指向其中元素的变量会失效，也可能导致画面闪烁等问题（例如导致 live2d-widget 修复这一问题的不是 busuanzi 失效而是 <a href="https://github.com/EYHN/hexo-helper-live2d/issues/149">CSS 闪烁</a>）。</p><p>所以，如果是添加 DOM 元素，应当避免修改 <code>innerHTML</code>，而应当使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"><code>document.createElement</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"><code>Node.appendChild()</code></a> 以及 <code>removeChild</code>、<code>replaceChild</code>、<code>insertBefore</code> 等 API。</p><h2 id="4-2不要依赖于指向-DOM-元素的变量长时间不改变"><a href="#4-2不要依赖于指向-DOM-元素的变量长时间不改变" class="headerlink" title="4.2不要依赖于指向 DOM 元素的变量长时间不改变"></a>4.2不要依赖于指向 DOM 元素的变量长时间不改变</h2><p>如果 DOM 因各种原因部分重建，指向 DOM 元素的变量很可能不再指向当前 DOM 中的元素。所以，最好不要在过了一段时间后（例如在 callback 中）再次使用指向 DOM 元素的变量，而应当再次获取这一元素。</p><h2 id="4-3不要-silently-fail"><a href="#4-3不要-silently-fail" class="headerlink" title="4.3不要 silently fail"></a>4.3不要 silently fail</h2><p>在处理异常，尤其是未知的异常时，即使不 throw 出去，也最好用 <code>console.error</code> 等方法记录下来。记录在 console 中的错误信息并不会显示给普通用户，但可以给寻找问题所在的用户提供宝贵的提示信息。</p><h2 id="4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试"><a href="#4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试" class="headerlink" title="4.4使用 Header Editor 在对原环境最小修改的情况下进行调试"></a>4.4使用 Header Editor 在对原环境最小修改的情况下进行调试</h2><p>这次使用 Header Editor 调试还是我临时想到的（知道有这么个插件还是以前用 <a href="https://github.com/EndlessCheng/mahjong-helper">mahjong-helper</a>，当然现在已经没在用了）。一开始还用 pastebin 上传代码，效率极低，后来才想起来本地跑个 http server 就可以了..用这个插件来调试还是挺方便的。</p><h2 id="4-5留心依赖版本"><a href="#4-5留心依赖版本" class="headerlink" title="4.5留心依赖版本"></a>4.5留心依赖版本</h2><p>一开始我还在 GitHub 上搜到一个 <a href="https://github.com/JoeyBling/busuanzi.pure.js">busuanzi.pure.js</a>，调了一会儿才发现这个代码和 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</a> 不一样..</p><p>live2d 的版本也要注意开头包含时间的注释，因为最新版本已经把问题修复了。</p><p>本文是参考大佬的博客</p><p>原文连接:<a href="https://ouuan.moe/post/2022/08/busuanzi-and-live2d">https://ouuan.moe/post/2022/08/busuanzi-and-live2d</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> 不蒜子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片配置</title>
      <link href="/2022/08/25/hexo-tu-pian-pei-zhi/"/>
      <url>/2022/08/25/hexo-tu-pian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo图片配置"><a href="#hexo图片配置" class="headerlink" title="hexo图片配置"></a><strong>hexo图片配置</strong></h1><h2 id="1-img路径方法插入图片"><a href="#1-img路径方法插入图片" class="headerlink" title="1.img路径方法插入图片"></a>1.img路径方法插入图片</h2><p>markdown是支持html语句的，直接插入就可以使用了。所以该方法用到了HTML的标签，采用img标签相对链接的方式引入图片。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src='url或图片路径' height=400px'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1优缺点"><a href="#1-1优缺点" class="headerlink" title="1.1优缺点"></a>1.1优缺点</h3><p>优点：灵活，可以进行样式控制。</p><p>缺点：稍微麻烦了点。</p><h3 id="1-2适用环境"><a href="#1-2适用环境" class="headerlink" title="1.2适用环境"></a>1.2适用环境</h3><p>用于顶部导航选项的页面（如：关于、标签、分类）中引入图片。<br>因为在hexo生成静态界面时，同一篇文章会在多处页面生成，例如首页、文章详情页等，而不同页面与图片的相对位置是不一样的，而该方式hexo不会自动处理图片引用，所以使用该方式引用本地图片时必须以“/”开头，表示地址都是基于主目录定位的，不会出现有的界面图片显示错误的情况。不是“/”开头表相对当前文档位置进行定位。而顶部导航页只会在一处地方生成，所以不带“/”开头不会出现失效，建议也统一使用“/”，开头。</p><h3 id="1-3使用方法"><a href="#1-3使用方法" class="headerlink" title="1.3使用方法"></a>1.3使用方法</h3><p>在source中新建一个“images”目录用于存放图片，然后再使用“/images/图片名”引用图片。也可以分文章存放图片，会稍微麻烦点。</p><h2 id="2-方式插入图片"><a href="#2-方式插入图片" class="headerlink" title="2.!+[]+()方式插入图片"></a>2.!+[]+()方式插入图片</h2><p>!+[]+()是markdown的默认插入图片语句，采用了Base64方法插入本地图片。</p><p>使用markdown图片插入语句插入本地图片时可以使用Base64方法，base64方法只需要将图片转换为base64格式，将Base64字符串输入图片路径位置即可。网上可以找到在线图片转Base64的工具。</p><pre class="line-numbers language-none"><code class="language-none">![图片说明]('url或图片路径')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1优缺点"><a href="#2-1优缺点" class="headerlink" title="2.1优缺点"></a>2.1优缺点</h3><p>优点：插入图片简便。</p><p>缺点：不能控制图片样式。</p><h3 id="2-2适用环境"><a href="#2-2适用环境" class="headerlink" title="2.2适用环境"></a>2.2适用环境</h3><p>1.给普通文章插入图片，且无须样式控制；<br>2.给顶部导航选项的页面（如：关于、标签、分类）中插入图片，且无须样式控制。</p><p>3.使用该方法引入本地图片同样需要以“/”，开头定位，否则有的界面将会无法正常显示图片，也可以将引图片转换为Base64字符串，然后再引用Base64字符串，Base64字符串太长，写文章时很影响阅读，例如在使用githubpage+Gitalk时候，github的issure最大支持50个长度的字符，如将中文作为标题Base64字符串长度就超出了。</p><h3 id="2-3使用方法"><a href="#2-3使用方法" class="headerlink" title="2.3使用方法"></a>2.3使用方法</h3><p>插入网络图片比较简单，直接在图片链接中写入图片的网络链接就好。</p><p>示例：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg"></p><h2 id="3-通过模板引擎语法插入本地图片"><a href="#3-通过模板引擎语法插入本地图片" class="headerlink" title="3.通过模板引擎语法插入本地图片"></a>3.通过模板引擎语法插入本地图片</h2><h3 id="3-1优缺点"><a href="#3-1优缺点" class="headerlink" title="3.1优缺点"></a>3.1优缺点</h3><p>优点：插入较为便捷，图片按文章存储</p><p>缺点：不能控制样式，不能在顶部导航选项的页面（如：关于、标签、分类）中插入图片。</p><h3 id="3-2适用环境"><a href="#3-2适用环境" class="headerlink" title="3.2适用环境"></a>3.2适用环境</h3><p>普通文章中插入本地图片<br>在顶部导航选项的页面中使用该方法，什么都不会显示（不知道是不是我使用的主题的原因），总之是失败了，什么都没显示，在普通文章中可以正常显示。不能用于插入网络图片。</p><h3 id="3-3使用方法"><a href="#3-3使用方法" class="headerlink" title="3.3使用方法"></a>3.3使用方法</h3><p>要使用该方法首先要修改博客的配置文件“_config.yml”,把配置文件里的post_asset_folder:设置为true，表示启动Asset资源文件夹。这时候新建文章就会自动添加一个同名的文件夹，用于存放资源文件。</p><p>这时候我们把图片放入对应的文件夹即可，但是我们使用“!+[]+()”的格式插入图片却不能成功，因为只是将图片放入文件夹，hexo生成静态界面时并没有处理该图片，所以运行后就找不到图片了。</p><p>所以我们需要使用</p><pre class="line-numbers language-none"><code class="language-none">{%%}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法，使用该方法必须将图片放在新建文件时生成的与该文件同名的目录下，然后使用以下命令格式即可。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">{% asset_img 图片文件名 图片加载失败的描述 %}我文章文件为--index.md图片目录为--images/logo.png插入语句为{% asset_img logo.png 这是一张图片 %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-搭建图床方式"><a href="#4-搭建图床方式" class="headerlink" title="4.搭建图床方式"></a>4.搭建图床方式</h2><p>创建图床的目的是为本地图片等资源生成一个超链，然后将此连接嵌入到 <code>markdown</code> 编写的博客文章中，以此来解决博客中图片等资源的显示问题。本文介绍一种 PicGo + <a href="https://so.csdn.net/so/search?q=Github&amp;spm=1001.2101.3001.7020">Github</a> 搭建的免费图床。本文采用PicGo+Github图床搭建。测试图片地址见2.3示例图，图片地址：</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-1创建Github仓库"><a href="#4-1创建Github仓库" class="headerlink" title="4.1创建Github仓库"></a>4.1创建Github仓库</h3><p>首先打开浏览器访问github的官网。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827870.png" alt="image-20220825082449581"></p><p>点击右上角的+号新建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827106.png" alt="image-20220825082645630"></p><p>输入仓库名，点击创建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250829906.png" alt="image-20220825082856239"></p><h3 id="4-2生成Github-Token"><a href="#4-2生成Github-Token" class="headerlink" title="4.2生成Github Token"></a>4.2生成Github Token</h3><p>依次点击Settings -&gt; Developer settings-&gt;Personal access tokens</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857730.png" alt="image-20220825083114015"></p><p>需要注意的是要勾选repo选项</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857268.png" alt="image-20220825083245715"></p><p>创建成功后，会生成一串token，<strong>这串token之后不会再显示</strong>，请认真保存</p><h3 id="4-3下载-PicGo"><a href="#4-3下载-PicGo" class="headerlink" title="4.3下载 PicGo"></a>4.3下载 PicGo</h3><p>PicGo 是一款图片上传的工具，目前支持 SM.MS图床、微博图床，七牛图床，腾讯云COS，阿里云OSS，又拍云图床，Github 等图床，未来将支持更多图床。</p><p>点击 <a href="https://github.com/Molunerfinn/PicGo/releases">这里</a> 下载 PicGo 工具。根据操作系统选择对应的版本，安装到指定目录。</p><p>温馨提示：较低版本的PicGo不支持设置server等功能。当我下载了PicGo2.0.4版本时候是这个样子的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858951.png" alt="PicGo版本不支持server"></p><p>所以我选择了下载当前的最新版本2.3.0。</p><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">PicGo官网地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857802.png" alt="PicGo 2.3.0"></p><p>由于是国外网站，下载不便，因此这里为大家提供了网盘地址。</p><p><a href="https://www.aliyundrive.com/s/HKKaFtce4Cb">下载地址</a> </p><p>下载完成再行打开发现server选项出现了</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857879.png" alt="PicGo有了"></p><h3 id="4-4配置-PicGo"><a href="#4-4配置-PicGo" class="headerlink" title="4.4配置 PicGo"></a>4.4配置 PicGo</h3><h4 id="4-4-1-github图床"><a href="#4-4-1-github图床" class="headerlink" title="4.4.1 github图床"></a>4.4.1 github图床</h4><p>选择github图床，配置如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242043314.png" alt="image-20220824204355709"></p><p>如果有需要的话可以设置为默认图床，接下来就可以上传图片并同步到你的GitHub仓库了。此时图床已经建立完成，之后的图片以Markdown的格式上传进行引用就大功告成了。</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/Yourname/Repositoryname/分支名/img/图片名.图片格式&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4-2-开启server"><a href="#4-4-2-开启server" class="headerlink" title="4.4.2 开启server"></a>4.4.2 开启server</h4><p>PicGo-Server的默认端口是36677，点击开即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858740.png" alt="image-20220825084500728"></p><h3 id="4-5配置-Markdown"><a href="#4-5配置-Markdown" class="headerlink" title="4.5配置 Markdown"></a>4.5配置 Markdown</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写，说人话就是删减版的HTML语言 。</p><h3 id="4-5-1Typora简介"><a href="#4-5-1Typora简介" class="headerlink" title="4.5.1Typora简介"></a>4.5.1Typora简介</h3><p>Typora是一个跨平台的markdown编辑器，使用markdown编辑器写文章优点是排版简洁，痛点则是无法像Word那样直接嵌入图片，插入的图片实际上插入的是图片的路径（可以是本地路径也可以是网络路径），使用网络路径的优点是文档可以跨平台跨设备浏览，需要注意的是早期免费版Typora不支持图床的功能，有人说下载最后一个免费版本0.11.18，当我下载安装完成时候，typora打开报错：This beta version of Typora is expired, please download and install a newer version.也就是说，使用的是0.11.18版本，获取系统时间停止免费版本使用，人家想要你用收费的。网上也提供了两种解决方案，一种是改系统时间，但是修改系统时间后其他软件和功能的时间冲突。另一种是重装低版本的typora，很显然，更低版本的Typora不可能支持图床功能。因此，需要更新Typora版本，推荐大家购买正版支持。这里也为大家提供一个版本，亲测可用，亲测可用，亲测可用。</p><p><a href="https://www.aliyundrive.com/s/DLU5Wveop9Z">下载地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242031850.png" alt="image-20220824203128807"></p><h3 id="4-5-2错误解决"><a href="#4-5-2错误解决" class="headerlink" title="4.5.2错误解决"></a>4.5.2错误解决</h3><p>Failed to fetch</p><pre class="line-numbers language-none"><code class="language-none">Failed to fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误一般是由<strong>端口设置错误</strong>造成的，至于我为什么知道，你看看log文件就懂了。打开picgo的log文件。错误提示是端口繁忙。</p><p><code>解决方法</code>：打开picgo设置，点击设置代理选项，<strong>将端口改为36677端口</strong>，这是picgo推荐的默认端口号，然后保存，成功。</p><p>有的时候，我们的老朋友Failed to fetch还是如约而至，打开端口设置一看，怎么变成了366771呢，问题在于端口冲突，如果你打开了多个picgo程序，就会端口冲突，<strong>picgo自动帮你把36677端口改为366771端口</strong>，导致错误。log文件里也写得很清楚。</p><pre class="line-numbers language-none"><code class="language-none">错误二：{“success”,false}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误相信也有很多小伙伴遇到了，原因是<strong>文件名冲突</strong>了，如果你上传过一张image1.jpg的图片，再上传名称一样的图片就会失败，查看log文件里也写到了。</p><p>办法也很简单，打开picgo设置，将<strong>上传前重命名或者时间戳重命名打开</strong>。如图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242036804.png" alt="image-20220824203657532"></p><p>再次上传文件，出现一个确认文件名称的对话框，点击确定，上传成功！</p><p><strong>授人以鱼不如授人以渔</strong>，上面的三种情况解决方法教给大家了，但是错误总是千奇百怪层出不穷的，如果下次出现上传错误的提示，请大家找到picgo的log文件，自己查看问题的原因嗷。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242038555.png" alt="image-20220824203834034"></p><h2 id="5-hexo-asset-image插件"><a href="#5-hexo-asset-image插件" class="headerlink" title="5.hexo-asset-image插件"></a>5.hexo-asset-image插件</h2><p>毕竟是存储在github仓库里面的，网络不佳根本加载不出来，所以大部分人还是选择使用了hexo-asset-image插件来上传图片，Hexo 本地图片插件: 就是转换 图片相对路径 为 asset_img，能够在 Typora 等 Markdown 编辑器预览 与 Hexo 发布预览 时均能正常显示图片。</p><p>首先下载插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的文件结构是这样的</p><pre class="line-numbers language-none"><code class="language-none">article-Publish├── banner.jpg├── logo.jpg└── rules.jpgarticle-Publish.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次，需要修改hexo根目录 <code>_config.yml</code>文件 <code>post_asset_folder: true</code></p><p>此外，还需要配置Typora的偏好设置，详见4.5.1图。</p><p>完成之后只需要使用</p><pre class="line-numbers language-none"><code class="language-none">![]()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法引用图片，无论是网络图片还是本地图片，插件都会自动帮助我们将图片下载到source/image目录，然后自动更新图片引用，在发布到github上时候，会自动在当前目录下生成一个于文章同名的文件夹，可以说非常方便。</p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025209.png" alt="image-20220824202521064"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025989.png" alt="image-20220824202439164"></p><p>另外hexo-theme-matery也提供了cdn加速功能，只需在主题的_config.yml文件中配置</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/用户名/githubpages地址@分支名/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器输入即可访问到</p><pre class="line-numbers language-none"><code class="language-none">[cdn资源访问]&nbsp;https://cdn.jsdelivr.net/gh/Beaumon/beaumon.github.io@master/&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样能够查看到插件生成的目录hexo-theme-matery-主题美化。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250933131.png" alt="jddelivr 图片"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">方案一<span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">'url或图片路径'</span> <span class="token assign-left variable">height</span><span class="token operator">=</span>400px<span class="token string">'&gt;方案二![图片说明]('</span>url或图片路径'<span class="token punctuation">)</span>方案三<span class="token punctuation">{</span>% asset_img logo.png 这是一张图片 %<span class="token punctuation">}</span>方案四搭建图床大家可根据自己的喜好自行选择使用哪一种图片引用方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/20/hello-world/"/>
      <url>/2022/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208261730103.png"></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
