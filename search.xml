<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>白嫖 IBM LinuxOne 服务器</title>
      <link href="/2022/09/08/bai-piao-ibm-linuxone-fu-wu-qi/"/>
      <url>/2022/09/08/bai-piao-ibm-linuxone-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="白嫖-IBM-LinuxOne-教程"><a href="#白嫖-IBM-LinuxOne-教程" class="headerlink" title="白嫖 IBM LinuxOne 教程"></a>白嫖 IBM LinuxOne 教程</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><h3 id="1-1前言"><a href="#1-1前言" class="headerlink" title="1.1前言"></a>1.1前言</h3><p>LinuxONE Community Cloud是IBM联合Marist大学为学生提供的用于测试应用程序和网站的平台，提供长达120天的免费VPS。</p><blockquote><p>温馨提醒：：这个 VPS 是 S390X 架构的，兼容性不如 x86-64或arm架构，能安装的软件不多，这个机子比较适合建站，LNMP、LAMP、宝塔之类的都可以跑，性能和并发也是挺强的，做编译机也是很好的<br>挖矿的话大概率是不行的，__而且条款也不允许__，高技术力的可以试试自己编译 xmrig 测试<br>也<strong>不建议</strong>你用这个东西搭建代理工具，易封号，但是这个机子确实能搭<br>也可以开 Minecraft 服务器，但是延迟会比较高</p></blockquote><h3 id="1-2配置"><a href="#1-2配置" class="headerlink" title="1.2配置"></a>1.2配置</h3><table><thead><tr><th>选项</th><th></th></tr></thead><tbody><tr><td>CPU2</td><td>2核</td></tr><tr><td>内存</td><td>4G</td></tr><tr><td>磁盘</td><td>50G</td></tr><tr><td>带宽</td><td>1Gbps</td></tr><tr><td>地域</td><td>美国 纽约州</td></tr><tr><td>时间</td><td>120天(以邮件为准)</td></tr><tr><td>价格</td><td>$0</td></tr></tbody></table><h2 id="2-基础准备"><a href="#2-基础准备" class="headerlink" title="2.基础准备"></a>2.<strong>基础准备</strong></h2><ul><li>一个邮箱，推荐 GMail，国内可以 QQ、163同样可以</li><li>英文基础，看不懂英文请使用浏览器翻译插件</li><li>Linux 基础</li></ul><h2 id="3-申请实例"><a href="#3-申请实例" class="headerlink" title="3.申请实例"></a>3.申请实例</h2><p>官网链接：<a href="https://linuxone.cloud.marist.edu/#/register?flag=VM">https://linuxone.cloud.marist.edu/#/register?flag=VM</a></p><p>点击跳转官网注册。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209082228776.png" alt="image-20220908222833434"></p><p>需要填写一些基本信息，可以填写自己的信息，也可以使用美国人信息生成器等生成，申请理由填写“Machine Learning”“develop website”这样的就可以了，描述不清楚可能不通过。</p><p>美国人信息生成器网址：<a href="https://www.shenfendaquan.com/">https://www.shenfendaquan.com/</a></p><p>例如我生成的</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209082228307.png" alt="image-20220908214940399"></p><p>好吧，为了演示效果，我又注册了一个qq，开通了qq邮箱。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090651162.png" alt="image-20220909065123697"></p><p>在邮箱中去确认：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090652082.png" alt="image-20220909065238237"></p><p>注册成功之后，使用刚刚注册的账号密码登录，登录成功即可进入如下页面。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090656063.png" alt="image-20220909065618169"></p><p>点击管理实例</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090700447.png" alt="image-20220909065640316"></p><p>点击创建：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090700831.png" alt="image-20220909065914030"></p><p>这里我选择了RHEL8.4,都可以。</p><p>点击create，创建key，会生成一个密钥对，下载一个pem文件。也就是上图中的key。</p><p>选中自己刚生成的key，点击右下角创建。<br>然后实例状态会在spawning持续一段时间。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090700475.png" alt="image-20220909070020433"></p><p>当实例处于active的时候，就可以使用Xshell链接了。</p><h2 id="4-实例配置"><a href="#4-实例配置" class="headerlink" title="4.实例配置"></a>4.实例配置</h2><h3 id="4-1远程连接"><a href="#4-1远程连接" class="headerlink" title="4.1远程连接"></a>4.1远程连接</h3><p>我使用的是Xshell工具,新建一个会话，输入实例ip，选择public key方式,输入用户linux1,点击确定。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090852249.png" alt="image-20220909070607084"></p><blockquote><p>注意：Xshell4 无法连接(亲测),会提示加密方式不支持。本人下载了Xshell7</p></blockquote><p>会有SSH安全警告：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090708478.png" alt="image-20220909070809304"></p><p>点击接受并保存，选择刚刚生成的key。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090851449.png" alt="image-20220909071131261"></p><p>点击确定，即可远程连接到服务器。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090712264.png" alt="image-20220909071216118"></p><p>这样登录进来的只是Linux1用户，他对于很多文件没有权限进行操作。因此要获取root用户进行操作。</p><h3 id="4-2配置root用户"><a href="#4-2配置root用户" class="headerlink" title="4.2配置root用户"></a>4.2配置root用户</h3><p>切换到root账号</p><pre class="line-numbers language-none"><code class="language-none">sudo -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置root密码(可略过)</p><pre class="line-numbers language-none"><code class="language-none">passwd打开ssh配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vi /etc/ssh/sshd_config修改或添加下面配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">PermitRootLogin yesPubkeyAuthentication yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090718135.png" alt="image-20220909071800552"></p><p>最后编辑认证文件authorized_keys</p><pre class="line-numbers language-none"><code class="language-none">vi /root/.ssh/authorized_keys <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090718245.png" alt="image-20220909071853392"></p><p>将两个</p><pre class="line-numbers language-none"><code class="language-none">no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="echo 'Please login as the user \"linux1\" rather than the user \"root\".';echo;sleep 10;exit 142"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>都删除掉。然后wq保存退出，这样就可以新建会话使用root账户进行登录了。</p><h3 id="4-3配置httpd服务"><a href="#4-3配置httpd服务" class="headerlink" title="4.3配置httpd服务"></a>4.3配置httpd服务</h3><p>安装 gcc-c++</p><pre class="line-numbers language-none"><code class="language-none">yum install -y gcc gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装httpd</p><pre class="line-numbers language-none"><code class="language-none">yum install httpd -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>httpd命令</p><pre class="line-numbers language-none"><code class="language-none">systemctl start httpd.service #启动 或者 service httpd start(下面同理)systemctl stop httpd.service #停止systemctl restart httpd.service #重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置开机启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable httpd.service #开机启动systemctl disable httpd.service #开机不启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>检查httpd状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查防火墙状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status firewalld 或者service firewalld status#如果没有关闭，关闭即可systemctl stop firewalld 或者 service firewalld stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时应该就可以访问到了，如果仍然没有，重启一下服务器就好了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090733260.png" alt="image-20220909073316041"></p><h2 id="5-域名配置"><a href="#5-域名配置" class="headerlink" title="5.域名配置"></a>5.域名配置</h2><p>打开cloudflare，找到DNS，将刚刚的主机ip配置给springmvc.tk。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090851663.png" alt="image-20220909085103118"></p><p>最后，来看一下效果把。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209090851537.png" alt="image-20220909085136679"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 自定义starter</title>
      <link href="/2022/09/06/spring-boot-zi-ding-yi-starter/"/>
      <url>/2022/09/06/spring-boot-zi-ding-yi-starter/</url>
      
        <content type="html"><![CDATA[<p>在编写 <code>starter</code> 之前我们先了解一下什么是 <code>starter</code>，一个 <code>starter</code> 其实就是对一个功能的集成封装，然后对外提供一个依赖，让业务去使用，像我们熟悉的 <code>Redis</code>，<code>mongo</code>，<code>mybatis</code> 等。另外由于任何人都可以编写自己的 <code>starter</code>，那么为了区分官方的 <code>starter</code> 和个人的 <code>starter</code>，通常在命名上面会有一个规范。所以 <code>SpringBoot</code> 官方提出，第三方在建立自己的 <code>Starter</code> 的时候命名规则统一用<code>xxx-spring-boot-starter</code>，而官方提供的 <code>Starter</code> 统一命名方式为<code>spring-boot-starter-xxx</code>。</p><p>通过我们前面的文章，我们知道自动装配首先要有一个配置类，其次还要有 <code>spring.factories</code> 文件，所以这两步是必不可少的。接下来我们就实操一下。</p><h2 id="1-编写配置类"><a href="#1-编写配置类" class="headerlink" title="1.编写配置类"></a>1.编写配置类</h2><p>编写配置类首先要添加一个自动装配的依赖，然后再编写对应的配置类和业务实现类，在 <code>pom</code> 中添加如下依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;      &lt;version&gt;2.7.1&lt;/version&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1装配类"><a href="#1-1装配类" class="headerlink" title="1.1装配类"></a>1.1装配类</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.hash.starter.config;import com.example.hash.starter.service.MyHashTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@ConditionalOnClass({MyHashTemplate.class})@EnableConfigurationProperties(MyHashProperties.class)public class MyHashAutoConfiguration {  @Autowired  MyHashProperties myHashProperties;  @Bean  @ConditionalOnMissingBean(MyHashTemplate.class)  public MyHashTemplate myJsonService() {    MyHashTemplate myHashTemplate = new MyHashTemplate();    myHashTemplate.setPrefix(myHashProperties.getHashPre());    return myHashTemplate;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2属性类"><a href="#1-2属性类" class="headerlink" title="1.2属性类"></a>1.2属性类</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.hash.starter.config;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = "ziyou.hash")public class MyHashProperties {  private String hashPre;  public String getHashPre() {    return hashPre;  }  public void setHashPre(String hashPre) {    this.hashPre = hashPre;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3业务实现类"><a href="#1-3业务实现类" class="headerlink" title="1.3业务实现类"></a>1.3业务实现类</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.hash.starter.service;import javax.xml.bind.DatatypeConverter;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MyHashTemplate {  private String prefix;  public String myHash(String origin) {    if (null == origin || origin.length() == 0) {      return null;    }    try {      MessageDigest md = MessageDigest.getInstance("MD5");      md.update(origin.getBytes());      byte[] digest = md.digest();      return this.prefix + ":" + DatatypeConverter.printHexBinary(digest).toUpperCase();    } catch (NoSuchAlgorithmException e) {      throw new RuntimeException(e);    }  }  public void setPrefix(String prefix) {    this.prefix = prefix;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单说明一下上面三个类都是干什么的，<code>MyHashTemplate</code> 该类是实际业务需要注入的类，用来对入参进行 <code>MD5</code> 摘要，然后返回一个拼接了前缀的字符串给业务。这个前缀是通过 <code>application.properties</code> 中配置 <code>ziyou.hash.hashPre=JavaGeekTech666</code> 配置后传递过来的。<code>MyHashProperties</code> 是接受属性值的类，<code>MyHashAutoConfiguration</code> 则是自动装配类，这个类会根据条件进行 <code>MyHashTemplate</code> <code>Bean</code> 的初始化，并将前缀进行赋值。</p><h2 id="2-增加配置文件"><a href="#2-增加配置文件" class="headerlink" title="2.增加配置文件"></a>2.增加配置文件</h2><p>最后还需要在 <code>resource</code> 文件中编写一个 <code>META-INF/spring.factories</code> 文件，内容如下</p><pre class="line-numbers language-none"><code class="language-none">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.hash.starter.config.MyHashAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的 <code>Key</code> 是固定写法，后面的 <code>value</code> 就是配置类的全路径引用地址。</p><h2 id="3-在项目中使用"><a href="#3-在项目中使用" class="headerlink" title="3.在项目中使用"></a>3.在项目中使用</h2><p>编写完了 <code>starter</code> 过后，我们再创建一个新的 <code>web</code> 应用，在其中增加我们编写的 <code>starter</code> 来验证是否成功。第一步在 <code>pom</code> 文件中增加依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;   &lt;groupId&gt;com.starter.example&lt;/groupId&gt;   &lt;artifactId&gt;myhash-spring-boot-starter&lt;/artifactId&gt;   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写代码并测试</p><pre class="line-numbers language-none"><code class="language-none">package com.example.demo.controller;import com.example.demo.service.HelloService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController {  @Autowired  private HelloService helloService;  @GetMapping(value = "/hello")  public String hello(@RequestParam("name") String name) {    return helloService.sayHello(name);  }}package com.example.demo.service;import com.example.hash.starter.service.MyHashTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class HelloService {  @Autowired  private MyHashTemplate myHashTemplate;  public String sayHello(String name) {    return myHashTemplate.myHash(name);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>application.properties</code> 文件中增加如下配置</p><pre class="line-numbers language-none"><code class="language-none">ziyou.hash.hashPre=JavaGeekTech<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动项目，我们访问地址 <a href="http://127.0.0.1:8080/hello?name=ziyou">http://127.0.0.1:8080/hello?name=ziyou</a> 可以看到效果如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061107767.jpeg" alt="img"></p><p>至此可以看到，我们自己编写的 <code>starter</code> 已经成功生效了，只不过功能很简单而已，我们完全可以根据自己需要的实际功能来实现一个复杂一点的 <code>starter</code> 来提供开箱即用的效果。</p><p>在一些大公司特别是一些中间件或者中台团队，很多时候都是提供各种工具的 <code>starter</code> 来给业务团队使用的，毕竟很多重复的功能如果每个业务团队都自己开发的话，完全是浪费资源，通过中台团队统一封装 <code>starter</code>，让各个业务团队拿来就用快速搭建业务即可。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 自动装配原理</title>
      <link href="/2022/09/06/spring-boot-zi-dong-zhuang-pei-yuan-li/"/>
      <url>/2022/09/06/spring-boot-zi-dong-zhuang-pei-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>首先，先看SpringBoot的主配置类：</p><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplicationpublic class StartEurekaApplication{    public static void main(String[] args)    {        SpringApplication.run(StartEurekaApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点进@SpringBootApplication来看，发现@SpringBootApplication是一个组合注解。</p><pre class="line-numbers language-none"><code class="language-none">@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = {      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })public @interface SpringBootApplication {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们先来看 @SpringBootConfiguration：</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Configurationpublic @interface SpringBootConfiguration {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这个注解除了元注解以外，就只有一个@Configuration，那也就是说这个注解相当于@Configuration，所以这两个注解作用是一样的，它让我们能够去注册一些额外的Bean，并且导入一些额外的配置。</p><p>那@Configuration还有一个作用就是把该类变成一个配置类，不需要额外的XML进行配置。所以@SpringBootConfiguration就相当于@Configuration。进入@Configuration，发现@Configuration核心是@Component，说明Spring的配置类也是Spring的一个组件。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Componentpublic @interface Configuration {    @AliasFor(        annotation = Component.class    )    String value() default "";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续来看下一个@EnableAutoConfiguration,这个注解是开启自动配置的功能。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@AutoConfigurationPackage@Import({AutoConfigurationImportSelector.class})public @interface EnableAutoConfiguration {    String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";    Class&lt;?&gt;[] exclude() default {};    String[] excludeName() default {};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到它是由 @AutoConfigurationPackage，@Import(EnableAutoConfigurationImportSelector.class)这两个而组成的，我们先说@AutoConfigurationPackage，他是说：让包中的类以及子包中的类能够被自动扫描到spring容器中。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@Import({Registrar.class})public @interface AutoConfigurationPackage {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用@Import来给Spring容器中导入一个组件 ，这里导入的是Registrar.class。来看下这个Registrar：</p><pre class="line-numbers language-none"><code class="language-none">static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports {        Registrar() {        }        public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {            AutoConfigurationPackages.register(registry, (new AutoConfigurationPackages.PackageImport(metadata)).getPackageName());        }        public Set&lt;Object&gt; determineImports(AnnotationMetadata metadata) {            return Collections.singleton(new AutoConfigurationPackages.PackageImport(metadata));        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是通过以上这个方法获取扫描的包路径，可以debug查看具体的值：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055223.png" alt="img">那metadata是什么呢，可以看到是标注在@SpringBootApplication注解上的DemosbApplication，也就是我们的主配置类Application：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055458.png" alt="img">其实就是将主配置类（即@SpringBootApplication标注的类）的所在包及子包里面所有组件扫描加载到Spring容器。因此我们要把DemoApplication放在项目的最高级中（最外层目录)。</p><p>看看注解@Import(AutoConfigurationImportSelector.class)，@Import注解就是给Spring容器中导入一些组件，这里传入了一个组件的选择器:AutoConfigurationImportSelector。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055688.png" alt="img">可以从图中看出AutoConfigurationImportSelector 继承了 DeferredImportSelector 继承了 ImportSelector，ImportSelector有一个方法为：selectImports。将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中。</p><pre class="line-numbers language-none"><code class="language-none">public String[] selectImports(AnnotationMetadata annotationMetadata) {    if (!this.isEnabled(annotationMetadata)) {        return NO_IMPORTS;    } else {        AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry =         this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);        return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055858.png" alt="img">有了自动配置类，免去了我们手动编写配置注入功能组件等的工作。那是如何获取到这些配置类的呢，看看下面这个方法：</p><pre class="line-numbers language-none"><code class="language-none">protected AutoConfigurationImportSelector.AutoConfigurationEntry   getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {    if (!this.isEnabled(annotationMetadata)) {        return EMPTY_ENTRY;    } else {        AnnotationAttributes attributes = this.getAttributes(annotationMetadata);        List&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);        configurations = this.removeDuplicates(configurations);        Set&lt;String&gt; exclusions = this.getExclusions(annotationMetadata, attributes);        this.checkExcludedClasses(configurations, exclusions);        configurations.removeAll(exclusions);        configurations = this.filter(configurations, autoConfigurationMetadata);        this.fireAutoConfigurationImportEvents(configurations, exclusions);        return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到getCandidateConfigurations()这个方法，他的作用就是引入系统已经加载好的一些类，到底是那些类呢：</p><pre class="line-numbers language-none"><code class="language-none">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());    Assert.notEmpty(configurations,     "No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.");    return configurations;}public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) {    String factoryClassName = factoryClass.getName();    return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会从META-INF/spring.factories中获取资源，然后通过Properties加载资源：</p><pre class="line-numbers language-none"><code class="language-none">private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);    if (result != null) {        return result;    } else {        try {            Enumeration&lt;URL&gt; urls = classLoader !=           null ? classLoader.getResources("META-INF/spring.factories") : ClassLoader.getSystemResources("META-INF/spring.factories");            LinkedMultiValueMap result = new LinkedMultiValueMap();            while(urls.hasMoreElements()) {                URL url = (URL)urls.nextElement();                UrlResource resource = new UrlResource(url);                Properties properties = PropertiesLoaderUtils.loadProperties(resource);                Iterator var6 = properties.entrySet().iterator();                while(var6.hasNext()) {                    Map.Entry&lt;?, ?&gt; entry = (Map.Entry)var6.next();                    String factoryClassName = ((String)entry.getKey()).trim();                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());                    int var10 = var9.length;                    for(int var11 = 0; var11 &lt; var10; ++var11) {                        String factoryName = var9[var11];                        result.add(factoryClassName, factoryName.trim());                    }                }            }            cache.put(classLoader, result);            return result;        } catch (IOException var13) {            throw new IllegalArgumentException("Unable to load factories from location [META-INF/spring.factories]", var13);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以知道SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作。以前我们需要自己配置的东西，自动配置类都帮我们完成了。如下图可以发现Spring常见的一些类已经自动导入。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055446.png" alt="img">接下来看@ComponentScan注解，@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })，这个注解就是扫描包，然后放入spring容器。</p><pre class="line-numbers language-none"><code class="language-none">@ComponentScan(excludeFilters = {  @Filter(type = FilterType.CUSTOM,classes = {TypeExcludeFilter.class}),   @Filter(type = FilterType.CUSTOM,classes = {AutoConfigurationExcludeFilter.class})})public @interface SpringBootApplication {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>总结下@SpringbootApplication：就是说，他已经把很多东西准备好，具体是否使用取决于我们的程序或者说配置。</p><p>接下来继续看run方法：</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) {        SpringApplication.run(Application.class, args);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来看下在执行run方法到底有没有用到哪些自动配置的东西，我们点进run：</p><pre class="line-numbers language-none"><code class="language-none">public ConfigurableApplicationContext run(String... args) {    //计时器    StopWatch stopWatch = new StopWatch();    stopWatch.start();    ConfigurableApplicationContext context = null;    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList();    this.configureHeadlessProperty();    //监听器    SpringApplicationRunListeners listeners = this.getRunListeners(args);    listeners.starting();    Collection exceptionReporters;    try {        ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);        ConfigurableEnvironment environment = this.prepareEnvironment(listeners, applicationArguments);        this.configureIgnoreBeanInfo(environment);        Banner printedBanner = this.printBanner(environment);        //准备上下文        context = this.createApplicationContext();        exceptionReporters = this.getSpringFactoriesInstances(SpringBootExceptionReporter.class,                       new Class[]{ConfigurableApplicationContext.class}, context);        //预刷新context        this.prepareContext(context, environment, listeners, applicationArguments, printedBanner);        //刷新context        this.refreshContext(context);        //刷新之后的context        this.afterRefresh(context, applicationArguments);        stopWatch.stop();        if (this.logStartupInfo) {            (new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), stopWatch);        }        listeners.started(context);        this.callRunners(context, applicationArguments);    } catch (Throwable var10) {        this.handleRunFailure(context, var10, exceptionReporters, listeners);        throw new IllegalStateException(var10);    }    try {        listeners.running(context);        return context;    } catch (Throwable var9) {        this.handleRunFailure(context, var9, exceptionReporters, (SpringApplicationRunListeners)null);        throw new IllegalStateException(var9);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们关注的就是 refreshContext(context); 刷新context，我们点进来看。</p><pre class="line-numbers language-none"><code class="language-none">private void refreshContext(ConfigurableApplicationContext context) {   refresh(context);   if (this.registerShutdownHook) {      try {         context.registerShutdownHook();      }      catch (AccessControlException ex) {         // Not allowed in some environments.      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们继续点进refresh(context);</p><pre class="line-numbers language-none"><code class="language-none">protected void refresh(ApplicationContext applicationContext) {   Assert.isInstanceOf(AbstractApplicationContext.class, applicationContext);   ((AbstractApplicationContext) applicationContext).refresh();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>他会调用 ((AbstractApplicationContext) applicationContext).refresh();方法，我们点进来看：</p><pre class="line-numbers language-none"><code class="language-none">public void refresh() throws BeansException, IllegalStateException {   synchronized (this.startupShutdownMonitor) {      // Prepare this context for refreshing.      prepareRefresh();      // Tell the subclass to refresh the internal bean factory.      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();      // Prepare the bean factory for use in this context.      prepareBeanFactory(beanFactory);      try {         // Allows post-processing of the bean factory in context subclasses.         postProcessBeanFactory(beanFactory);         // Invoke factory processors registered as beans in the context.         invokeBeanFactoryPostProcessors(beanFactory);         // Register bean processors that intercept bean creation.         registerBeanPostProcessors(beanFactory);         // Initialize message source for this context.         initMessageSource();         // Initialize event multicaster for this context.         initApplicationEventMulticaster();         // Initialize other special beans in specific context subclasses.         onRefresh();         // Check for listener beans and register them.         registerListeners();         // Instantiate all remaining (non-lazy-init) singletons.         finishBeanFactoryInitialization(beanFactory);         // Last step: publish corresponding event.         finishRefresh();      }catch (BeansException ex) {         if (logger.isWarnEnabled()) {            logger.warn("Exception encountered during context initialization - " +                  "cancelling refresh attempt: " + ex);         }         // Destroy already created singletons to avoid dangling resources.         destroyBeans();         // Reset 'active' flag.         cancelRefresh(ex);         // Propagate exception to caller.         throw ex;      }finally {         // Reset common introspection caches in Spring's core, since we         // might not ever need metadata for singleton beans anymore...         resetCommonCaches();      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可知，就是一个spring的bean的加载过程。继续来看一个方法叫做 onRefresh()：</p><pre class="line-numbers language-none"><code class="language-none">protected void onRefresh() throws BeansException {   // For subclasses: do nothing by default.}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>他在这里并没有直接实现，但是我们找他的具体实现：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061055771.png" alt="img">比如Tomcat跟web有关，我们可以看到有个ServletWebServerApplicationContext：</p><pre class="line-numbers language-none"><code class="language-none">@Overrideprotected void onRefresh() {   super.onRefresh();   try {      createWebServer();   }   catch (Throwable ex) {      throw new ApplicationContextException("Unable to start web server", ex);   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有一个createWebServer();方法他是创建web容器的，而Tomcat不就是web容器，那是如何创建的呢，我们继续看：</p><pre class="line-numbers language-none"><code class="language-none">private void createWebServer() {   WebServer webServer = this.webServer;   ServletContext servletContext = getServletContext();   if (webServer == null &amp;&amp; servletContext == null) {      ServletWebServerFactory factory = getWebServerFactory();      this.webServer = factory.getWebServer(getSelfInitializer());   }   else if (servletContext != null) {      try {         getSelfInitializer().onStartup(servletContext);      }      catch (ServletException ex) {         throw new ApplicationContextException("Cannot initialize servlet context",               ex);      }   }   initPropertySources();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>factory.getWebServer(getSelfInitializer());他是通过工厂的方式创建的。</p><pre class="line-numbers language-none"><code class="language-none">public interface ServletWebServerFactory {   WebServer getWebServer(ServletContextInitializer... initializers);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到 它是一个接口，为什么会是接口。因为我们不止是Tomcat一种web容器。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061056038.png" alt="img"></p><p>我们看到还有Jetty，那我们来看TomcatServletWebServerFactory：</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic WebServer getWebServer(ServletContextInitializer... initializers) {   Tomcat tomcat = new Tomcat();   File baseDir = (this.baseDirectory != null) ? this.baseDirectory         : createTempDir("tomcat");   tomcat.setBaseDir(baseDir.getAbsolutePath());   Connector connector = new Connector(this.protocol);   tomcat.getService().addConnector(connector);   customizeConnector(connector);   tomcat.setConnector(connector);   tomcat.getHost().setAutoDeploy(false);   configureEngine(tomcat.getEngine());   for (Connector additionalConnector : this.additionalTomcatConnectors) {      tomcat.getService().addConnector(additionalConnector);   }   prepareContext(tomcat.getHost(), initializers);   return getTomcatWebServer(tomcat);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那这块代码，就是我们要寻找的内置Tomcat，在这个过程当中，我们可以看到创建Tomcat的一个流程。</p><p>如果不明白的话， 我们在用另一种方式来理解下，大家要应该都知道starter举点例子。</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先自定义一个starter。详细定义starter的步骤参考</p><pre class="line-numbers language-none"><code class="language-none">&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.1.4.RELEASE&lt;/version&gt;    &lt;relativePath/&gt;&lt;/parent&gt;&lt;groupId&gt;com.demo&lt;/groupId&gt;&lt;artifactId&gt;gw-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先来看maven配置写入版本号，如果自定义一个starter的话必须依赖spring-boot-autoconfigure这个包,我们先看下项目目录。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209061056702.png" alt="img">img</p><pre class="line-numbers language-none"><code class="language-none">public class GwServiceImpl  implements GwService{    @Autowired    GwProperties properties;    @Override    public void Hello()    {        String name=properties.getName();        System.out.println(name+"说:你们好啊");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们做的就是通过配置文件来定制name这个是具体实现。</p><pre class="line-numbers language-none"><code class="language-none">@Component@ConfigurationProperties(prefix = "spring.gwname")public class GwProperties {    String name="Beaumon";    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类可以通过@ConfigurationProperties读取配置文件。</p><pre class="line-numbers language-none"><code class="language-none">@Configuration@ConditionalOnClass(GwService.class)  //扫描类@EnableConfigurationProperties(GwProperties.class) //让配置类生效public class GwAutoConfiguration {    /**    * 功能描述 托管给spring    * @author Beaumon    * @return    */    @Bean    @ConditionalOnMissingBean    public GwService gwService()    {        return new GwServiceImpl();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个为配置类，为什么这么写因为，spring-boot的starter都是这么写的，我们可以参照他仿写starter，以达到自动配置的目的，然后我们在通过spring.factories也来进行配置。</p><pre class="line-numbers language-none"><code class="language-none">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.gw.GwAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后这样一个简单的starter就完成了，然后可以进行maven的打包，在其他项目引入就可以使用。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用教程</title>
      <link href="/2022/09/03/typora-shi-yong-jiao-cheng/"/>
      <url>/2022/09/03/typora-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora使用教程"><a href="#Typora使用教程" class="headerlink" title="Typora使用教程"></a>Typora使用教程</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>一次偶然的机会，让我接触到了 .md 文档，进而开始摸索，并意外结识了 Typora 这个编辑器。</p><blockquote><p>百度解释：Typora 是一款由 Abner Lee 开发的轻量级 Markdown 编辑器，与其他 Markdown 编辑器不同的是，Typora 没有采用源代码和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式.</p></blockquote><p>也确实如此。Typora 是一款轻便简洁的 Markdown 编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写 Markdown 就像是写Word文档一样流畅自如。个人认为是一款很好用的 MarkDown 编辑器，特来分享给大家❤️</p><h3 id="1-1MarkDown"><a href="#1-1MarkDown" class="headerlink" title="1.1MarkDown"></a>1.1MarkDown</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Markdown 是一种轻量级标记语言，创始人为 John Gruber。它允许人们「使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档」。</p></blockquote><h3 id="1-2为什么要用MarkDown"><a href="#1-2为什么要用MarkDown" class="headerlink" title="1.2为什么要用MarkDown"></a>1.2为什么要用MarkDown</h3><p>对于我而言，我选择MarkDown的原因如下：</p><ol><li><p>回归到内容本身，注重文章本身的结构，而不是样式</p></li><li><ul><li>不需要考虑字体大小、颜色等，因为 Markdown 中字体样式都与结构有关，无法手动设置</li></ul></li><li><p>MarkDown的语法简单，记住几个常用的就可以释放鼠标了</p></li><li><ul><li>比如，我想要将 “这是个标题” 设置成二级标题，只需要在标题前添加<code>##</code>+空格即可实现，而不需要用鼠标先选中 “这是个标题”，然后在设置成二级标题</li></ul></li><li><p>当前许多网站都支持用 Markdown 来撰写文档</p></li><li><ul><li>如 博客园、CSDN、简书、语雀 等，有了这么多网站的支持，你可以随时随地上传本地 MarkDown 文件到博客中</li></ul></li></ol><h2 id="2-MarkDown-基本语法"><a href="#2-MarkDown-基本语法" class="headerlink" title="2.MarkDown 基本语法"></a>2.MarkDown 基本语法</h2><h3 id="2-1标题"><a href="#2-1标题" class="headerlink" title="2.1标题"></a>2.1标题</h3><p>语法格式：<code>#+空格+标题</code>，一个<code>#</code>是一级标题，两个<code>##</code>是两级标题，以此类推，支持六级标题</p><h3 id="2-2字体"><a href="#2-2字体" class="headerlink" title="2.2字体"></a>2.2字体</h3><ul><li><p><strong>加粗</strong>语法格式：<code>**加粗**</code></p></li><li><p><em>斜体</em>语法格式：<code>*斜体*</code></p></li><li><p><em><strong>斜体加粗</strong></em>语法格式：``<em><strong>斜体加粗</strong></em>`</p></li><li><p>删除线 语法格式：<code>~~删除线~~</code></p></li><li><p>高亮</p><p>语法格式：<code>==高亮==</code></p></li></ul><h3 id="2-3引用"><a href="#2-3引用" class="headerlink" title="2.3引用"></a>2.3引用</h3><p>语法格式：<code>&gt;+引用文字</code></p><blockquote><p>我是引用文字</p></blockquote><p>引用也可以嵌套：</p><blockquote><blockquote><p>如加两个<code>&gt;&gt;</code></p><blockquote><p>三个<code>&gt;&gt;&gt;</code></p></blockquote></blockquote></blockquote><p>支持无线套娃~~</p><h3 id="2-4分割线"><a href="#2-4分割线" class="headerlink" title="2.4分割线"></a>2.4分割线</h3><p>语法格式：三个或者三个以上的 - 或者 * 都可以，如<code>***</code></p><h3 id="2-5图片"><a href="#2-5图片" class="headerlink" title="2.5图片"></a>2.5图片</h3><p>详细的图片引用以及图床配置请参考<a href="https://beaumon.tk/2022/08/25/hexo-tu-pian-pei-zhi/">hexo图片配置</a> </p><p>这里只介绍一下Typora默认的引入方式。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">![alt](图片地址 ''title'')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>alt 指的是当图片链接失效时显示的提示文字，可加可不加 title是图片的标题，当鼠标移到图片上时显示的内容，可加可不加</p></blockquote><h3 id="2-6超链接"><a href="#2-6超链接" class="headerlink" title="2.6超链接"></a>2.6超链接</h3><p>语法格式：<code>[超链接名](超链接地址)</code></p><h3 id="2-7列表"><a href="#2-7列表" class="headerlink" title="2.7列表"></a>2.7列表</h3><ul><li>无序列表</li></ul><p>语法格式：无序列表用 - + * 任何一种都可以，如<code>+ 我是无序列表</code></p><blockquote><p>加号和内容之间需要放置一个空格</p></blockquote><ul><li>有序列表</li></ul><p>语法格式：<code>数字+点+空格+内容</code>，如<code>1. 我是有序列表</code></p><ul><li>子列表</li></ul><p>在子列表前按下tab键即可构成子列表。</p><h3 id="2-8表格"><a href="#2-8表格" class="headerlink" title="2.8表格"></a>2.8表格</h3><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">|左对齐|居中对齐|右对齐||:----|:----:|---:||左|中|右|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">左</td><td align="center">中</td><td align="right">右</td></tr></tbody></table><blockquote><p>第二行分割表头和内容，并声明内容的对齐格式。一般而言，不这么用，感觉太费劲了，下面再介绍快捷键。</p></blockquote><h3 id="2-9代码"><a href="#2-9代码" class="headerlink" title="2.9代码"></a>2.9代码</h3><ul><li>行内代码</li></ul><p>语法格式：用一个反引号包起来 <code>代码内容</code>，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</p><ul><li>多行代码</li></ul><p>语法格式：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><blockquote><p>``` 语言 代码内容 ```</p><p>语言：C、C++、JAVA 等</p></blockquote><ul><li>流程图</li></ul><p>正因为Typora支持mermaid语言,所以使用只需要插入代码块，把语言调成mermaid即可流程图。</p><p>官方介绍地址：<a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=a-hexagon-node">https://mermaid-js.github.io/mermaid/#/flowchart?id=a-hexagon-node</a></p><blockquote><p>Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901755.png" alt="image-20220903085104557"></p><ul><li>视频</li></ul><p>同理，点击嵌入代码，可以通过video|iframe标签引入视频。</p><pre class="line-numbers language-none"><code class="language-none">栗子：&lt;iframe src="//player.bilibili.com/player.html?aid=762955321&amp;bvid=BV1z64y1h74z&amp;cid=406257730&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>网页片段</li></ul><p>通过嵌入codepen，你甚至可以在typora里玩贪吃蛇！！！</p><pre class="line-numbers language-none"><code class="language-none">&lt;p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="moPsych" data-slug-hash="KKgQxWb" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Snake Game"&gt;  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/moPsych/pen/KKgQxWb"&gt;  Snake Game&lt;/a&gt; by moPsych (&lt;a href="https://codepen.io/moPsych"&gt;@moPsych&lt;/a&gt;)  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;script async src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PDF</li></ul><p>当然，区区PDF也不在话下，如果是本地文件，直接拖入即可。</p><p>如果想导入云端PDF，需要通过 <code>Google Drive Viewer</code> 来显示：</p><pre class="line-numbers language-none"><code class="language-none">&lt;iframe src="https://docs.google.com/gview?embedded=true&amp;url=http://infolab.stanford.edu/pub/papers/google.pdf" style="width:800px; height:500px;" frameborder="0"&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只需把 <code>url=http://infolab.stanford.edu/pub/papers/google.pdf</code> 替换成自己的PDF链接即可，例如 GitHub 上的PDF也可以：</p><pre class="line-numbers language-none"><code class="language-none">&lt;iframe src="https://docs.google.com/gview?embedded=true&amp;url=https://raw.githubusercontent.com/Theigrams/Mathematical-optimization/d304e27f613352b5d8240010cc58ddb4360ac48d/%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A/%E6%9C%80%E4%BC%98%E5%8C%96%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A.pdf" style="width:800px; height:500px;" frameborder="0"&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现了一个新的本地嵌入 PDF 的方法，把下面 <code>src</code> 中的 PDF 路径换成自己的即可。</p><pre class="line-numbers language-none"><code class="language-none">&lt;embed id="pdfPlayer" src="C:\Users\question.pdf" type="application/pdf" width="100%" height="600" &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-高级技巧"><a href="#3-高级技巧" class="headerlink" title="3.高级技巧"></a>3.高级技巧</h2><h3 id="3-1转义字符"><a href="#3-1转义字符" class="headerlink" title="3.1转义字符"></a>3.1转义字符</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>行内公式（inline）用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li>块间公式（display）用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ul><pre class="line-numbers language-none"><code class="language-none">$$块间公式$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>支持HTML</li></ul><h3 id="3-2在Typora中书写MarkDown"><a href="#3-2在Typora中书写MarkDown" class="headerlink" title="3.2在Typora中书写MarkDown"></a>3.2在Typora中书写MarkDown</h3><table><thead><tr><th align="left">Markdown语法</th><th align="center">Typora快捷键</th><th></th></tr></thead><tbody><tr><td align="left">一级标题</td><td align="center"><code>#</code></td><td>ctrl+1</td></tr><tr><td align="left">二级标题</td><td align="center"><code>##</code></td><td>ctrl+2</td></tr><tr><td align="left">三级标题</td><td align="center"><code>###</code></td><td>ctrl+3</td></tr><tr><td align="left">四级标题</td><td align="center"><code>####</code></td><td>ctrl+4</td></tr><tr><td align="left">五级标题</td><td align="center"><code>#####</code></td><td>ctrl+5</td></tr><tr><td align="left">六级标题</td><td align="center"><code>######</code></td><td>ctrl+6</td></tr><tr><td align="left">加粗</td><td align="center"><code>**粗体**</code></td><td>ctrl+B</td></tr><tr><td align="left">斜体</td><td align="center"><code>*斜体*</code></td><td>ctrl+I</td></tr><tr><td align="left">下划线</td><td align="center"><code>&lt;u&gt;下划线&lt;/u&gt;</code></td><td>ctrl+U</td></tr><tr><td align="left">删除线</td><td align="center"><code>~~删除线~~</code></td><td>alt+shift+5</td></tr><tr><td align="left">创建表格</td><td align="center"></td><td>ctrl+T</td></tr><tr><td align="left">创建超链接</td><td align="center"><code>[超链接名](超链接地址)</code></td><td>ctrl+K</td></tr><tr><td align="left">插入图片</td><td align="center"><code>![alt](图片地址)</code></td><td>ctrl+shift+I</td></tr><tr><td align="left">插入公式块</td><td align="center"><code>$$公式$$</code></td><td>ctrl+shift+M</td></tr><tr><td align="left">添加引用</td><td align="center"><code>&gt;内容</code></td><td>ctrl+shift+Q</td></tr><tr><td align="left">无序列表</td><td align="center"><code>+ 内容</code></td><td>ctrl+shift+]</td></tr><tr><td align="left">有序列表</td><td align="center"><code>1. 内容</code></td><td>ctrl+shift+[</td></tr><tr><td align="left">粘贴为纯文本</td><td align="center"></td><td>ctrl+shift+V</td></tr><tr><td align="left">返回Typora顶部</td><td align="center"></td><td>ctrl+Home</td></tr><tr><td align="left">返回Typora底部</td><td align="center"></td><td>ctrl+End</td></tr><tr><td align="left">启用/退出 源代码模式</td><td align="center"></td><td>ctrl+/</td></tr><tr><td align="left">搜索</td><td align="center"></td><td>ctrl+F</td></tr><tr><td align="left">搜索并替换</td><td align="center"></td><td>ctrl+H</td></tr><tr><td align="left">选中光标所在行</td><td align="center"></td><td>ctrl+L</td></tr><tr><td align="left">生成文档目录</td><td align="center"></td><td><code>[toc]</code>+Enter</td></tr><tr><td align="left">快速打开最新文档</td><td align="center"></td><td>ctrl+P</td></tr></tbody></table><blockquote><p>TOC从文档中提取所有标题，其内容将自动更新。</p></blockquote><h4 id="3-2-1图片插入"><a href="#3-2-1图片插入" class="headerlink" title="3.2.1图片插入"></a>3.2.1图片插入</h4><p>插入图片除了使用插入语句外，还可以：</p><ul><li>ctrl+C/V 将网络图片、剪贴板图片复制到文档中</li><li>拖动本地图片到文档中</li></ul><p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它添加<code>alt</code>。</p><h4 id="3-2-2打字机模式和专注模式"><a href="#3-2-2打字机模式和专注模式" class="headerlink" title="3.2.2打字机模式和专注模式"></a>3.2.2打字机模式和专注模式</h4><p>通过 视图→→打字机模式/专注模式 开启或关闭：</p><ul><li>「打字机模式」使得你所编辑的那一行永远处于屏幕正中央。</li><li>「专注模式」使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</li></ul><h4 id="3-2-3空格与换行"><a href="#3-2-3空格与换行" class="headerlink" title="3.2.3空格与换行"></a>3.2.3空格与换行</h4><ul><li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li></ul><blockquote><p>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的，且换行分为软换行和硬换行。</p></blockquote><ul><li><strong>软换行</strong>：在 Typora 中，你可以通过shift+enter完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li><li><strong>硬换行：</strong>你可以通过 空格+ 空格+ shift+enter完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过enter完成一次换段。Typora 会自动帮你完成两次shift+enter的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li><li><strong>Windows 风格（CR+LF）与 Unix 风格（LF）的换行符：</strong>CR表示回车<code>\r</code>，即回到一行的开头，而LF表示换行<code>\n</code>，即另起一行。所以 Windows 风格的换行符本质是「回车+换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix/Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。你可以在「文件 - 偏好设置 - 编辑器 - 默认换行符」中对此进行切换。</li></ul><h4 id="3-2-4支持emoji-表情"><a href="#3-2-4支持emoji-表情" class="headerlink" title="3.2.4支持emoji 表情"></a>3.2.4支持emoji 表情</h4><p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示。</p><h2 id="4-Typora主题"><a href="#4-Typora主题" class="headerlink" title="4.Typora主题"></a>4.Typora主题</h2><ol><li><p>使用 Typora 内置主题：点击状态栏「主题」，选择喜欢的主题样式</p></li><li><p>自定义主题：通过「文件-偏好设置-外观-打开主题文件夹」打开Typora的主题文件夹<code>Typora\themes</code>，将自定义的 CSS 文件导入到 <code>themes</code>文件夹中并重启Typora，在「主题」中选择你导入的主题样式即可</p><p>自定义的主题样式：</p></li></ol><ul><li>mo主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901591.png" alt="img"></p><ul><li>mo-dark主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901404.png" alt="img"></p><ul><li>pie主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901056.png" alt="img"></p><ul><li>pie-dark主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901228.png" alt="img"></p><ul><li>melephant主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901976.png" alt="img"></p><ul><li>melephant-2主题</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209030901682.png" alt="img"></p><p>​     大家可以根据自己的喜好找寻更多好看的主题。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MonogoDB入门基础教程</title>
      <link href="/2022/09/02/monogodb-ru-men/"/>
      <url>/2022/09/02/monogodb-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB入门基础教程"><a href="#MongoDB入门基础教程" class="headerlink" title="MongoDB入门基础教程"></a>MongoDB入门基础教程</h1><p>本文主要围绕 MongoDB 的使用，从环境配置、数据库使用，再到客户端工具选用，做了简单的介绍，可能有的地方总结的不到位，还望指正。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>在介绍 MongoDB 之前，我先介绍一下业务开发的时候遇到的痛点，以便大家对它有一个更加清晰的认识！</p><p>最近在用数据库存储数据的时候发现这么一个坑，例如从消息队列中监听消息的时候，原来的做法是将监听的消息json数据存储在数据库，以便好对异常消息数据进行追溯，消息内容使用<code>text</code>类型存储，起初因为数据内容很短，没啥毛病，但是当随着业务的扩展，收到的消息内容越来越长，最后发现数据库中的<code>text</code>字段类型无法很好的支持查询，于是在这个时候，就开始考虑采用更加合适的数据库来存储这种消息数据！在经过一番讨论之后，对于这种 json 类型的消息数据的存储，大家一致认为采用 MongoDB 是最佳的选择！</p><p>据官方介绍，MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富、最像关系数据库的一款高性能的 NoSQL 数据库。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(<code>key=&gt;value</code>)对组成。其中的文档类似于 JSON 对象。字段值可以包含其他文档、数组及文档数组，数据结构的支持非常灵活！的确，在使用的过程当中，正如所介绍的，数据的存储和查询，性能极快，而且很好的满足我们的需求！</p><p>话不多说，下面我们就一起来了解一下，这款数据库应该如何使用！</p><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h2><p>在学习它之前，我们需要先搭建好环境，MongoDB 的安装也非常简单！</p><h3 id="2-1、Windows-平台"><a href="#2-1、Windows-平台" class="headerlink" title="2.1、Windows 平台"></a>2.1、Windows 平台</h3><p>如果你是 Windows 平台，MongoDB 提供了可用于 32 位和 64 位系统的预编译二进制，安装基本是傻瓜式的操作，登录 MongoDB 官网并且下载安装包，然后一步一步的操作即可！</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021039727.jpeg" alt="img"></p><h3 id="2-2、Linux-平台"><a href="#2-2、Linux-平台" class="headerlink" title="2.2、Linux 平台"></a>2.2、Linux 平台</h3><p>生产环境基本都是 Linux 平台，为了和生产保持一致，小编采用的服务器是<code>CentOS7</code>，安装过程也比较简单！</p><ul><li>创建资源文件</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/yum.repos.d/mongodb-org-4.0.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编辑内容如下</li></ul><pre class="line-numbers language-none"><code class="language-none">[mongodb-org-4.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行以下命令安装 mongodb</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y mongodb-org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成之后，配置<code>mongod.conf</code>允许远程连接</li></ul><pre class="line-numbers language-none"><code class="language-none">#编辑mongod.confvim /etc/mongod.conf#将net:bindIp: 127.0.0.1 改为 0.0.0.0net:   bindIp:0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后启动服务</li></ul><pre class="line-numbers language-none"><code class="language-none">#开启服务systemctl start mongod#关闭服务systemctl stop mongod#重启服务systemctl restart mongod#开机自启systemctl enable mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，环境配置已经完成！</p><h2 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3.数据库操作"></a>3.数据库操作</h2><p>MongoDB 的数据操作，是开发人员接触最频繁的部分，第一次使用的时候，你会发现它和我们传统使用的 sql 脚本命令完全不同，但是又类似，下面我们就一起来深入的了解下！</p><h3 id="3-1进入-MongoDB"><a href="#3-1进入-MongoDB" class="headerlink" title="3.1进入 MongoDB"></a>3.1进入 MongoDB</h3><p>进入 MongoDB 服务很简单，输入如下命令即可进入！</p><pre class="line-numbers language-none"><code class="language-none">mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，在<code>CentOS</code>里面输入命令之后，进入的服务界面如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021039639.jpeg" alt="img"></p><h3 id="3-2创建数据库"><a href="#3-2创建数据库" class="headerlink" title="3.2创建数据库"></a>3.2创建数据库</h3><p>MongoDB 创建数据库的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">use DATABASE_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果数据库不存在，则创建数据库，否则切换到指定数据库</strong>。</p><p>输入如下命令，可以查询数据库列表</p><pre class="line-numbers language-none"><code class="language-none">#查询数据库列表show dbs#命令输出结果：adminconfiglocal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，当前 MongoDB 有三个数据库！</p><p>输入如下命令，可以切换到<code>admin</code>数据库</p><pre class="line-numbers language-none"><code class="language-none">use admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入<code>db</code>命令，还可以查询当前数据库</p><pre class="line-numbers language-none"><code class="language-none">db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3创建用户"><a href="#3-3创建用户" class="headerlink" title="3.3创建用户"></a>3.3创建用户</h3><p>默认的情况下，是没有用户的，也无法操作数据库，因此我们需要创建一个用户，同时给他分配权限！</p><h4 id="3-3-1、创建一个管理员用户"><a href="#3-3-1、创建一个管理员用户" class="headerlink" title="3.3.1、创建一个管理员用户"></a>3.3.1、创建一个管理员用户</h4><p>创建一个用户、密码都是<code>admin</code>的用户，同时给这个用户分配<code>userAdminAnyDatabase</code>角色，指定的数据库为<code>admin</code>！</p><pre class="line-numbers language-none"><code class="language-none">#创建一个admin用户db.createUser({  user: "admin",  pwd: "admin",  roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中字段含义如下：</p><ul><li>user：用户的名字；</li><li>pwd：用户的密码；</li><li>roles：指定用户的角色，可以用一个空数组给新用户设定空角色。</li><li>roles 中的 role：指定角色。</li><li>roles 中的 db：指定的数据库，例如上面中的角色<code>userAdminAnyDatabase</code>，只在 admin 数据库中可用。</li></ul><p>角色在 MongoDB 中，<strong>代表着某个用户是否有权限访问数据库或者操作数据库</strong>，理解这点非常重要！</p><p>MongoDB 角色定义如下：</p><table><thead><tr><th align="center">角色类型</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">admin数据库角色</td><td align="center">readAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的读权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">readWriteAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的读写权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">userAdminAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">dbAdminAnyDatabase</td><td align="center">只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">clusterAdmin</td><td align="center">只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td></tr><tr><td align="center">admin数据库角色</td><td align="center">root</td><td align="center">只在admin数据库中可用，超级账号，超级权限</td></tr><tr><td align="center">数据库管理角色</td><td align="center">dbAdmin</td><td align="center">允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td></tr><tr><td align="center">数据库管理角色</td><td align="center">userAdmin</td><td align="center">允许用户向system.users集合写入，可以在指定数据库里创建、删除和管理用户</td></tr><tr><td align="center">数据库用户角色</td><td align="center">read</td><td align="center">允许用户读取指定数据库</td></tr><tr><td align="center">数据库用户角色</td><td align="center">readWrite</td><td align="center">允许用户读写指定数据库</td></tr></tbody></table><h4 id="3-3-2创建一个不受访问限制的超级用户"><a href="#3-3-2创建一个不受访问限制的超级用户" class="headerlink" title="3.3.2创建一个不受访问限制的超级用户"></a>3.3.2创建一个不受访问限制的超级用户</h4><p>如果你想创建一个不受访问限制的超级用户，赋予<code>root</code>角色即可！</p><pre class="line-numbers language-none"><code class="language-none">#创建超级用户db.createUser(    {        user:"root",        pwd:"root",        roles:["root"]    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3创建一个业务数据库普通用户"><a href="#3-3-3创建一个业务数据库普通用户" class="headerlink" title="3.3.3创建一个业务数据库普通用户"></a>3.3.3创建一个业务数据库普通用户</h4><p>如果你想创建一个业务数据库普通用户，例如只能访问<code>test_db</code>数据库，并且只负责数据的増查改删。</p><pre class="line-numbers language-none"><code class="language-none"># 创建或者切换数据库到test_dbuse test_db# 创建一个test用户，并且只能访问test_db，对表只有读写权限db.createUser({  user: "test",  pwd: "test",  roles: [ { role: "readWrite", db: "test_db" } ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4验证用户是否可以正常登录"><a href="#3-3-4验证用户是否可以正常登录" class="headerlink" title="3.3.4验证用户是否可以正常登录"></a>3.3.4验证用户是否可以正常登录</h4><p>对于刚刚创建的用户，我们怎么验证它是否能正常登录呢？命令也很简单！</p><pre class="line-numbers language-none"><code class="language-none">db.auth("test","test")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果返回是<code>1</code>表示鉴权正常！</p><h4 id="3-3-5查询当前数据库用户信息"><a href="#3-3-5查询当前数据库用户信息" class="headerlink" title="3.3.5查询当前数据库用户信息"></a>3.3.5查询当前数据库用户信息</h4><p>查询创建的用户，命令也很简单！</p><pre class="line-numbers language-none"><code class="language-none"># 查看创建的用户show users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-3-6修改用户密码"><a href="#3-3-6修改用户密码" class="headerlink" title="3.3.6修改用户密码"></a>3.3.6修改用户密码</h4><p>有些时候，我们会忘记密码，可通过如下方式进行修改！</p><pre class="line-numbers language-none"><code class="language-none">#修改用户密码db.changeUserPassword("username", "xxxxx")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-3-7删除用户"><a href="#3-3-7删除用户" class="headerlink" title="3.3.7删除用户"></a>3.3.7删除用户</h4><p>如果某个用户需要停用，可通过如下方式进行删除</p><pre class="line-numbers language-none"><code class="language-none">#切换指定数据库use test_db#删除用户db.dropUser('test')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-8删除数据库"><a href="#3-3-8删除数据库" class="headerlink" title="3.3.8删除数据库"></a>3.3.8删除数据库</h4><p>如果某个数据库需要停用，可通过如下方式进行删除（只有超级管理员有权限删除）</p><pre class="line-numbers language-none"><code class="language-none">#切换指定数据库use test_db#删除数据库db.dropDatabase()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4创建集合"><a href="#3-4创建集合" class="headerlink" title="3.4创建集合"></a>3.4创建集合</h3><p>MongoDB 并无<strong>表</strong>这个概念，而对应的定义叫：<strong>集合</strong>，我们在关系型数据库中看到的<strong>表数据</strong>，在 MongoDB 中被定义为：<strong>文档</strong>，MongoDB 也被很多人成为<strong>文档数据库</strong>！</p><p>在关系型数据库中，表数据是一行一行的存储，但是在 MongoDB 中，可能不是这样，如果你存储的 json 非常复杂，嵌套很深，那么在 MongoDB 中存储的行数，可能非常深，存储的时候类似我们在页面看到的父子表结构！</p><h4 id="3-4-1创建一个集合"><a href="#3-4-1创建一个集合" class="headerlink" title="3.4.1创建一个集合"></a>3.4.1创建一个集合</h4><p>MongoDB 中使用 createCollection() 方法来创建集合。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">db.createCollection(name, options)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li>name: 要创建的集合名称</li><li>options: 可选参数, 指定有关内存大小及索引的选项</li></ul><p>例如，在 test_db 数据库中创建 tb_user 集合：</p><pre class="line-numbers language-none"><code class="language-none"># 切换到test_db数据库use test_db# 创建 tb_user 集合db.createCollection("tb_user")#输出结果{ "ok" : 1 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要查看已有的集合，可以使用<code>show collections</code>命令！</p><pre class="line-numbers language-none"><code class="language-none">show collections<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是带有几个关键参数的<code>createCollection()</code>的用法，下面命令表示：创建固定集合<code>tb_user</code>，整个集合空间大小<code>6142800</code>KB, 文档最大个数为<code>10000</code> 个</p><pre class="line-numbers language-none"><code class="language-none">db.createCollection("tb_user", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 MongoDB 中，很多时候不需要手动创建集合。当你插入一个文档时，MongoDB 会自动创建集合！</p><pre class="line-numbers language-none"><code class="language-none"># 向集合tb_user 插入一条文档数据db.tb_user.insert({"name" : "张三"})#查询集合show collections# 输出结果tb_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-2删除一个集合"><a href="#3-4-2删除一个集合" class="headerlink" title="3.4.2删除一个集合"></a>3.4.2删除一个集合</h4><p>MongoDB 中使用 drop() 方法来删除集合。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.drop()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，删除在 test_db 数据库中 tb_user 集合：</p><pre class="line-numbers language-none"><code class="language-none"># 切换到test_db数据库use test_db# 创建 tb_user 集合db.tb_user.drop()#输出结果true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5、创建文档"><a href="#3-5、创建文档" class="headerlink" title="3.5、创建文档"></a>3.5、创建文档</h3><p>创建文档，类似我们在关系型数据库中，将数据插入到数据库，操作也很简单！</p><h4 id="3-5-1插入文档"><a href="#3-5-1插入文档" class="headerlink" title="3.5.1插入文档"></a>3.5.1插入文档</h4><p>MongoDB 使用 <code>insert()</code> 或 <code>save()</code> 方法向集合中插入文档。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">db.COLLECTION_NAME.insert(document)或db.COLLECTION_NAME.save(document)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>save()</code>：如果<code>_id</code>主键存在则更新数据，如果不存在就插入数据。</li><li><code>insert()</code>：若插入的数据主键已经存在，则会抛异常，提示主键重复，不保存当前数据。</li></ul><p>例如，在<code>test_db</code>数据库的<code>tb_user</code>集合中，插入一条数据</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.insert({    name:"张三",    age:18,    gender:"男",    tags: ['宅男', '技术控', '脱发严重']})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档。</p><p>查看已插入文档，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">#查询tb_user集合中的数据db.tb_user.find()# 输出结果{ "_id" : ObjectId("6022310f6b5e964b0a5916e6"), "name" : "张三", "age" : 18, "gender" : "男", "tags" : [ "宅男", "技术控", "脱发严重" ] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，你还可以通过<code>save()</code>命令进行插入，如果不指定<code>_id</code>字段 <code>save()</code> 方法类似于 <code>insert()</code> 方法。如果指定 <code>_id</code> 字段，则会更新该 <code>_id</code> 的数据。</p><p>例如，将<code>张三</code>年龄更新到<code>30</code>岁！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.save({    _id: ObjectId("6022310f6b5e964b0a5916e6"),    name:"张三",    age:30,    gender:"男",    tags: ['宅男', '技术控', '脱发严重']})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看文档</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.find()# 输出结果{ "_id" : ObjectId("6022310f6b5e964b0a5916e6"), "name" : "张三", "age" : 30, "gender" : "男", "tags" : [ "宅男", "技术控", "脱发严重" ] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-5-2更新文档"><a href="#3-5-2更新文档" class="headerlink" title="3.5.2更新文档"></a>3.5.2更新文档</h4><p>MongoDB 提供了 <code>update()</code> 和 <code>save()</code> 方法来更新集合中的文档。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.update(   &lt;query&gt;,   &lt;update&gt;,   {     upsert: &lt;boolean&gt;,     multi: &lt;boolean&gt;,     writeConcern: &lt;document&gt;   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>query : update的查询条件，类似sql update查询内where后面的。</li><li>update : update的对象和一些更新的操作符（如inc…）等，也可以理解为sql update查询内set后面的</li><li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入</li><li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li><li>writeConcern :可选，抛出异常的级别。</li></ul><p>例如，将<code>张三</code>年龄更新到<code>22</code>岁！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.update({'name':'张三'},{$set:{'age':22}})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询已更新的数据</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.find()# 输出结果{ "_id" : ObjectId("602235216b5e964b0a5916e8"), "name" : "张三", "age" : 22, "gender" : "男", "tags" : [ "宅男", "技术控", "脱发严重" ] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置<code>multi</code>参数为<code>true</code>。</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.update({'name':'张三'},{$set:{'age':22}},{multi:true})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-5-3删除文档"><a href="#3-5-3删除文档" class="headerlink" title="3.5.3删除文档"></a>3.5.3删除文档</h4><p>MongoDB 中的<code>remove()</code>函数是用来移除集合中的数据</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.remove(   &lt;query&gt;,   {     justOne: &lt;boolean&gt;,     writeConcern: &lt;document&gt;   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>query :（可选）删除的文档的条件。</li><li>justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li><li>writeConcern :（可选）抛出异常的级别。</li></ul><p>例如，删除姓名为<code>张三</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.remove({'name':'张三'})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询数据是否被删除</p><pre class="line-numbers language-none"><code class="language-none">db.col.find()#结果为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-5-4查询文档"><a href="#3-5-4查询文档" class="headerlink" title="3.5.4查询文档"></a>3.5.4查询文档</h4><p>MongoDB 查询文档使用 find() 方法。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.find(query, projection)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>query ：可选，使用查询操作符指定查询条件</li><li>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ul><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.col.find().pretty()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先我们插入几条数据，插入结果如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021039417.jpeg" alt="img"></p><p>例如，查询一个性别为<code>男</code>的用户信息</p><pre class="line-numbers language-none"><code class="language-none">#单个条件查询，类似 sql语句中的 gender = '男'db.tb_user.find({"gender":"男"})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个性别为<code>男</code>，姓名为<code>张三</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">#多条件查询，类似 sql语句中的 gender = '男' and name = '李四'db.tb_user.find({"gender":"男","name":"李四"})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个性别为<code>男</code> 或者 姓名为<code>张三</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">#多条件查询，类似 sql语句中的 gender = '男' or name = '李四'db.tb_user.find({$or:[{"gender":"男"},{"name": "李四"}]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个性别为<code>男</code> 或者 姓名为<code>张三</code>，同时年龄大于<code>30</code>的用户</p><pre class="line-numbers language-none"><code class="language-none">#多条件查询，类似 sql语句中的 age &gt; 30 and ( gender = '男' or name = '李四')db.tb_user.find({"age": {$gt:30}, $or:[{"gender":"男"},{"name": "李四"}]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-4-5分页查询文档"><a href="#3-4-5分页查询文档" class="headerlink" title="3.4.5分页查询文档"></a>3.4.5分页查询文档</h4><p>如果需要分页查询集合数据，可以使用<code>limit()</code>和<code>skip()</code>函数，其中<code>limit()</code>表示读几条数据，<code>skip()</code>表示从第几条数据开始。</p><pre class="line-numbers language-none"><code class="language-none">#从集合中的第三行数据开始，读2条数据返回db.tb_user.find({}).limit(2).skip(3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-5-6文档排序"><a href="#3-5-6文档排序" class="headerlink" title="3.5.6文档排序"></a>3.5.6文档排序</h4><p>和关系型数据库一样，MongoDB 可以使用<code>sort()</code>方法进行排序，通过参数指定排序的字段，并使用 <code>1</code> 和 <code>-1</code> 来指定排序的方式，其中 <code>1</code> 为升序排列，而 <code>-1</code> 是用于降序排列。</p><p>例如，查询<code>tb_user</code>文档，按照<code>age</code>进行升序排序！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.find({}).sort({"age":1})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-6创建索引"><a href="#3-6创建索引" class="headerlink" title="3.6创建索引"></a>3.6创建索引</h3><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB 在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p><p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p><h4 id="3-6-1创建索引"><a href="#3-6-1创建索引" class="headerlink" title="3.6.1创建索引"></a>3.6.1创建索引</h4><p>MongoDB 使用 <code>createIndex()</code> 方法来创建索引，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">db.collection.createIndex(keys, options)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法中 Key 值为你要创建的索引字段，<code>1</code> 为指定按升序创建索引，如果你想按降序来创建索引指定为 <code>-1</code> 即可！</p><p>例如，给<code>tb_user</code>文档中的<code>age</code>创建一个索引！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.createIndex({"age":1})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建索引是一个比较耗时的动作，我们还可以通过参数配置，在后台创建索引。</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.createIndex({"age":1}, {background: true})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过在创建索引时加<code>background:true</code>的选项，让创建工作在后台执行！</p><h4 id="3-6-2查看索引"><a href="#3-6-2查看索引" class="headerlink" title="3.6.2查看索引"></a>3.6.2查看索引</h4><p>MongoDB 提供了<code>getIndexes()</code>方法，可以进行查看索引。</p><p>例如，查询<code>tb_user</code>集合中的索引</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.getIndexes()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-6-3删除索引"><a href="#3-6-3删除索引" class="headerlink" title="3.6.3删除索引"></a>3.6.3删除索引</h4><p>不在需要的索引，我们可以将其删除。删除索引时，可以删除集合中的某一索引，可以删除全部索引。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">db.COLLECTION_NAME.dropIndex("INDEX-NAME")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，删除集合<code>tb_user</code>集合中的<code>age</code>索引：</p><pre class="line-numbers language-none"><code class="language-none">#查询索引db.tb_user.getIndexes()#输出结果[    {        "v" : 2,        "key" : {            "_id" : 1        },        "name" : "_id_",        "ns" : "test_db.tb_user"    },    {        "v" : 2,        "key" : {            "age" : 1        },        "name" : "age_1",        "ns" : "test_db.tb_user"    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除对应的<code>age_1</code>索引！</p><pre class="line-numbers language-none"><code class="language-none">db.tb_user.dropIndex("age_1")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-客户端"><a href="#4-客户端" class="headerlink" title="4.客户端"></a>4.客户端</h2><p>对于任何一款数据库，如果没有可视化界面操作，在开发的时候，可以说极其不方便，下面推荐一款小编经常使用的一款客户端。</p><ul><li>Robo 3T(免费、轻量级) ，可以访问官网获取</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021040062.jpeg" alt="img"></p><ul><li>Studio 3T(全面，收费)，访问官网地址获取</li></ul><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209021040560.jpeg" alt="img"></p><p>其中小编采用的是第二款，整体的体验比<code>Robo 3T</code>要一点，两者功能都比较齐全！</p><p>在使用的时候，可以根据个人喜爱进行选择！</p><h2 id="5-权限控制"><a href="#5-权限控制" class="headerlink" title="5.权限控制"></a>5.权限控制</h2><p>网上发现很多 mongodb 被黑，使大家将目光投向了mongodb 的权限控制。</p><p>其实 mongodb 本身有一套完备的 RBAC 权限控制体系，这次被黑基本都是没有遵照 mongodb 的生产环境部署手册部署的结果。</p><p>我们平时玩一玩 mongodb 习惯了不设置用户名密码，当我们的数据库放到公网时，由于我们也没有设置用户名密码，任何人都可以随便访问，而且由于我们没有开启授权访问，使得任何登录到 mongodb 服务器的用户都拥有最高权限！</p><p>一些居心不良的人发现，就可以把我们的数据拷走，删除我们的数据库，从而勒索赎金！</p><p>再次提醒各位同学，别学会所有的技能，大门还一直开着，还抱怨我方防御塔怎么一直被摧毁！</p><p>以上文<code>CentOS7</code>安装为例，修改<code>/etc/mongod.conf</code>，在<code>security</code>部分添加如下配置，开启授权访问！</p><pre class="line-numbers language-none"><code class="language-none">security:    authorization: enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改完成之后，重启 mongodb 服务</p><pre class="line-numbers language-none"><code class="language-none">#重启服务systemctl restart mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MonogoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MonogoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debug调试</title>
      <link href="/2022/09/01/debug-diao-shi/"/>
      <url>/2022/09/01/debug-diao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA断点调试技巧"><a href="#IDEA断点调试技巧" class="headerlink" title="IDEA断点调试技巧"></a>IDEA断点调试技巧</h1><h2 id="1-问题总结"><a href="#1-问题总结" class="headerlink" title="1. 问题总结"></a>1. 问题总结</h2><blockquote><p>1.怎么开启断点调试?</p></blockquote><blockquote><p>2.调试界面咋那么多按钮？</p><ul><li><ul><li>1.返回断点位置</li><li>2.步过</li><li>3.步入</li><li>4,5.强制步入，步出</li><li>6.回退断点</li><li>7.断点跳到光标处</li><li>8.表达式计算</li><li>9.恢复程序</li><li>10.停止程序</li><li>11.查看所有断点</li><li>12.禁用断点</li><li>13.其他</li></ul></li></ul></blockquote><blockquote><p>竟然有那么多调试断点？</p><ul><li><ul><li>1.方法断点</li><li>2.属性断点</li><li>3.异常断点</li><li>4.终止断点</li><li>5.条件断点</li><li>6.流断点</li><li>7.多线程断点</li><li>8.远程断点</li></ul></li></ul></blockquote><h2 id="2-怎么开启断点调试？"><a href="#2-怎么开启断点调试？" class="headerlink" title="2.怎么开启断点调试？"></a>2.怎么开启断点调试？</h2><p>随着开发的深入，越来越觉得高效的调试方法是多么的重要了，但我们一般上来就是敲一些代码，谁会去静下心来学一些看似没什么用的调试技巧呢？但这恰恰就是新手和老手之间的区别。</p><p>断点调试是很简单的，只需要点击idea上方的小虫子，启动调试即可，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101731.png" alt="img">这当然不是本文的重点，只是开个头。</p><h2 id="3-调试界面咋那么多按钮？"><a href="#3-调试界面咋那么多按钮？" class="headerlink" title="3.调试界面咋那么多按钮？"></a>3.调试界面咋那么多按钮？</h2><p>先来介绍一下界面。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101686.png" alt="img">我给这些区域都标了号，下面来重点介绍。</p><h3 id="3-1返回断点位置"><a href="#3-1返回断点位置" class="headerlink" title="3.1返回断点位置"></a>3.1返回断点位置</h3><p>1号按钮，这个用的不多，如果你从其他地方想要回到断点位置，就按一下即可，如下图所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101716.gif" alt="img"></p><h3 id="3-2步过"><a href="#3-2步过" class="headerlink" title="3.2步过"></a>3.2步过</h3><p>2号按钮，说人话就是一行行的往下执行，不会进入方法里面，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101915.gif" alt="img"></p><h3 id="3-3步入"><a href="#3-3步入" class="headerlink" title="3.3步入"></a>3.3步入</h3><p>3号按钮，可以进入我们自定义的方法，如果是其他类库的方法不会进入，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101559.gif" alt="img"></p><h3 id="3-4强制步入-步出"><a href="#3-4强制步入-步出" class="headerlink" title="3.4强制步入|步出"></a>3.4强制步入|步出</h3><p>4号5号按钮，前者可以进入深层的方法，包括官方的源码，后者就是从对应的方法中出来，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101003.gif" alt="img"></p><h3 id="3-5回退断点"><a href="#3-5回退断点" class="headerlink" title="3.5回退断点"></a>3.5回退断点</h3><p>6号按钮是很特殊的，如果你的代码中没有调用其他地方的方法，那么是呈灰色的，无法使用，只有进入更深层的方法，才能够使用，其实就是后悔药，我们很多时候调试时不小心按的快了点，很容易错过想看的位置，只能再次重启吗？不，使用这个drop frame 就可以了，演示如下。</p><p>可以看到，这里往下执行了add，但是还没有执行完，按这个按钮，再次回到了调用方法之前，但对于数据库插入等操作，其实是无法回退的，这里的回退只是因为记录了栈信息才能够做到的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011101780.gif" alt="img">但是要注意，如果你某个方法调用完毕了，你想再回去那就没有办法了。</p><h3 id="3-6断点跳到光标处"><a href="#3-6断点跳到光标处" class="headerlink" title="3.6断点跳到光标处"></a>3.6断点跳到光标处</h3><p>7号按钮也用的不多，主要是为了快速跳转到光标指向的那一行，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102813.gif" alt="img"></p><h3 id="3-7表达式计算"><a href="#3-7表达式计算" class="headerlink" title="3.7表达式计算"></a>3.7表达式计算</h3><p>8号按钮是计算表达式的，我们模拟从数据库获取集合，用表达式查询对应的元素，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011116506.gif" alt="img"></p><h3 id="3-8恢复程序"><a href="#3-8恢复程序" class="headerlink" title="3.8恢复程序"></a>3.8恢复程序</h3><p>9号按钮称为 <code>Resume Program</code>，能够跳转到指定的断点处，我们在10行和第100行各加一个断点，需要点几下该按钮跳转到100行呢？答案是一次即可，第一次断点会在第10行停下，点击改按钮直接飞越90行到第100行，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102946.gif" alt="img"></p><h3 id="3-9停止程序"><a href="#3-9停止程序" class="headerlink" title="3.9停止程序"></a>3.9停止程序</h3><p>10号按钮就是停止调试，但是注意，即便停止了调试，程序也会继续运行下去，如何想让他就在断点处停止呢？后面我会说到。</p><h3 id="3-10查看所有断点"><a href="#3-10查看所有断点" class="headerlink" title="3.10查看所有断点"></a>3.10查看所有断点</h3><p>11号按钮打开又别有乾坤，基本功能如下图所示，主要是设置，查看断点信息，大家看着应吧，实用的方法我会在下面讲的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102417.png" alt="img"></p><h3 id="3-11禁用断点"><a href="#3-11禁用断点" class="headerlink" title="3.11禁用断点"></a>3.11禁用断点</h3><p>12号按钮就简单了，暂时禁用掉断点，方便程序继续执行，一般配合 <code>Resume Program</code>。</p><h3 id="3-12其他"><a href="#3-12其他" class="headerlink" title="3.12其他"></a>3.12其他</h3><p>13号其实不是按钮，而是一块区域，这里面存放了很多变量的信息，方便我们查看。</p><p>14号按钮其实之前被我忽略掉了，这次拿出来讲一下，在watch可以监控变量的变化，有同学说，中间的变量栏也可以看啊，但是单独拉出来，看起来更加的方便，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011102929.gif" alt="img"></p><h2 id="4-竟然有那么多调试断点？"><a href="#4-竟然有那么多调试断点？" class="headerlink" title="4. 竟然有那么多调试断点？"></a>4. 竟然有那么多调试断点？</h2><p>这里省略了普通的行断点调试，毕竟是最简单的，大家都会。</p><h3 id="4-1方法断点"><a href="#4-1方法断点" class="headerlink" title="4.1方法断点"></a>4.1方法断点</h3><p>方法断点是不是用在普通方法上的，最好的用法是在接口上使用，当我们在调试源码的时候，如果在接口上打了断点，再往下走，可以直接跳转到实现类的实现方法上，而不需要我们一个个的去找。</p><p>案例中，有一个接口<code>DemoInterface</code>，它有两个实现类，让我们看下效果吧，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011111531.png" alt="img">注意：方法断点是一个菱形标志。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011111977.gif" alt="img"></p><p>其实可以直接在接口方法上打断点，直接跳转到对应的实现方法的，这里是为了放慢演示速度。</p><h3 id="4-2属性断点"><a href="#4-2属性断点" class="headerlink" title="4.2属性断点"></a>4.2属性断点</h3><p>属性断点是打在属性上的，我们无需再<code>getter setter</code>方法上打断点，在属性上打上断点，就会出现一个小眼睛的标志，如下所示。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011112502.png" alt="img"></p><p>在眼睛上点击右键可以设置。</p><p>我们一般是通过getter，setter方法设值的，所以就会在这两个方法上停留。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011112914.png" alt="img"></p><p>看一下GIF演示吧。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113662.gif" alt="img"></p><h3 id="4-3异常断点"><a href="#4-3异常断点" class="headerlink" title="4.3异常断点"></a>4.3异常断点</h3><p>在线上由于空指针出现了BUG，我们想快速定位到哪里出现了空指针，应该怎么做呢，答案就是，异常断点！演示如下。</p><p>注意，异常断点是一个闪电的标志。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113574.gif" alt="img"></p><p>可以看到，我们在全局打了个空指针断点，只要哪里出现了空指针，就会在那里停止，太方便了！</p><h3 id="4-4终止断点"><a href="#4-4终止断点" class="headerlink" title="4.4终止断点"></a>4.4终止断点</h3><p>前面我们说过，即便停止程序，也不会让我们后面运行的代码取消执行，那么我一定要取消执行可以吗？当然是可以的，演示如，在方法栈上点击右键，有一个<code>Force Return</code>，然后再点击<code>Resumer Program</code>，就可以直接终止返回了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113627.gif" alt="img"></p><h3 id="4-5条件断点"><a href="#4-5条件断点" class="headerlink" title="4.5条件断点"></a>4.5条件断点</h3><p>我想要在某个条件满足的时候打上断点，而不想一步步的走下去，有什么办法吗？当然有，在断点处右击，在<code>condition</code>里填入相应的条件即可，演示如下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011115237.gif" alt="img"></p><h3 id="4-6流断点"><a href="#4-6流断点" class="headerlink" title="4.6流断点"></a>4.6流断点</h3><p>我们使用流的时候，很难看到中间做了什么，但其实idea就帮我们解决了，我用断点调试下面代码，给大家演示下。</p><p>其实只需要找到这个按钮就行了</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113955.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">List&lt;Integer&gt; list = new ArrayList&lt;&gt;(Arrays.asList(1, 3, 3, 4, 4, 4, 5, 6, 78));       List&lt;Integer&gt; collect = list.stream()         //先将偶数筛选，再去重，返回集合               .filter(s -&gt; s % 2 == 0)               .distinct()               .collect(Collectors.toList());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113718.gif" alt="img"></p><h3 id="4-7多线程断点"><a href="#4-7多线程断点" class="headerlink" title="4.7多线程断点"></a>4.7多线程断点</h3><p>给大家演示两种情况，多线程下调试，定时任务下调试。</p><p>这个演示比较简单，可能有同学不以为意，你可以去尝试下，如果使用默认All来调试多线程程序会发生什么，可能某条线程就跑掉了，没有停留，而这种方式可以捕获到运行的所有线程。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113144.gif" alt="img">定时任务这样调试有个好处，即便我们在调试的过程中下一个任务也到时间了，也不会执行，防止多次定时任务执行带来的干扰，我在演示前已经提前一分钟启动了程序，每隔10秒钟打印一次，但是由于暂停了线程的执行，多次点击<code>Resumer Program</code>，发现并没有往下执行哦，而是再等了10秒钟之后执行。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011113981.gif" alt="img"></p><h3 id="4-8远程断点"><a href="#4-8远程断点" class="headerlink" title="4.8远程断点"></a>4.8远程断点</h3><p>顾名思义，远程debug就是断点打在你的本地环境, 但是代码是跑在远端的(可以理解为是服务端)。</p><h4 id="4-8-1为什么需要远程debug"><a href="#4-8-1为什么需要远程debug" class="headerlink" title="4.8.1为什么需要远程debug"></a>4.8.1为什么需要远程debug</h4><p>相信很多人在开发中遇到过这样的问题, 就是明明代码在自己的环境上是好的, 为什么去了测试环境就有问题, 这个时候你可能会质疑测试, 是不是准备的数据有问题?还是不会使用, 导致用错了场景? 还是部署有问题?</p><p>在做数据项目的时候, 遇到bug可能会把相应的数据下载到本地开发环境, 然后进行debug, 但如果遇到了如下的问题, 该怎么办呢</p><ul><li>数据量特别大, 本地无法下载</li><li>数据比较敏感, 安全原因不让下载</li><li>本地无法搭建环境, 比如, 需要启动cluster, 需要至少三台物理节点</li></ul><p>这个时候远程debug就要上场了, 这样你就能在本地看到远端运行的样子了, 而不用只看输出日志去推断可能哪里出了错误。</p><h4 id="4-8-2如何远程debug"><a href="#4-8-2如何远程debug" class="headerlink" title="4.8.2如何远程debug"></a>4.8.2如何远程debug</h4><h5 id="4-8-2-1首先看服务器是不是在Debug模式下工作"><a href="#4-8-2-1首先看服务器是不是在Debug模式下工作" class="headerlink" title="4.8.2.1首先看服务器是不是在Debug模式下工作"></a>4.8.2.1首先看服务器是不是在Debug模式下工作</h5><p>不是则进行（tomcat/bin/catalina.sh）配置。</p><pre class="line-numbers language-none"><code class="language-none">-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>具体解释：</p><ul><li><strong>-Xdebug ：</strong> 启用调试特性。</li><li>-<strong>Xrunjdwp</strong>:在目标 VM 中加载 JDWP 实现。它通过传输和 JDWP 协议与独立的调试器应用程序通信。下面介绍一些特定的子选项。</li><li><strong>transport</strong>: 这里通常使用套接字传输。但是在 Windows 平台上也可以使用共享内存传输。</li><li><strong>address</strong> 这是连接的传输地址。如果服务器为 <em>n</em> ，将尝试连接到该地址上的调试器应用程序。否则，将在这个端口监听连接。</li><li><strong>server</strong> 如果值为 <em>y</em> ，目标应用程序监听将要连接的调试器应用程序。否则，它将连接到特定地址上的调试器应用程序。</li><li><strong>suspend</strong> 如果值为 <em>y</em> ，目标 VM 将暂停，直到调试器应用程序进行连接。</li></ul></blockquote><h5 id="4-8-2-2本地IDEA进行远程Debug"><a href="#4-8-2-2本地IDEA进行远程Debug" class="headerlink" title="4.8.2.2本地IDEA进行远程Debug"></a>4.8.2.2本地IDEA进行远程Debug</h5><p>其实非常简单, 用Intellij IDEA打开你的代码, 点击右上角的“Edit Configurations”</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011114216.png" alt="image-20220901104745631"></p><p>然后点击左上角的”+“, 添加一个“Remote”, 这个选项就是用来做远程Debug用的, 并且添加远程DEBUG配置项，Host和Port，端口默认给的是5005。配置后，点击<code>Apply</code>和<code>OK</code>按钮（然后只要把IP和刚才配置的端口号加上就行。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011114467.png" alt="image-20220901104935150"></p><h4 id="4-8-3远程debug测试"><a href="#4-8-3远程debug测试" class="headerlink" title="4.8.3远程debug测试"></a>4.8.3远程debug测试</h4><p>我们直接在TestController类里的test方法上打断点：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011114854.png" alt="image-20220901105824672"></p><p>然后选择远程debug启动项，点击调试按钮启动。</p><p>打开postman测试：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011115937.png" alt="image-20220901105616699"><br>发现成功进入断点</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202209011115278.png" alt="image-20220901105729273"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudFlare-githubpages配置</title>
      <link href="/2022/08/31/cloudflare-githubpages-pei-zhi/"/>
      <url>/2022/08/31/cloudflare-githubpages-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudFlare-githubpages-配置"><a href="#CloudFlare-githubpages-配置" class="headerlink" title="CloudFlare+githubpages 配置"></a>CloudFlare+githubpages 配置</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1CDN简介"><a href="#1-1CDN简介" class="headerlink" title="1.1CDN简介"></a>1.1CDN简介</h3><p>关于 CDN 是什么，我想应该不用做过多的介绍，毕竟现在是一个 “云” 的时代，你至少也听说过 阿里云 或者 腾讯云 吧，当然其中就包括 CDN 业务。</p><p>CDN 的作用有很多，比如可以用来加速网站的访问，可以用来防护网站等。本篇文章讨论的就是使用 cloudflare 作为 CDN 来加速博客网站，并让博客开启 https，提升博客安全等级。</p><p>由于 GitHub Pages 在国外，而且有时候因为图片过多等原因，静态博客页面在国内访问速度可能会非常慢，我们可以用 CDN 来加速，选择 CDN，对于个人来说，主要考虑的还是访问速度以及价格，既免费又快的 CDN就最好了。经过一番寻找，发现 <a href="https://dash.cloudflare.com/">Cloudflare</a> 免费版速度还可以，而且配置起来非常简单，所以在此选用 CloudFlare CDN 来加速页面访问。也就是说，借用了cloudflare免费提供的serveless服务：workers。搭建一个反向代理。</p><p>反向代理的话相当于是我们的节点代替github pages接受了客户端的请求，所以其实我们只需要做两件事：</p><ol><li>接收客户端的请求，对其进行必要的修改之后发送给真正的服务端（<a href="https://beaumon.github.io/">github pages</a>）。这些修改主要是针对一些headers的设置，包括替换Host地址，允许任意源头资源共享(access-control-allow-origin: *)等，具体见代码。</li><li>接收服务端的响应，同样地我们需要对响应的内容做一些修改再发送给客户端的浏览器。这部分主要是把响应中所有的<a href="https://beaumon.github.io/">github pages</a>出现的部分改换成workers站点的url，否则我们的客户端就获取这些信息之后下一次就会直接访问github pages源站了。这一步可以通过简单的文本查找和替换来实现，我们可以维护一个替换对字典，对响应的内容进行正则查找替换后把响应发送给客户端。</li></ol><h3 id="1-2-DNS简介"><a href="#1-2-DNS简介" class="headerlink" title="1.2 DNS简介"></a>1.2 DNS简介</h3><p>域名系统(Domain Name System,DNS)是<a href="https://baike.baidu.com/item/Internet/272794?fromModule=lemma_inlink">Internet</a>上解决网上机器命名的一种系统。它将简单易记的域名转换成可由计算机识别的IP地址，以便客户端对服务器的正常访问，就像拜访朋友要先知道别人家怎么走一样。Internet上当一台<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151?fromModule=lemma_inlink">主机</a>要访问另外一台主机时，必须首先获知其地址，<a href="https://baike.baidu.com/item/TCP/33012?fromModule=lemma_inlink">TCP</a>/IP中的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859?fromModule=lemma_inlink">IP地址</a>是由四段以“.”分开的数字组成(此处以IPv4的地址为例，IPv6的地址同理)，记起来总是不如名字那么方便，所以，就采用了域名系统来管理名字和IP的对应关系。</p><h3 id="1-3域名介绍"><a href="#1-3域名介绍" class="headerlink" title="1.3域名介绍"></a>1.3域名介绍</h3><h4 id="1-3-1域名的形式"><a href="#1-3-1域名的形式" class="headerlink" title="1.3.1域名的形式"></a>1.3.1域名的形式</h4><p>域名可以划分为各个子域，子域还可以继续划分为子域的子域，这样就形成了顶级域、二级域、三级域等。<br>如下图所示：<br><img src="/CloudFlare-githubpages%E9%85%8D%E7%BD%AE/202208311932762.png" alt="这里写图片描述"><br>其中顶级域名分为：国家顶级域名、通用顶级域名、反向域名。</p><table><thead><tr><th>国家顶级域名</th><th>中国:cn， 美国:us，英国uk…</th></tr></thead><tbody><tr><td>通用顶级域名</td><td>com公司企业，edu教育机构，gov政府部门，int国际组织，mil军事部门 ，net网络，org非盈利组织…</td></tr><tr><td>反向域名</td><td>arpa，用于PTR查询（IP地址转换为域名）</td></tr></tbody></table><h4 id="1-3-2域名的层级"><a href="#1-3-2域名的层级" class="headerlink" title="1.3.2域名的层级"></a>1.3.2域名的层级</h4><ul><li>根域名 ：<code>.root</code> 或者 <code>.</code> ，根域名通常是省略的</li><li>顶级域名，如 <code>.com</code>，<code>.cn</code> 等</li><li>次级域名，如 <code>baidu.com</code> 里的 <code>baidu</code>，这个是用户可以进行注册购买的</li><li>主机域名，比如 <code>baike.baidu.com</code> 里的<code>baike</code>，这个是用户可分配的</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">主机名<span class="token punctuation">.</span>次级域名<span class="token punctuation">.</span>顶级域名<span class="token punctuation">.</span>根域名baike<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/CloudFlare-githubpages%E9%85%8D%E7%BD%AE/202208311932481.png" alt="在这里插入图片描述"></p><p>换一种形式展示，如下图所示：<br><img src="/CloudFlare-githubpages%E9%85%8D%E7%BD%AE/202208311931700.png" alt="这里写图片描述"><br>例如 :我们熟悉的，<a href="http://www.baidu.com/">www.baidu.com</a></p><ol><li>com: 一级域名. 表示这是一个企业域名。同级的还有 “net”(网络提供商), “org”(⾮非盈利组织) 等。</li><li>baidu: 二级域名，指公司名。</li><li>www: 表示主机域名为 www。</li></ol><p><strong>域名是分层结构，域名服务器也是对应的层级结构。</strong><br>有了域名结构，还需要有一个东西去解析域名，域名需要由遍及全世界的域名服务器去解析，域名服务器实际上就是装有域名系统的主机。</p><p>由高向低进行层次划分，可分为以下几大类：</p><table><thead><tr><th>分类</th><th>作用</th></tr></thead><tbody><tr><td>根域名服务器</td><td>最高层次的域名服务器，本地域名服务器解析不了的域名就会向其求助</td></tr><tr><td>顶级域名服务器</td><td>负责管理在该顶级域名服务器下注册的二级域名</td></tr><tr><td>权限域名服务器</td><td>负责一个区的域名解析工作</td></tr><tr><td>本地域名服务器</td><td>当一个主机发出DNS查询请求时，这个查询请求首先发给本地域名服务器</td></tr></tbody></table><p>注：一个域名服务器所负责的范围，或者说有管理权限的范围，就称为 区域 （Zone）<br><strong>关于分层， 需要注意的是:</strong></p><ul><li>每个层的域名上都有自己的域名服务器，最顶层的是根域名服务器</li><li>每一级域名服务器都知道下级域名服务器的IP地址</li><li>为了容灾, 每一级至少设置两个或以上的域名服务器</li></ul><p><strong>域名的层级有关要点，说明如下：</strong></p><p>（1）“<a href="http://www.baidu.com”/">www.baidu.com”</a> 的一个最完整的形式应该是 “<a href="http://www.baidu.com.”./">www.baidu.com.”。</a></p><p>即在每个域名后面会有一个 “.” ，“.” 来表示根，我们统称这种域名叫绝对域名“ Fully Qualified Domain Name ”(FQDN)，相当于Linux 系统中的文件绝对路径。可以通过在计算机中输入 “<a href="http://www.baidu.com.”/">www.baidu.com.”</a> 或 “<a href="http://www.dianrong.com.”/">www.dianrong.com.”</a> 来确认是否可以打开网站。</p><blockquote><p>不需要输入，不代表不存在。</p></blockquote><blockquote><p>“.” 来表示根,通常我们不需要输入这个根 ，因为计算机和浏览器默认已帮我们输入了这个“.” 根。</p></blockquote><p>（2）域名体系，使用 逆向树 所示，树中的每一个分支，都称为域，一个域名可以属于多个域，如域名 <a href="http://www.baidu.com/">www.baidu.com</a> 属于baidu.com域的一部分，同时也是 com 域的一部分。</p><p>（3）“.” 是最树状结构中最顶层的域名，统称为“根”，即每个域名都是由根开始索引的，所有域名都属于根。</p><p>（4）域名体系是通过倒着来叙述一个域名，如 <a href="http://www.baidu.com/">www.baidu.com</a> 是先写最下面的 www，在写中间的 baidu ，接着写上面的 com ，最后写 “.” ，只是根可以省略。</p><p>（5）顶级域名下面的分支是二级域名，即我们平时通过阿里云、腾讯云购买的域名，如 baidu.com 、fastcp.cn 、dianrong.com 等。</p><p>（6）二级域名下面的分支为三级域名，有时也可称为服务器名称，如 baidu下面的 www 代表了百度的网站服务名称，music 代表了百度的音乐网站服务器名称。</p><p>（7）由根分支出的域名叫 顶域域名（一般简称为 TLD ），一般分为国家地区顶级域名和通用顶级域名。</p><ul><li>国家顶级域名如我们了解的 cn、jp等。</li><li>通用顶级域名如我们了解的 com、org、net、edu等，其中表示工商企业的是 .com；表示网络提供商的 .net，表示非盈利组织的 .org ；表示教育的 .edu 。</li><li>通常我们只能注册二级域名，如果需要注册顶级域名，比如注册类似 .com 这样的域名，在国内需要联系 CNNIC ，由他们进行代理注册，通常价格不菲。大多数情况下，二级域名已经可以完全满足当下的业务需求。</li></ul><p>当然三级域名下还可以在分支四级域名出来，DNS 类似于 Unix 文件系统的结构，由根节点在上的反转树表示。最多分分支 127 层，每一层可以由最多 63 个字符组成，每层中间都以 “.” 进行分隔，类似 Unix 文件中以 “/” 分隔每一个目录。域名的总长度不可超过255个字符，仅可使用字符、数字和连字符，不区分大小写。</p><h4 id="1-3-3DNS-资源记录"><a href="#1-3-3DNS-资源记录" class="headerlink" title="1.3.3DNS 资源记录"></a>1.3.3DNS 资源记录</h4><p>由DNS构建起的域名与IP地址之间的对应关系，称之为“DNS资源记录”（record）。通过设置不同的解析记录，可以实现对主机名不同的解析效果，从而满足不同场景下的域名解析需求。在 DNS 服务器上，一个域名及其下级域名组成一个区域 （Zone）。一个 Zone的 相关的 DNS 信息构成一个数据库文件。</p><p>下面是一条A类型的资源记录（简称为A记录）：域名 <a href="http://www.zdns.cn/">www.zdns.cn</a> 的数据为 202.173.11.10</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311931609.png" alt="在这里插入图片描述"></p><p>记录一条域名信息映射关系，称之为资源记录（RR）。当我们查询域名<a href="http://www.zdns.cn的时候，查询结果得到的资源记录结构体中有如下数据：">www.zdns.cn的时候，查询结果得到的资源记录结构体中有如下数据：</a></p><ul><li>TTL，就是生存周期，是递归服务器会在缓存中保存该资源记录的时长。</li><li>网络/协议类型，它的代表的标识是IN，IN就是internet，目前DNS系统主要支持的协议是IN。</li><li>type，就是资源记录类型，一般的网站都是都是A记录（IPv4的主机地址）。</li><li>rdata是资源记录数据，就是域名关联的信息数据。</li></ul><p>每个区域（Zone）数据库文件都是由资源记录（RR）构成的，一个资源记录就是一行文本，提供了一组有用的 DNS 配置信息。在DNS系统中，最常见的资源记录是Internet类记录，该记录由包含4个字段的数据构成：Name、Value、Type、TTL。其中Name和Value可以理解为一对键值对，但是其具体含义取决于Type的类型，TTL记录了该条记录应当从缓存中删除的时间。</p><p>常见的资源记录类型如表所示。</p><table><thead><tr><th>类型</th><th>编码</th><th>内容</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>主机记录，将 DNS 域名映射到 IPv4 地址，基本作用是说明一个域名对应了哪些 IPv4 地址</td></tr><tr><td>NS</td><td>2</td><td>权威名称服务器记录，用于说明这个区域有哪些 DNS 服务器负责解析</td></tr><tr><td>CNAME</td><td>5</td><td>别名记录，主机别名对应的规范名称，用于将多个DNS记录指向已存在A记录的主机</td></tr><tr><td>SOA</td><td>6</td><td>起始授权机构记录，NS 记录说明了有多台服务器在进行解析，但哪一个才是主服务器，NS 并没有说明，SOA 记录了说明在众多 NS 记录里哪一台才是主要的服务器</td></tr><tr><td>PTR</td><td>12</td><td>指针记录，IP 地址反向解析，是 A 记录的逆向记录，作用是把 IP 地址解析为域名</td></tr><tr><td>MX</td><td>15</td><td>邮件交换记录，指定负责接收和发送到域中的电子邮件的主机</td></tr><tr><td>TXT</td><td>16</td><td>文本资源记录，用来为某个主机名或域名设置的说明</td></tr><tr><td>AAAA</td><td>28</td><td>主机记录，将 DNS 域名映射到 IPv6 地址，基本作用是说明一个域名对应了哪些 IPv6 地址</td></tr><tr><td>SRV</td><td>–</td><td>用于指定服务器提供服务的位置（如主机名和端口）数据</td></tr></tbody></table><h4 id="1-3-4-域名记录的区别和联系"><a href="#1-3-4-域名记录的区别和联系" class="headerlink" title="1.3.4 域名记录的区别和联系"></a>1.3.4 域名记录的区别和联系</h4><blockquote><p>问题：域名解析中，A记录、CNAME、MX记录、NS记录的区别和联系?</p></blockquote><p><strong>联系：</strong></p><blockquote><p>都是区域（Zone）数据库文件都是由资源记录。</p></blockquote><p><strong>A记录: 又称IP指向</strong></p><p>用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。</p><blockquote><p>说明：指向的目标主机地址类型只能使用IP地址；<br>附加说明：</p></blockquote><ul><li>泛域名解析即将该域名所有未指定的子域名都指向一个空间。在“主机名”中填入*，“类型”为A，“IP地址/主机名”中填入web服务器的IP地址，点击“新增”按钮即可。</li><li>负载均衡的实现：负载均衡(Server Load Balancing，SLB)是指在一系列资源上面动态地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性， 并确保企业关键性应用的可用性。</li></ul><blockquote><p>当相同子域名有多个目标地址时，表示轮循，可以达到负载均衡的目的，但需要虚拟主机服务商支持。</p></blockquote><p><strong>CNAME : 通常称别名指向</strong></p><p>您可以为一个主机设置别名。<br>比如设置 test.mydomain.com，用来指向一个主机<a href="http://www.rddns.com/">www.rddns.com</a> ,那么以后就可以用test.mydomain.com来代替访问<a href="http://www.rddns.com了./">www.rddns.com了。</a></p><p>说明：·</p><ul><li>CNAME的目标主机地址只能使用主机名，不能使用IP地址；</li><li>主机名前不能有任何其他前缀，如：http://等是不被允许的；</li><li>A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。</li></ul><p><strong>MX记录 : 邮件交换记录</strong></p><blockquote><p>用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p></blockquote><p>说明：</p><ul><li>MX记录可以使用主机名或IP地址；</li><li>MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。</li><li>也可以使用相同优先级达到负载均衡的目的；</li><li>如果在“主机名”中填入子域名则此MX记录只对该子域名生效。</li></ul><p>附加说明：</p><ol><li>负载均衡服务器负载均衡(Server Load Balancing，SLB)是指在一系列资源上面智能地分布网络负载。负载均衡可以减少网络拥塞，提高整体网络性能，提高自愈性，并确保企业关键性应用的可用性。当域名的MX记录有多个目标地址且优先级相同时，表示轮循，可以达到负载均衡的目的，但需要邮箱服务商支持。</li></ol><p><strong>NS记录:指向DNS子域名</strong></p><p>服务器解析记录, 用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。</p><p>例如用户希望由12.34.56.78 这台服务器解析 news.mydomain.com，则需要设置 news.mydomain.com 的NS记录。</p><p>说明：</p><ul><li>“优先级”中的数字越小表示级别越高；</li><li>“IP地址/主机名”中既可以填写IP地址，也可以填写像 ns.mydomain.com 这样的主机地址，但必须保证该主机地址有效。</li></ul><blockquote><p>如，将news.mydomain.com的NS记录指向到 ns.mydomain.com，在设置NS记录的同时还需要设置ns.mydomain.com的指向，否则NS记录将无法正常解析；</p></blockquote><ul><li>NS记录优先于A记录。</li></ul><blockquote><p>即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。</p></blockquote><h3 id="1-4Cloudflare-Workers简介"><a href="#1-4Cloudflare-Workers简介" class="headerlink" title="1.4Cloudflare Workers简介"></a>1.4Cloudflare Workers简介</h3><blockquote><p>Cloudflare Workers的名称来自Web Workers，更具体地说是Service Workers，一个用于在web浏览器后台运行并拦截HTTP请求的脚本的W3C标准API。Cloudflare Workers是针对相同的标准API编写的，但是是在Cloudflare的服务器上运行，而不是在浏览器中运行。 以下是您可以使用的工具：<br>- 使用最新的标准语言功能执行任意JavaScript代码。<br>- 拦截和修改HTTP请求和响应URL，状态，标头和正文内容。<br>- 直接从您的Worker响应请求，或将其转发到其他地方。<br>- 将HTTP请求发送到第三方服务器。<br>- 以串行或并行方式发送多个请求，并使用响应组成对原始请求的最终响应。<br>- 在响应已经返回到客户端之后发送异步请求（例如，用于记录或分析）。<br>- 控制其他Cloudflare功能，例如缓存行为。</p></blockquote><h3 id="1-5HTTP-强制跳转-HTTPS"><a href="#1-5HTTP-强制跳转-HTTPS" class="headerlink" title="1.5HTTP 强制跳转 HTTPS"></a>1.5HTTP 强制跳转 HTTPS</h3><p>HTTP是明文传输，数据很容易被窃取甚至篡改，HTTPS在HTTP的基础上设置了SSL证书，对传输中的数据进行机密，确保数据的安全性及真实性。<br>其次，现在各大浏览器都在推进HTTPS的发展，SEO方面都给了HTTPS较好的排名，HTTP网站则给出了“不安全”的提示，很影响用户信任度和体验感。<br>如果你的网站加载了大量资源，那么实施HTTPS是必须的。<br>默认情况下配置完成后 HTTPS 是开启的，会在 24 小时内给你配的站点颁发 https 证书，并且证书是自动更新的。我们可以在 CloudFlare 控制台配置 HTTP 强制跳转 HTTPS(详见下文配置)。</p><h3 id="1-6hexo-Gitalk配置proxy的几种方法"><a href="#1-6hexo-Gitalk配置proxy的几种方法" class="headerlink" title="1.6hexo Gitalk配置proxy的几种方法"></a>1.6hexo Gitalk配置proxy的几种方法</h3><h4 id="1-6-1jsdelivr-cdn"><a href="#1-6-1jsdelivr-cdn" class="headerlink" title="1.6.1jsdelivr cdn"></a>1.6.1jsdelivr cdn</h4><p>这种也是<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>主题中默认配置的cdn,但是在比较新的更新中，作者已经声明Jsdelivr 已经被封了。</p><p>所以主题模版中的cors-anywhere反向代理已不能直接使用，而Gitalk的默认proxy为</p><pre class="line-numbers language-none"><code class="language-none">Default: https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接导致了代理访问Github时会直接forbidden，也就是Request failed with status code 403。</p><h4 id="1-6-2netnr-proxy"><a href="#1-6-2netnr-proxy" class="headerlink" title="1.6.2netnr-proxy"></a>1.6.2netnr-proxy</h4><p>可以更换反向代理，直接白嫖别人代理。即：</p><pre class="line-numbers language-none"><code class="language-none">proxy: https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是人人都想白嫖，因此，有时候代理的速度甚至比不开代理更慢。也就可能导致出现<strong>429</strong>。</p><p>429的含义是收到了太多的请求，一开始还没意识到白嫖代理的问题，一直在想429就该怎么解决。知道后来才恍然大悟，我会白嫖，许多人也会白嫖，这个代理很多人都会使用，但是使用次数有限制，就会造成过多的人使用请求。</p><p>比较好的解决办法就是不偷懒,也就是关于<a href="https://github.com/gitalk/gitalk/issues/429">Gitalk后出现403错误</a>讨论出的一种比较简单的解决方案，自己部署反向代理。</p><h4 id="1-6-3Cloudflare-Workers"><a href="#1-6-3Cloudflare-Workers" class="headerlink" title="1.6.3Cloudflare Workers"></a>1.6.3Cloudflare Workers</h4><p>首先创建一个账号</p><p><a href="https://www.cloudflare.com/zh-cn/">Cloudflare 中国官网</a></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208310959571.png" alt="image-20220831095726221"></p><p>注册成功之后就可以使用刚刚注册的邮箱和密码进行登录了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311001068.png" alt="image-20220831100100506"></p><p>新建一个workers即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311005057.png" alt="image-20220831100552309"></p><p>然后再config.yml中使用</p><p>例如我的</p><pre class="line-numbers language-none"><code class="language-none">proxy: https://cloudflare-cors-anywhere.gitalkreslove.introduce.workers.dev/?https://github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-使用CloudFlare-Pages进行反代理"><a href="#2-使用CloudFlare-Pages进行反代理" class="headerlink" title="2.使用CloudFlare Pages进行反代理"></a>2.使用CloudFlare Pages进行反代理</h2><h3 id="2-1新建一个仓库"><a href="#2-1新建一个仓库" class="headerlink" title="2.1新建一个仓库"></a>2.1新建一个仓库</h3><p>这里不再重复贴图介绍，详情参考<a href="https://beaumon.github.io/2022/08/25/hexo-tu-pian-pei-zhi/">hexo图片配置</a>这篇文章。</p><h3 id="2-2创建一个新文件"><a href="#2-2创建一个新文件" class="headerlink" title="2.2创建一个新文件"></a>2.2创建一个新文件</h3><p>在部署好的github项目的根路径新建一个名为_worker.js的文件，然后复制以下代码，在第五行单引号里改成你想要反代的网站。</p><p><strong>注意，反代的网站不需要加https,http，需要遵守类似<a href="http://www.baidu.com的格式/">www.baidu.com的格式</a></strong></p><pre class="line-numbers language-none"><code class="language-none">export default {  async fetch(request, env) {    let url = new URL(request.url);    if (url.pathname.startsWith('/')) {      url.hostname = '反代地址'      let new_request = new Request(url, request);      return fetch(new_request);    }    return env.ASSETS.fetch(request);  },};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262233468.png" alt="image-20220826223304545"></p><p>点击保存</p><h3 id="2-3在CloudFlare网站导航栏点击Pages"><a href="#2-3在CloudFlare网站导航栏点击Pages" class="headerlink" title="2.3在CloudFlare网站导航栏点击Pages"></a>2.3在CloudFlare网站导航栏点击Pages</h3><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262236040.png" alt="image-20220826223557883"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262237601.png" alt="image-20220826223657520"></p><p>输入项目名称，其他不动，点击“Save and deploy”</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262237343.png" alt="image-20220826223754451"></p><p>也可以不配置_worker.js，直接配置<img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311004929.png" alt="image-20220830092551552"></p><p>点击save即可部署完成</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262239071.png" alt="image-20220826223909089"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208262239474.png" alt="image-20220826223951909"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311931047.png" alt="image-20220830092744319"></p><p>部署完成之后，原本访问<a href="https://beaumon.github.io/">是Beaumon的小博客鸭</a>的网址可以替换成CloudFlare代理后的地址进行访问了，例如我的 <a href="https://blog-worker.pages.dev/%E3%80%82">https://blog-worker.pages.dev/。</a></p><p>或者使用域名访问： <a href="https://beaumon.tk/">是Beaumon的小博客鸭</a>。</p><h3 id="2-4域名注册"><a href="#2-4域名注册" class="headerlink" title="2.4域名注册"></a>2.4域名注册</h3><h4 id="2-4-1PC注册"><a href="#2-4-1PC注册" class="headerlink" title="2.4.1PC注册"></a>2.4.1PC注册</h4><p>这里我选择了Freenom，可以免费申请顶级域名，最高12个月免费。</p><p><a href="https://my.freenom.com/">Freenom免费域名注册官网</a></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311012498.png" alt="image-20220831101121017"></p><p>进行注册登录即可。有些博主说是必须得在没有登入账号的状态下，搜索域名，添加购物车，然后再注册。</p><p>我没有采纳，我是用了gmail邮箱注册成功之后，再去申请的，同样申请成功了，话不多说，上干货。</p><blockquote><p>注意：注册时候尽量选择国外的邮箱，推荐gmail，还有就是得科学上网，因为它检测到你的ip地址，如果为国内ip，或者你搭了vpn，但是你的注册信息和你的vpn代理地址不一样，也同样会失败。我使用的chrome插件翻出去了，但是ip地址没变，在你购物车跳转的时候会没有反应，当你的vpn代理了ip地址时候，还会有另外一种错误，它会提示：“您的某些域由于技术错误而无法注册。这些域已被取消“</p></blockquote><p>这个我暂时也没有找到一个好的解决办法</p><p>网上解决办法参考：安装Gooreplacer插件，这里我也装了，但因为vpn不给力，没改掉ip地址，因此我选择了在手机上进行注册。</p><p>1，打开浏览器的扩展程序把Gooreplacer启用。</p><p>2，在浏览器地址栏右侧点击这个插件的标志，就会打开它的设置主页。</p><p>3，在这个设置主页上面点击”重定向“标签，在上面添下如下设置。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311023087.png" alt="image-20220831102347283"></p><p>前期准备，生成一个美国人的信息和地址</p><p><a href="https://www.shenfendaquan.com/Index/index/custom_result">点我在线生成美国人信息</a></p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311106566.png" alt="image-20220831110635529"></p><p>注册账号总结</p><pre class="line-numbers language-none"><code class="language-none">1.1首先进入https://www.freenom.com 官网1.2官网首先向下拉，找到合作伙伴的开发人员项。1.3 打开 找到 今天就获得一个随机的域帐户！这 个按钮，进去就是注册页面。这就是直接注册账号的入口了1.4输入邮箱（这里用国内的邮箱是不行的。需要国际邮箱或者美国邮箱。没有的可以用临时邮箱。临时邮箱直接在百度搜(为了安全性考虑不建议使用)，然后点击下方蓝色按钮。1.5回到临时邮箱，刷新邮箱。然后会有一条邮件，打开freenom发来的邮件，打开里面的链接。1.6进去以后发现啥都没有,再按照第二步操作，就会有一个信息表单要你填，这个时候就要用到一个特别重要的网站：美国个人信息生成网（百度即可）。将临时信息的内容填写到freenom（要一一对应]）（邮箱不改）。然后在最后两个编辑框内输入密码。勾选下方的选择框，在点击蓝色按钮。即可注册成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2手机注册"><a href="#2-4-2手机注册" class="headerlink" title="2.4.2手机注册"></a>2.4.2手机注册</h4><p>步骤如下：</p><p>1.开启vpn</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311111826.png" alt="vpn"></p><p>2.访问官网地址注册</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311113728.png" alt="register"><br>3.搜索想要注册的域名</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311117833.png" alt="search"><br>4.选择域名</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311117148.png" alt="choose"><br>5.选择时长(免费的最多12个月)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311118273.png" alt="free12"></p><p>6.确认订单</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311119978.png" alt="confirm"><br>7.订单失败(被取消了，多试几次)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311120865.png" alt="failure"></p><p>8.订单成功</p><p>小tips:白天一般不容易成功，晚上几率更大一些(个人观点)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311122787.png" alt="success"></p><p>9.my Domains展示</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311123112.png" alt="image-20220831112356912"></p><p>至此，域名注册成功</p><p>注册域名总结:</p><pre class="line-numbers language-none"><code class="language-none">1.打开freenom官网 https://www.freenom.com2.在首页的编辑框输入域名，比如你想要springweb.*的域名，那就输入springweb，然后点击CheckAvailability3.进去后，选择一个免费的后辍，官网提供了cf,ml,ga,tk等几种可供选择。选择好之后，点击Checkout，让后选择选择域名到期时间，推荐12个月。然后点击Continue。4.点击确认订单5.成功/失败(网站有防滥用策略，挂梯子可能会提示您的某些域由于技术错误而无法注册。这些域已被取消。)，若失败，多试几次，或者到晚上再行测试注意：你的ip地址和你的个人信息里面不匹配（如果确保ip和个人信息是同一个国家，还是没有办法。把ip地址的街道地址填进去，或者换美国地址ip，美国ip好像更容易通过）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-域名解析配置"><a href="#3-域名解析配置" class="headerlink" title="3.域名解析配置"></a>3.域名解析配置</h2><h3 id="3-1新增站点"><a href="#3-1新增站点" class="headerlink" title="3.1新增站点"></a>3.1新增站点</h3><p>在cloudflare中点击Websites，然后点击Add a Site,将刚注册的域名填入即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311128735.png" alt="image-20220831112840827"></p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311347261.png" alt="image-20220831134656004"></p><h3 id="3-2选择free计划"><a href="#3-2选择free计划" class="headerlink" title="3.2选择free计划"></a>3.2选择free计划</h3><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311347234.png" alt="image-20220831134747981"></p><h3 id="3-3直接continue"><a href="#3-3直接continue" class="headerlink" title="3.3直接continue"></a>3.3直接continue</h3><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311359474.png" alt="image-20220831134841843"></p><h3 id="3-4设置DNS记录"><a href="#3-4设置DNS记录" class="headerlink" title="3.4设置DNS记录"></a>3.4设置DNS记录</h3><p>点击了continue后，会提示：如果没有 DNS 记录，Cloudflare 将无法激活您的站点。最好现在设置 DNS 记录。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311408972.png" alt="image-20220831140527666"></p><h3 id="3-5-指向-Cloudflare-的名称服务器"><a href="#3-5-指向-Cloudflare-的名称服务器" class="headerlink" title="3.5 指向 Cloudflare 的名称服务器"></a>3.5 指向 Cloudflare 的名称服务器</h3><p><strong>点击confirm,会出现指向 Cloudflare 的名称服务器是激活过程中的关键步骤，Cloudflare 必须完成此操作才能优化和保护您的站点</strong>，域名服务器是您的主要DNS控制器，可识别您的域在 Internet 上的位置字样，Cloudflare 已经默认配置好，划到最下方点击完成，检查域名服务器即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311408076.png" alt="image-20220831140801076"></p><p>然后会有一个配置小建议，可以跳过，可以看一下。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311930055.png" alt="image-20220831140943379"></p><p>建议是</p><pre class="line-numbers language-none"><code class="language-none">1.启用始终使用 HTTPS：将所有使用方案“http”的请求重定向到“https”2.启用自动缩小：减少网站上 Javascript、CSS 和 HTML 源代码的文件大小。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311929084.png" alt="image-20220831141035679"></p><p>可以应用它的建议。</p><p>如果没有使用建议的话，也可以在Rules中自行添加规则。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311539582.png" alt="image-20220831153931659"></p><h3 id="3-6使得域名在-Cloudflare-上活跃"><a href="#3-6使得域名在-Cloudflare-上活跃" class="headerlink" title="3.6使得域名在 Cloudflare 上活跃"></a>3.6使得域名在 Cloudflare 上活跃</h3><p>在概览页面点击检查名称服务器(check nameservers)</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311929796.png" alt="image-20220831141412032"></p><p>点击了提示Cloudflare 现在正在检查博蒙.tk 的名称服务器。请等待几个小时以获取更新。检查完之后，WebSites上的就会变为active。</p><h3 id="3-7为域名配置配置DNS解析"><a href="#3-7为域名配置配置DNS解析" class="headerlink" title="3.7为域名配置配置DNS解析"></a>3.7为域名配置配置DNS解析</h3><h4 id="3-7-1-查询github-pages对应的ip地址"><a href="#3-7-1-查询github-pages对应的ip地址" class="headerlink" title="3.7.1 查询github pages对应的ip地址"></a>3.7.1 查询github pages对应的ip地址</h4><p><a href="https://www.ipaddress.com/">ip查询地址</a></p><p>输入username.github.io(github pages)进行检索</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311543030.png" alt="image-20220831154306202"></p><h4 id="3-7-2-添加记录"><a href="#3-7-2-添加记录" class="headerlink" title="3.7.2 添加记录"></a>3.7.2 添加记录</h4><p>点击Add record,</p><p>选择type为A,Name为www,IPV4为刚刚查到的IPV4的地址</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311544154.png" alt="image-20220831154414330"></p><p>再次点击Add record,</p><p>选择type为A,Name为@,IPV4为刚刚查到的IPV4的地址</p><p>或者直接选择type为CNAME,Namewww,Target为username.github.io。</p><h3 id="3-8修改freenom默认的nameservers"><a href="#3-8修改freenom默认的nameservers" class="headerlink" title="3.8修改freenom默认的nameservers"></a>3.8修改freenom默认的nameservers</h3><p>将freenom默认的nameservers修改为cloudflare提供的nameservers。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311930086.png"></p><h3 id="3-9测试域名"><a href="#3-9测试域名" class="headerlink" title="3.9测试域名"></a>3.9测试域名</h3><p>配置完成之后打开github，选择对应的仓库，依次点击setting–&gt;pages，输入Custom domain,点击save,等待检查。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311551197.png" alt="image-20220831155113323"></p><p>稍等一会儿，</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311847107.png" alt="image-20220831184704699"></p><p>此时就可以打开浏览器输入beaumon.cf进行访问了。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311928905.png" alt="image-20220831192834828"></p><h2 id="4-使用cloudflare-workers进行反代理"><a href="#4-使用cloudflare-workers进行反代理" class="headerlink" title="4.使用cloudflare workers进行反代理"></a>4.使用cloudflare workers进行反代理</h2><h3 id="4-1安装-Cloudflare-提供的部署程序-Wrangler"><a href="#4-1安装-Cloudflare-提供的部署程序-Wrangler" class="headerlink" title="4.1安装 Cloudflare 提供的部署程序 Wrangler"></a>4.1安装 Cloudflare 提供的部署程序 Wrangler</h3><h4 id="4-1-1安装-Wrangler"><a href="#4-1-1安装-Wrangler" class="headerlink" title="4.1.1安装 Wrangler"></a>4.1.1安装 Wrangler</h4><p>Wrangler 的项目地址：<a href="https://github.com/cloudflare/wrangler">cloudflare wrangler</a> 按照官方教程，使用 npm 安装 Wrangler ，在控制台输入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ npm i @cloudflare<span class="token operator">/</span>wrangler <span class="token operator">-</span>g    #全局安装$ # npm i @cloudflare<span class="token operator">/</span>wrangler     #如果默认环境无法进行全局安装，可以使用此局部安装命令，在工程目录需使用npx调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>cargo 方式安装 Wrangler（未使用）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ cargo install wrangler<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-1-2获取-Cloudflare-api-密钥"><a href="#4-1-2获取-Cloudflare-api-密钥" class="headerlink" title="4.1.2获取 Cloudflare api 密钥"></a>4.1.2获取 Cloudflare api 密钥</h4><p>在<a href="https://dash.cloudflare.com/profile/api-tokens">Cloudflare 的 api 控制台</a>中创建一个新的 api-token，点击新建 api-token，选择使用模板（Start with a template）。</p><p>使用<code>Edit Cloudflare Workers</code>模板创建新的 api，配置相应的权限即可获得一个新的<code>api-tokens</code>，保存备用。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208311949662.png" alt="img"></p><h4 id="4-1-3配置-Wrangler-全局密钥"><a href="#4-1-3配置-Wrangler-全局密钥" class="headerlink" title="4.1.3配置 Wrangler 全局密钥"></a>4.1.3配置 Wrangler 全局密钥</h4><p>控制台执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ wrangler config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入刚才保存的<code>api-tokens</code>运行验证即可完成全部配置。</p><h3 id="4-2初始化-Wrangler"><a href="#4-2初始化-Wrangler" class="headerlink" title="4.2初始化 Wrangler"></a>4.2初始化 Wrangler</h3><p>在工程目录终端中执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ wrangler init <span class="token operator">--</span>site my<span class="token operator">-</span><span class="token keyword">static</span><span class="token operator">-</span>site        #my<span class="token operator">-</span><span class="token keyword">static</span><span class="token operator">-</span>site替换为要创建的Works名称# $ npx wrangler init <span class="token operator">--</span>site my<span class="token operator">-</span><span class="token keyword">static</span><span class="token operator">-</span>site    #局部安装使用此命令，用法如上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行此条命令会在工程目录中生成<code>wrangler.toml</code>和<code>aworkers-site</code>,其中<code>wrangler.toml</code>是工程中 Wrangler 的配置文件。</p><h3 id="4-3配置-Wrangler"><a href="#4-3配置-Wrangler" class="headerlink" title="4.3配置 Wrangler"></a>4.3配置 Wrangler</h3><h4 id="4-3-1简单设置-Wrangler-toml"><a href="#4-3-1简单设置-Wrangler-toml" class="headerlink" title="4.3.1简单设置 Wrangler.toml"></a>4.3.1简单设置 Wrangler.toml</h4><p>默认生成的<code>wrangler.toml</code>如下，可依据设置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">name <span class="token operator">=</span> <span class="token string">"my-static-site"</span>               #此处为之前初始化填写的Workes名称type <span class="token operator">=</span> <span class="token string">"webpack"</span>account_id <span class="token operator">=</span> <span class="token string">""</span>             # Cloudflare Account <span class="token constant">ID</span>，去 Cloudflare 的控制面板找找workers_dev <span class="token operator">=</span> <span class="token boolean">true</span>          # 是否启用 workers<span class="token punctuation">.</span>dev 子域名如果需要配置自己的域名，改为<span class="token boolean">false</span>route <span class="token operator">=</span> <span class="token string">""</span>                  # Workers 所载的 Routezone_id <span class="token operator">=</span> <span class="token string">""</span>                # 域名在 Cloudflare 的 Zone <span class="token constant">ID</span><span class="token punctuation">[</span>site<span class="token punctuation">]</span>bucket <span class="token operator">=</span> <span class="token string">"./public"</span>           # 生成的 dist 路径，对于 Hexo 和 Hugo 来说就是 <span class="token keyword">public</span>entry<span class="token operator">-</span>point <span class="token operator">=</span> <span class="token string">"workers-site"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置自定义域名时，可以在 wrangler 配置完成后，在域名管理中的 Workers 设置中添加对应的 Workers 路由，再将 SSL 安全级别调整为 Flexible，否则会遇到 SSL 526 错误。</p><h4 id="4-3-2上传全站到-Cloudflare-Workers"><a href="#4-3-2上传全站到-Cloudflare-Workers" class="headerlink" title="4.3.2上传全站到 Cloudflare Workers"></a>4.3.2上传全站到 Cloudflare Workers</h4><p>首先使用 Hexo 在工程目录生成一次静态文件，以产生<code>public</code>文件，如不生成则会下下一步上传中报错。</p><p>控制台中运行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wrangler preview <span class="token operator">--</span>watch   # 上传并预览wrangler publish           #上传并发布<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示以下即完成所有的运行操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Using namespace <span class="token keyword">for</span> Workers Site <span class="token string">"__site-workers_sites_assets"</span> Uploading site files Success⬇️ Installing wranglerjs<span class="token operator">...</span>⬇️ Installing wasm<span class="token operator">-</span>pack<span class="token operator">...</span> Built successfully<span class="token punctuation">,</span> built project size is <span class="token number">11</span> KiB<span class="token punctuation">.</span> Successfully published your script to https<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">/*.workers.dev    #这里就是生成的预览地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开你生成的地址进行访问即可。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊数据库建表的15个小技巧</title>
      <link href="/2022/08/29/liao-liao-shu-ju-ku-jian-biao-de-15-ge-xiao-ji-qiao/"/>
      <url>/2022/08/29/liao-liao-shu-ju-ku-jian-biao-de-15-ge-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库建表的15个小技巧"><a href="#数据库建表的15个小技巧" class="headerlink" title="数据库建表的15个小技巧"></a>数据库建表的15个小技巧</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于后端开发同学来说，访问数据库，是代码中必不可少的一个环节。</p><p>系统中收集到用户的核心数据，为了安全性，我们一般会存储到数据库，比如：mysql，oracle等。</p><p>后端开发的日常工作，需要不断的建库和建表，来满足业务需求。</p><p>通常情况下，建库的频率比建表要低很多，所以，我们这篇文章主要讨论建表相关的内容。</p><p>如果我们在建表的时候不注意细节，等后面系统上线之后，表的维护成本变得非常高，而且很容易踩坑。</p><p>今天就跟大家一起聊聊，数据库建表的15个小技巧，希望对你会有所帮助。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292154327.png" alt="img"></p><h2 id="1-名字"><a href="#1-名字" class="headerlink" title="1.名字"></a>1.名字</h2><p>建表的时候，给<code>表</code>、<code>字段</code>和<code>索引</code>起个好名字，真的太重要了。</p><h3 id="1-1-见名知意"><a href="#1-1-见名知意" class="headerlink" title="1.1 见名知意"></a><strong>1.1 见名知意</strong></h3><p>名字就像<code>表</code>、<code>字段</code>和<code>索引</code>的一张脸，可以给人留下第一印象。</p><p>好的名字，言简意赅，见名知意，让人心情愉悦，能够提高沟通和维护成本。</p><p>坏的名字，模拟两可，不知所云。而且显得杂乱无章，看得让人抓狂。</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">用户名称字段定义成：yong_hu_ming、用户_name、name、user_name_123456789<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你看了可能会一脸懵逼，这是什么骚操作？</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">用户名称字段定义成：user_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>温馨提醒一下，名字也不宜过长，尽量控制在<code>30</code>个字符以内。</p></blockquote><h3 id="1-2-大小写"><a href="#1-2-大小写" class="headerlink" title="1.2 大小写"></a><strong>1.2 大小写</strong></h3><p>名字尽量都用<code>小写字母</code>，因为从视觉上，小写字母更容易让人读懂。</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：PRODUCT_NAME、PRODUCT_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全部大写，看起来有点不太直观。而一部分大写，一部分小写，让人看着更不爽。</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：product_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名字还是使用全小写字母，看着更舒服。</p><h3 id="1-3-分隔符"><a href="#1-3-分隔符" class="headerlink" title="1.3 分隔符"></a><strong>1.3 分隔符</strong></h3><p>很多时候，名字为了让人好理解，有可能会包含多个单词。</p><p>那么，多个单词间的<code>分隔符</code>该用什么呢？</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：productname、productName、product name、product@name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单词间没有分隔，或者单词间用驼峰标识，或者单词间用空格分隔，或者单词间用@分隔，这几种方式都不太建议。</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：product_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强烈建议大家在单词间用<code>_</code>分隔。</p><h3 id="1-4-表名"><a href="#1-4-表名" class="headerlink" title="1.4 表名"></a><strong>1.4 表名</strong></h3><p>对于表名，在言简意赅，见名知意的基础之上，建议带上<code>业务前缀</code>。</p><p>如果是订单相关的业务表，可以在表名前面加个前缀：<code>order_</code>。</p><p>例如：order_pay、order_pay_detail等。</p><p>如果是商品相关的业务表，可以在表名前面加个前缀：<code>product_</code>。</p><p>例如：product_spu，product_sku等。</p><p>这样做的好处是为了方便归类，把相同业务的表，可以非常快速的聚集到一起。</p><p>另外，还有有个好处是，如果哪天有非订单的业务，比如：金融业务，也需要建一个名字叫做pay的表，可以取名：finance_pay，就能非常轻松的区分。</p><p>这样就不会出现<code>同名表</code>的情况。</p><h3 id="1-5-字段名称"><a href="#1-5-字段名称" class="headerlink" title="1.5 字段名称"></a><strong>1.5 字段名称</strong></h3><p><code>字段名称</code>是开发人员发挥空间最大，但也最容易发生混乱的地方。</p><p>比如有些表，使用flag表示状态，另外的表用status表示状态。</p><p>可以统一一下，使用status表示状态。</p><p>如果一个表使用了另一个表的主键，可以在另一张表的名后面，加<code>_id</code>或<code>_sys_no</code>，例如：</p><p>在product_sku表中有个字段，是product_spu表的主键，这时候可以取名：product_spu_id或product_spu_sys_no。</p><p>还有创建时间，可以统一成：create_time，修改时间统一成：update_time。</p><p>删除状态固定为：delete_status。</p><p>其实还有很多公共字段，在不同的表之间，可以使用全局统一的命名规则，定义成相同的名称，以便于大家好理解。</p><h3 id="1-6-索引名"><a href="#1-6-索引名" class="headerlink" title="1.6 索引名"></a><strong>1.6 索引名</strong></h3><p>在数据库中，索引有很多种，包括：主键、普通索引、唯一索引、联合索引等。</p><p>每张表的主键只有一个，一般使用：<code>id</code>或者<code>sys_no</code>命名。</p><p>普通索引和联合索引，其实是一类。在建立该类索引时，可以加<code>ix_</code>前缀，比如：ix_product_status。</p><p>唯一索引，可以加<code>ux_</code>前缀，比如：ux_product_code。</p><h2 id="2-字段类型"><a href="#2-字段类型" class="headerlink" title="2.字段类型"></a>2.字段类型</h2><p>在设计表时，我们在选择<code>字段类型</code>时，可发挥空间很大。</p><p>时间格式的数据有：date、datetime和timestamp等等可以选择。</p><p>字符类型的数据有：varchar、char、text等可以选择。</p><p>数字类型的数据有：int、bigint、smallint、tinyint等可以选择。</p><p>说实话，选择很多，有时候是一件好事，也可能是一件坏事。</p><p>如何选择一个<code>合适</code>的字段类型，变成了我们不得不面对的问题。</p><p>如果字段类型选大了，比如：原本只有1-10之间的10个数字，结果选了<code>bigint</code>，它占<code>8</code>个字节。</p><p>其实，1-10之间的10个数字，每个数字<code>1</code>个字节就能保存，选择<code>tinyint</code>更为合适。</p><p>这样会白白浪费7个字节的空间。</p><p>如果字段类型择小了，比如：一个18位的id字段，选择了<code>int</code>类型，最终数据会保存失败。</p><p>所以选择一个合适的字段类型，还是非常重要的一件事情。</p><p>以下原则可以参考一下：</p><ol><li>尽可能选择占用存储空间小的字段类型，在满足正常业务需求的情况下，从小到大，往上选。</li><li>如果字符串长度固定，或者差别不大，可以选择char类型。如果字符串长度差别较大，可以选择varchar类型。</li><li>是否字段，可以选择bit类型。</li><li>枚举字段，可以选择tinyint类型。</li><li>主键字段，可以选择bigint类型。</li><li>金额字段，可以选择decimal类型。</li><li>时间字段，可以选择timestamp或datetime类型。</li></ol><h2 id="3-字段长度"><a href="#3-字段长度" class="headerlink" title="3.字段长度"></a>3.字段长度</h2><p>前面我们已经定义好了<code>字段名称</code>，选择了合适的<code>字段类型</code>，接下来，需要重点关注的是<code>字段长度</code>了。</p><p>比如：varchar(20)，biginit(20)等。</p><p>那么问题来了，<code>varchar</code>代表的是<code>字节</code>长度，还是<code>字符</code>长度呢？</p><p>答：在mysql中除了<code>varchar</code>和<code>char</code>是代表<code>字符</code>长度之外，其余的类型都是代表<code>字节</code>长度。</p><p>biginit(n) 这个<code>n</code>表示什么意思呢？</p><p>假如我们定义的字段类型和长度是：bigint(4)，bigint实际长度是<code>8</code>个字节。</p><p>现在有个数据a=1，a显示4个字节，所以在不满4个字节时前面填充0（前提是该字段设置了zerofill属性），比如：0001。</p><p>当满了4个字节时，比如现在数据是a=123456，它会按照实际的长度显示，比如：123456。</p><p>但需要注意的是，有些mysql客户端即使满了4个字节，也可能只显示4个字节的内容，比如会显示成：1234。</p><p>所以bigint(4)，这里的4表示显示的长度为4个字节，实际长度还是占8个字节。</p><h2 id="4-字段个数"><a href="#4-字段个数" class="headerlink" title="4.字段个数"></a>4.字段个数</h2><p>我们在建表的时候，一定要对<code>字段个数</code>做一些限制。</p><p>我之前见过有人创建的表，有几十个，甚至上百个字段，表中保存的数据非常大，查询效率很低。</p><p>如果真有这种情况，可以将一张<code>大表</code>拆成多张<code>小表</code>，这几张表的主键相同。</p><p>建议每表的字段个数，不要超过<code>20</code>个。</p><h2 id="5-主键"><a href="#5-主键" class="headerlink" title="5. 主键"></a>5. 主键</h2><p>在创建表时，一定要创建<code>主键</code>。</p><p>因为主键自带了主键索引，相比于其他索引，主键索引的查询效率最高，因为它不需要回表。</p><p>此外，主键还是天然的<code>唯一索引</code>，可以根据它来判重。</p><p>在<code>单个</code>数据库中，主键可以通过<code>AUTO_INCREMENT</code>，设置成<code>自动增长</code>的。</p><p>但在<code>分布式</code>数据库中，特别是做了分库分表的业务库中，主键最好由外部算法(比如：雪花算法）生成，它能够保证生成的id是全局唯一的。</p><p>除此之外，主键建议保存跟业务无关的值，减少业务耦合性，方便今后的扩展。</p><p>不过我也见过，有些一对一的表关系，比如：用户表和用户扩展表，在保存数据时是一对一的关系。</p><p>这样，用户扩展表的主键，可以直接保存用户表的主键。</p><h2 id="6-存储引擎"><a href="#6-存储引擎" class="headerlink" title="6.存储引擎"></a>6.存储引擎</h2><p>在<code>mysql5.1</code>以前的版本，默认的存储引擎是<code>myslam</code>，而<code>mysql5.1</code>以后的版本，默认的存储引擎变成了<code>innodb</code>。</p><p>之前我们还在创建表时，还一直纠结要选哪种存储引擎？</p><p><code>myslam</code>的索引和数据分开存储，而有利于查询，但它不支持事务和外键等功能。</p><p>而<code>innodb</code>虽说查询性能，稍微弱一点，但它支持事务和外键等，功能更强大一些。</p><p>以前的建议是：读多写少的表，用myslam存储引擎。而写多读多的表，用innodb。</p><p>但虽说mysql对innodb存储引擎性能的不断优化，现在myslam和innodb查询性能相差已经越来越小。</p><p>所以，建议我们在使用<code>mysql8</code>以后的版本时，直接使用默认的<code>innodb</code>存储引擎即可，无需额外修改存储引擎。</p><h2 id="7-NOT-NULL"><a href="#7-NOT-NULL" class="headerlink" title="7. NOT NULL"></a>7. NOT NULL</h2><p>在创建字段时，需要选择该字段是否允许为<code>NULL</code>。</p><p>我们在定义字段时，应该尽可能明确该字段<code>NOT NULL</code>。</p><p>为什么呢？</p><p>我们主要以innodb存储引擎为例，myslam存储引擎没啥好说的。</p><p>主要有以下原因：</p><ol><li>在innodb中，需要额外的空间存储null值，需要占用更多的空间。</li><li>null值可能会导致索引失效。</li><li>null值只能用<code>is null</code>或者<code>is not null</code>判断，用<code>=号</code>判断永远返回false。</li></ol><p>因此，建议我们在定义字段时，能定义成NOT NULL，就定义成NOT NULL。</p><p>但如果某个字段直接定义成NOT NULL，万一有些地方忘了给该字段写值，就会<code>insert</code>不了数据。</p><p>这也算合理的情况。</p><p>但有一种情况是，系统有新功能上线，新增了字段。上线时一般会先执行sql脚本，再部署代码。</p><p>由于老代码中，不会给新字段赋值，则insert数据时，也会报错。</p><p>由此，非常有必要给NOT NULL的字段设置默认值，特别是后面新增的字段。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">alter table product_sku add column  brand_id int(10) not null default 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-外键"><a href="#8-外键" class="headerlink" title="8.外键"></a>8.外键</h2><p>在mysql中，是存在<code>外键</code>的。</p><p>外键存在的主要作用是：保证数据的<code>一致性</code>和<code>完整性</code>。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create table class (  id int(10) primary key auto_increment,  cname varchar(15));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有个班级表class。</p><p>然后有个student表：</p><pre class="line-numbers language-none"><code class="language-none">create table student(  id int(10) primary key auto_increment,  name varchar(15) not null,  gender varchar(10) not null,  cid int,  foreign key(cid) references class(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中student表中的cid字段，保存的class表的id，这时通过<code>foreign key</code>增加了一个外键。</p><p>这时，如果你直接通过student表的id删除数据，会报异常：</p><pre class="line-numbers language-none"><code class="language-none">a foreign key constraint fails<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须要先删除class表对于的cid那条数据，再删除student表的数据才行，这样能够保证数据的一致性和完整性。</p><blockquote><p>顺便说一句：只有存储引擎是innodb时，才能使用外键。</p></blockquote><p>如果只有两张表的关联还好，但如果有十几张表都建了外键关联，每删除一次主表，都需要同步删除十几张子表，很显然性能会非常差。</p><p>因此，互联网系统中，一般建议不使用外键。因为这类系统更多的是为了性能考虑，宁可牺牲一点数据一致性和完整性。</p><p>除了<code>外键</code>之外，<code>存储过程</code>和<code>触发器</code>也不太建议使用，他们都会影响性能。</p><h2 id="9-索引"><a href="#9-索引" class="headerlink" title="9. 索引"></a>9. 索引</h2><p>在建表时，除了指定<code>主键索引</code>之外，还需要创建一些<code>普通索引</code>。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create table product_sku(  id int(10) primary key auto_increment,  spu_id int(10) not null,  brand_id int(10) not null,  name varchar(15) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建商品表时，使用spu_id（商品组表）和brand_id（品牌表）的id。</p><p>像这类保存其他表id的情况，可以增加普通索引：</p><pre class="line-numbers language-none"><code class="language-none">create table product_sku (  id int(10) primary key auto_increment,  spu_id int(10) not null,  brand_id int(10) not null,  name varchar(15) not null,  KEY `ix_spu_id` (`spu_id`) USING BTREE,  KEY `ix_brand_id` (`brand_id`) USING BTREE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面查表的时候，效率更高。</p><p>但索引字段也不能建的太多，可能会影响保存数据的效率，因为索引需要额外的存储空间。</p><p>建议单表的索引个数不要超过：<code>5</code>个。</p><p>如果在建表时，发现索引个数超过5个了，可以删除部分<code>普通索引</code>，改成<code>联合索引</code>。</p><p>顺便说一句：在创建联合索引的时候，需要使用注意<code>最左匹配原则</code>，不然，建的联合索引效率可能不高。</p><p>对于数据重复率非常高的字段，比如：状态，不建议单独创建普通索引。因为即使加了索引，如果mysql发现<code>全表扫描</code>效率更高，可能会导致索引失效。</p><h2 id="10-时间字段"><a href="#10-时间字段" class="headerlink" title="10.时间字段"></a>10.时间字段</h2><p><code>时间字段</code>的类型，我们可以选择的范围还是比较多的，目前mysql支持：date、datetime、timestamp、varchar等。</p><p><code>varchar</code>类型可能是为了跟接口保持一致，接口中的时间类型是String。</p><p>但如果哪天我们要通过时间范围查询数据，效率会非常低，因为这种情况没法走索引。</p><p><code>date</code>类型主要是为了保存<code>日期</code>，比如：2022-08-29，不适合保存<code>日期和时间</code>，比如：2022-08-29 21:55:20。</p><p>而<code>datetime</code>和<code>timestamp</code>类型更适合我们保存<code>日期和时间</code>。</p><p>但它们有略微区别。</p><ul><li><code>timestamp</code>：用4个字节来保存数据，它的取值范围为<code>1970-01-01 00:00:01</code> UTC ~ <code>2038-01-19 03:14:07</code>。此外，它还跟时区有关。</li><li><code>datetime</code>：用8个字节来保存数据，它的取值范围为<code>1000-01-01 00:00:00</code> ~ <code>9999-12-31 23:59:59</code>。它跟时区无关。</li></ul><p>优先推荐使用<code>datetime</code>类型保存日期和时间，可以保存的时间范围更大一些。</p><blockquote><p>温馨提醒一下，在给时间字段设置默认值是，建议不要设置成：<code>0000-00-00 00:00:00</code>，不然查询表时可能会因为转换不了，而直接报错。</p></blockquote><h2 id="11-金额字段"><a href="#11-金额字段" class="headerlink" title="11.金额字段"></a>11.金额字段</h2><p>mysql中有多个字段可以表示浮点数：float、double、decimal等。</p><p>而<code>float</code>和<code>double</code>可能会丢失精度，因此推荐大家使用<code>decimal</code>类型保存金额。</p><p>一般我们是这样定义浮点数的：decimal(m,n)。</p><p>其中<code>n</code>是指<code>小数</code>的长度，而<code>m</code>是指<code>整数加小数</code>的总长度。</p><p>假如我们定义的金额类型是这样的：decimal(10,2)，则表示整数长度是8位，并且保留2位小数。</p><h2 id="12-唯一索引"><a href="#12-唯一索引" class="headerlink" title="12.唯一索引"></a>12.唯一索引</h2><p><code>唯一索引</code>在我们实际工作中，使用频率相当高。</p><p>你可以给单个字段，加唯一索引，比如：组织机构code。</p><p>也可以给多个字段，加一个联合的唯一索引，比如：分类编号、单位、规格等。</p><p>单个的唯一索引还好，但如果是联合的唯一索引，字段值出现null时，则唯一性约束可能会失效。</p><blockquote><p>创建唯一索引时，相关字段一定不能包含null值，否则唯一性会失效。</p></blockquote><h2 id="13-字符集"><a href="#13-字符集" class="headerlink" title="13.字符集"></a>13.字符集</h2><p>mysql中支持的<code>字符集</code>有很多，常用的有：latin1、utf-8、utf8mb4、GBK等。</p><p>这4种字符集情况如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292155161.png" alt="img"></p><p><code>latin1</code>容易出现乱码问题，在实际项目中使用比较少。</p><p>而<code>GBK</code>支持中文，但不支持国际通用字符，在实际项目中使用也不多。</p><p>从目前来看，mysql的字符集使用最多的还是：<code>utf-8</code>和<code>utf8mb4</code>。</p><p>其中<code>utf-8</code>占用3个字节，比<code>utf8mb4</code>的4个字节，占用更小的存储空间。</p><p>但utf-8有个问题：即无法存储emoji表情，因为emoji表情一般需要4个字节。</p><p>由此，使用utf-8字符集，保存emoji表情时，数据库会直接报错。</p><p>所以，建议在建表时字符集设置成：<code>utf8mb4</code>，会省去很多不必要的麻烦。</p><h2 id="14-排序规则"><a href="#14-排序规则" class="headerlink" title="14. 排序规则"></a>14. 排序规则</h2><p>不知道，你关注过没，在mysql中创建表时，有个<code>COLLATE</code>参数可以设置。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE `order` (  `id` bigint NOT NULL AUTO_INCREMENT,  `code` varchar(20) COLLATE utf8mb4_bin NOT NULL,  `name` varchar(30) COLLATE utf8mb4_bin NOT NULL,  PRIMARY KEY (`id`),  UNIQUE KEY `un_code` (`code`),  KEY `un_code_name` (`code`,`name`) USING BTREE,  KEY `idx_name` (`name`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它是用来设置<code>排序规则</code>的。</p><p>字符排序规则跟字符集有关，比如：字符集如果是<code>utf8mb4</code>，则字符排序规则也是以：<code>utf8mb4_</code>开头的，常用的有：<code>utf8mb4_general_ci</code>、<code>utf8mb4_bin</code>等。</p><p>其中utf8mb4_general_ci排序规则，对字母的大小写不敏感。说得更直白一点，就是不区分大小写。</p><p>而utf8mb4_bin排序规则，对字符大小写敏感，也就是区分大小写。</p><p>说实话，这一点还是非常重要的。</p><p>假如order表中现在有一条记录，name的值是大写的YOYO，但我们用小写的yoyo去查，例如：</p><pre class="line-numbers language-none"><code class="language-none">select * from order where name='yoyo';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果字符排序规则是utf8mb4_general_ci，则可以查出大写的YOYO的那条数据。</p><p>如果字符排序规则是utf8mb4_bin，则查不出来。</p><p>由此，字符排序规则一定要根据实际的业务场景选择，否则容易出现问题。</p><h2 id="15-大字段"><a href="#15-大字段" class="headerlink" title="15.大字段"></a>15.大字段</h2><p>我们在创建表时，对一些特殊字段，要额外关注，比如：<code>大字段</code>，即占用较多存储空间的字段。</p><p>比如：用户的评论，这就属于一个大字段，但这个字段可长可短。</p><p>但一般会对评论的总长度做限制，比如：最多允许输入500个字符。</p><p>如果直接定义成<code>text</code>类型，可能会浪费存储空间，所以建议将这类字段定义成<code>varchar</code>类型的存储效率更高。</p><p>当然，我还见过更大的字段，即该字段直接保存合同数据。</p><p>一个合同可能会占<code>几Mb</code>。</p><p>在mysql中保存这种数据，从系统设计的角度来说，本身就不太合理。</p><p>像合同这种非常大的数据，可以保存到<code>mongodb</code>中，然后在mysql的业务表中，保存mongodb表的id。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不蒜子统计不显示问题</title>
      <link href="/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/"/>
      <url>/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="不蒜子-busuanzi统计不显示的根本原因及解决办法"><a href="#不蒜子-busuanzi统计不显示的根本原因及解决办法" class="headerlink" title="不蒜子(busuanzi统计不显示的根本原因及解决办法)"></a>不蒜子(busuanzi统计不显示的根本原因及解决办法)</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>我使用的 Hexo 博客遇到了的 busuanzi 访问量统计不显示问题，搜索了csdn，知乎，githubstackoverflow，等等也没找到解决办法，直到我发现了大佬的文章(链接见文章末尾)。</p><p>经过一番研究发现是 busuanzi 代码的一处问题和 <a href="https://github.com/EYHN/hexo-helper-live2d">live2d看板娘插件</a>的一处问题凑在一起导致的。</p><p>今天在写博客之前先搜了一下“busuanzi live2d”，发现搜出来一堆结果，我还以为我白研究了..结果点进去一看，第一页结果里没有一个指出了问题的根本原因，而且修复方法基本上都是删 feature 或者换组件，但实际上只要知道问题的根本原因就可以在不妨碍正常功能运作的前提下进行修复。</p><h1 id="2-问题描述"><a href="#2-问题描述" class="headerlink" title="2.问题描述"></a>2.问题描述</h1><p>在一个同时启用了 busuanzi 访问量统计和 live2d 插件的 Hexo 博客里，访问或刷新博客时有大概率 busuanzi 会被隐藏。</p><p>被隐藏的具体表现为，刷新的瞬间 id 为 <code>busuanzi_container_*</code> 的容器是显示的，然后容器的样式很快被设为 <code>display: none</code>。</p><p>查看 F12 的 Network，busuanzi 相关请求正常返回；console 中没有报错。</p><h1 id="3-问题定位"><a href="#3-问题定位" class="headerlink" title="3.问题定位"></a>3.问题定位</h1><h3 id="3-1标签对比："><a href="#3-1标签对比：" class="headerlink" title="3.1标签对比："></a>3.1标签对比：</h3><p><strong>对比发现出现了多余的style=”display: none”;</strong></p><blockquote><p>正常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;次    &lt;/span&gt;&lt;span id="busuanzi_container_site_uv"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;人    &lt;/span&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>异常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"         class="white-color"&gt;2303950&lt;/span&gt;&amp;nbsp;次&lt;/span&gt;&lt;span id="busuanzi_container_site_uv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"         class="white-color"&gt;160644&lt;/span&gt;&amp;nbsp;人&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2查看display-none的定位"><a href="#3-2查看display-none的定位" class="headerlink" title="3.2查看display: none的定位"></a><strong>3.2查看display: none的定位</strong></h3><p>查看 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">busuanzi.pure.mini.js</a>，发现 <code>display: none</code> 在 <code>hides</code> 函数中被设置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">hides</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 hides 函数仅在一处被调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以是在 <code>a(b), scriptTag.parentElement.removeChild(scriptTag)</code> 抛出异常时容器被隐藏。</p><h3 id="3-3异常原因的定位"><a href="#3-3异常原因的定位" class="headerlink" title="3.3异常原因的定位"></a>3.3异常原因的定位</h3><p>由于在其它地方的 busuanzi 不会出现这一问题，而问题的原因还完全不清楚，为了尽可能还原原始环境以复现问题，我选择了使用 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/header-editor/">Firefox 的 Header Editor 插件</a> 直接在原博客进行测试。具体来说，就是在本地复制一份 busuanzi 的代码，然后跑一个 http server，在 Header Editor 里把 busuanzi 代码的请求重定向到本地的 http server。</p><p>首先，在 <code>catch</code> 中添加 <code>console.error(c)</code>，得到错误内容 <code>TypeError: scriptTag.parentElement is null</code>。</p><p>查看代码中 <code>scriptTag</code> 相关的部分：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">scriptTag = document.createElement("SCRIPT"), scriptTag.type = "text/javascript", scriptTag.defer = !0, scriptTag.src = a, scriptTag.referrerPolicy = "no-referrer-when-downgrade", document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，再在 <code>catch</code> 中添加 <code>s = document.querySelector("[src*=BusuanziCallback]"); console.log(s.parentElement);</code>，发现 <code>s.parentElement</code> 不是 <code>null</code>。</p><p>再添加 <code>console.log(s === scriptTag)</code>，发现结果是 <code>s</code> 和 <code>scriptTag</code> 不同，所以原因在于此时的 <code>scriptTag</code> 变量已经不指向 DOM 中的这个元素了。</p><h3 id="3-4定位到-live2d-插件"><a href="#3-4定位到-live2d-插件" class="headerlink" title="3.4定位到 live2d 插件"></a>3.4定位到 live2d 插件</h3><p>此时我原本是没有任何头绪的，但我发现，并不是每次刷新页面都会触发这一问题，所以没有触发问题时和触发问题时的差别就成了问题的突破口。</p><p>经过多次刷新，我发现，有一串 console 输出，在出现问题时总位于我在 <code>catch</code> 中添加的调试信息之前，而在没出现问题时则位于调试信息之后：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Live2D 2.1.00_1 live2d.core.js:5925:16profile : Desktop live2d.core.js:5913:16  [PROFILE_NAME] = Desktop live2d.core.js:5918:20  [USE_ADJUST_TRANSLATION] = false live2d.core.js:5918:20  [USE_CACHED_POLYGON_IMAGE] = false live2d.core.js:5918:20  [EXPAND_W] = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多亏了 live2d 的这串输出，我得以将问题定位到 live2d 插件上。</p><p>实际上，如果没有这些 console 输出，也可以通过 <code>&lt;head&gt;</code> 中 <code>L2Dwidget.0.min.js</code> 和 <code>busuanzi?jsonpCallback=BusuanziCallback</code> 两个 <code>&lt;script&gt;</code> 的相对位置发现问题，只不过这样的话就更隐蔽更难发现了。</p><h3 id="3-5在-live2d-插件中定位问题"><a href="#3-5在-live2d-插件中定位问题" class="headerlink" title="3.5在 live2d 插件中定位问题"></a>3.5在 live2d 插件中定位问题</h3><p>在 <code>L2Dwidget.min.js</code> 的第一行有源码地址以及时间：<code>/*! https://github.com/xiazeyu/live2d-widget.js built@2019-4-6 09:38:17 */</code></p><p>因为注释中给出的时间不是最新版本，先查看 git log 并 checkout 到相应时间的版本。</p><p>既然问题在于 <code>&lt;script&gt;</code> 元素被重新创建而导致原变量不指向 DOM 中元素，就在代码中 grep <code>head</code>，然后发现 <a href="https://github.com/xiazeyu/live2d-widget.js/blob/fa8f2d831a1a9e96cd85bd1ef593a3336aeac720/src/dialog/index.js#L4-L38">问题代码</a>：<code>document.head.innerHTML += ……</code></p><p>至此，问题原因已发现，就是 live2d 插件通过修改 <code>document.head.innerHTML</code> 来添加样式，导致 busuanzi 的 <code>scriptTag</code> 变量指向的不再是 DOM 中的 <code>&lt;script&gt;</code> 元素。</p><p>实际上，live2d 插件的这一问题 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61">已经修复</a>，但需要使用新版才行。</p><h3 id="3-6解决方法"><a href="#3-6解决方法" class="headerlink" title="3.6解决方法"></a>3.6解决方法</h3><h4 id="3-6-1修改-busuanzi-的解决方法"><a href="#3-6-1修改-busuanzi-的解决方法" class="headerlink" title="3.6.1修改 busuanzi 的解决方法"></a>3.6.1修改 busuanzi 的解决方法</h4><p>因为 busuanzi 的代码较短，而且本来就是用的外部的代码，改起来比较容易。</p><p>把 <code>scriptTag.parentElement.removeChild(scriptTag)</code> 修改为 <code>s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)</code> 即可。可以把修改后的静态文件放在博客里，然后修改 busuanzi <code>&lt;script&gt;</code> 的 <code>src</code>。</p><blockquote><p>相关代码</p><p>busuanzi.js的位置为\themes\hexo-theme-matery\source\libs\others\busuanzi.pure.mini.js</p><p>修改后的 busuanzi 代码（还在 catch 里加了个 console.error）：</p><pre class="line-numbers language-none"><code class="language-none">var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||"interactive"===document.readyState||"complete"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c&gt;a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.detachEvent("onreadystatechange",e),window==window.top&amp;&amp;(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.attachEvent("onreadystatechange",function(){/loaded|complete/.test(document.readyState)&amp;&amp;e()}),window==window.top&amp;&amp;(c=setInterval(function(){try{a||document.documentElement.doScroll("left")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c="BusuanziCallback_"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace("=BusuanziCallback","="+c),scriptTag=document.createElement("SCRIPT"),scriptTag.type="text/javascript",scriptTag.defer=!0,scriptTag.src=a,scriptTag.referrerPolicy="no-referrer-when-downgrade",document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)}catch(c){console.error(c),bszTag.hides()}})}}},bszCaller.fetch("//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:["site_pv","page_pv","site_uv"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById("busuanzi_value_"+b);c&amp;&amp;(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="none")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="inline")})}};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后找到</p><pre class="line-numbers language-none"><code class="language-none">&lt;script async="async" src="&lt;%- theme.jsDelivr.url %&gt;&lt;%-url_for(theme.libs.js.busuanzi) %&gt;"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果和我的一样就不需要修改，这也是主题默认的。成功解决</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292129016.png" alt="image-20220829212911099"></p><p>网上搜到的很多解决办法是把 <code>id="busuanzi_container_*"</code> 删掉，这样当然就不会被隐藏了，只不过这个隐藏本意是在出错时不把错误或者无意义的内容显示给访客，保留这一行为还是挺好的。</p><h4 id="3-6-2修改-live2d-的解决方法"><a href="#3-6-2修改-live2d-的解决方法" class="headerlink" title="3.6.2修改 live2d 的解决方法"></a>3.6.2修改 live2d 的解决方法</h4><p>总之，就是把 <code>innerHTML +=</code> 换成 <code>createElement</code> 和 <code>appendChild</code>，按 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61/files#diff-61426849230d9976d234f7c4ca195c623d9bb05a91d76b7ae51501e394f81860L10-R43">xiazeyu/live2d-widget.js#61</a> 改就行。</p><p>live2d 的代码还是挺长的，直接修改 minify 后的代码不太好。如果是 hexo 插件的话，要修改应该也蛮麻烦的。总之，如果你知道怎么改比较好的话可以改，不然的话还是推荐改 busuanzi。</p><h1 id="4-问题启示"><a href="#4-问题启示" class="headerlink" title="4.问题启示"></a>4.问题启示</h1><h2 id="4-1不要修改原-DOM-中的-innerHTML"><a href="#4-1不要修改原-DOM-中的-innerHTML" class="headerlink" title="4.1不要修改原 DOM 中的 innerHTML"></a>4.1不要修改原 DOM 中的 innerHTML</h2><p>直接修改 DOM 元素的 innerHTML 会让其中的元素都重新渲染（加载？创建？），不仅指向其中元素的变量会失效，也可能导致画面闪烁等问题（例如导致 live2d-widget 修复这一问题的不是 busuanzi 失效而是 <a href="https://github.com/EYHN/hexo-helper-live2d/issues/149">CSS 闪烁</a>）。</p><p>所以，如果是添加 DOM 元素，应当避免修改 <code>innerHTML</code>，而应当使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"><code>document.createElement</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"><code>Node.appendChild()</code></a> 以及 <code>removeChild</code>、<code>replaceChild</code>、<code>insertBefore</code> 等 API。</p><h2 id="4-2不要依赖于指向-DOM-元素的变量长时间不改变"><a href="#4-2不要依赖于指向-DOM-元素的变量长时间不改变" class="headerlink" title="4.2不要依赖于指向 DOM 元素的变量长时间不改变"></a>4.2不要依赖于指向 DOM 元素的变量长时间不改变</h2><p>如果 DOM 因各种原因部分重建，指向 DOM 元素的变量很可能不再指向当前 DOM 中的元素。所以，最好不要在过了一段时间后（例如在 callback 中）再次使用指向 DOM 元素的变量，而应当再次获取这一元素。</p><h2 id="4-3不要-silently-fail"><a href="#4-3不要-silently-fail" class="headerlink" title="4.3不要 silently fail"></a>4.3不要 silently fail</h2><p>在处理异常，尤其是未知的异常时，即使不 throw 出去，也最好用 <code>console.error</code> 等方法记录下来。记录在 console 中的错误信息并不会显示给普通用户，但可以给寻找问题所在的用户提供宝贵的提示信息。</p><h2 id="4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试"><a href="#4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试" class="headerlink" title="4.4使用 Header Editor 在对原环境最小修改的情况下进行调试"></a>4.4使用 Header Editor 在对原环境最小修改的情况下进行调试</h2><p>这次使用 Header Editor 调试还是我临时想到的（知道有这么个插件还是以前用 <a href="https://github.com/EndlessCheng/mahjong-helper">mahjong-helper</a>，当然现在已经没在用了）。一开始还用 pastebin 上传代码，效率极低，后来才想起来本地跑个 http server 就可以了..用这个插件来调试还是挺方便的。</p><h2 id="4-5留心依赖版本"><a href="#4-5留心依赖版本" class="headerlink" title="4.5留心依赖版本"></a>4.5留心依赖版本</h2><p>一开始我还在 GitHub 上搜到一个 <a href="https://github.com/JoeyBling/busuanzi.pure.js">busuanzi.pure.js</a>，调了一会儿才发现这个代码和 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</a> 不一样..</p><p>live2d 的版本也要注意开头包含时间的注释，因为最新版本已经把问题修复了。</p><p>本文是参考大佬的博客</p><p>原文连接:<a href="https://ouuan.moe/post/2022/08/busuanzi-and-live2d">https://ouuan.moe/post/2022/08/busuanzi-and-live2d</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> 不蒜子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片配置</title>
      <link href="/2022/08/25/hexo-tu-pian-pei-zhi/"/>
      <url>/2022/08/25/hexo-tu-pian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo图片配置"><a href="#hexo图片配置" class="headerlink" title="hexo图片配置"></a><strong>hexo图片配置</strong></h1><h2 id="1-img路径方法插入图片"><a href="#1-img路径方法插入图片" class="headerlink" title="1.img路径方法插入图片"></a>1.img路径方法插入图片</h2><p>markdown是支持html语句的，直接插入就可以使用了。所以该方法用到了HTML的标签，采用img标签相对链接的方式引入图片。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src='url或图片路径' height=400px'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1优缺点"><a href="#1-1优缺点" class="headerlink" title="1.1优缺点"></a>1.1优缺点</h3><p>优点：灵活，可以进行样式控制。</p><p>缺点：稍微麻烦了点。</p><h3 id="1-2适用环境"><a href="#1-2适用环境" class="headerlink" title="1.2适用环境"></a>1.2适用环境</h3><p>用于顶部导航选项的页面（如：关于、标签、分类）中引入图片。<br>因为在hexo生成静态界面时，同一篇文章会在多处页面生成，例如首页、文章详情页等，而不同页面与图片的相对位置是不一样的，而该方式hexo不会自动处理图片引用，所以使用该方式引用本地图片时必须以“/”开头，表示地址都是基于主目录定位的，不会出现有的界面图片显示错误的情况。不是“/”开头表相对当前文档位置进行定位。而顶部导航页只会在一处地方生成，所以不带“/”开头不会出现失效，建议也统一使用“/”，开头。</p><h3 id="1-3使用方法"><a href="#1-3使用方法" class="headerlink" title="1.3使用方法"></a>1.3使用方法</h3><p>在source中新建一个“images”目录用于存放图片，然后再使用“/images/图片名”引用图片。也可以分文章存放图片，会稍微麻烦点。</p><h2 id="2-方式插入图片"><a href="#2-方式插入图片" class="headerlink" title="2.!+[]+()方式插入图片"></a>2.!+[]+()方式插入图片</h2><p>!+[]+()是markdown的默认插入图片语句，采用了Base64方法插入本地图片。</p><p>使用markdown图片插入语句插入本地图片时可以使用Base64方法，base64方法只需要将图片转换为base64格式，将Base64字符串输入图片路径位置即可。网上可以找到在线图片转Base64的工具。</p><pre class="line-numbers language-none"><code class="language-none">![图片说明]('url或图片路径')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1优缺点"><a href="#2-1优缺点" class="headerlink" title="2.1优缺点"></a>2.1优缺点</h3><p>优点：插入图片简便。</p><p>缺点：不能控制图片样式。</p><h3 id="2-2适用环境"><a href="#2-2适用环境" class="headerlink" title="2.2适用环境"></a>2.2适用环境</h3><p>1.给普通文章插入图片，且无须样式控制；<br>2.给顶部导航选项的页面（如：关于、标签、分类）中插入图片，且无须样式控制。</p><p>3.使用该方法引入本地图片同样需要以“/”，开头定位，否则有的界面将会无法正常显示图片，也可以将引图片转换为Base64字符串，然后再引用Base64字符串，Base64字符串太长，写文章时很影响阅读，例如在使用githubpage+Gitalk时候，github的issure最大支持50个长度的字符，如将中文作为标题Base64字符串长度就超出了。</p><h3 id="2-3使用方法"><a href="#2-3使用方法" class="headerlink" title="2.3使用方法"></a>2.3使用方法</h3><p>插入网络图片比较简单，直接在图片链接中写入图片的网络链接就好。</p><p>示例：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg"></p><h2 id="3-通过模板引擎语法插入本地图片"><a href="#3-通过模板引擎语法插入本地图片" class="headerlink" title="3.通过模板引擎语法插入本地图片"></a>3.通过模板引擎语法插入本地图片</h2><h3 id="3-1优缺点"><a href="#3-1优缺点" class="headerlink" title="3.1优缺点"></a>3.1优缺点</h3><p>优点：插入较为便捷，图片按文章存储</p><p>缺点：不能控制样式，不能在顶部导航选项的页面（如：关于、标签、分类）中插入图片。</p><h3 id="3-2适用环境"><a href="#3-2适用环境" class="headerlink" title="3.2适用环境"></a>3.2适用环境</h3><p>普通文章中插入本地图片<br>在顶部导航选项的页面中使用该方法，什么都不会显示（不知道是不是我使用的主题的原因），总之是失败了，什么都没显示，在普通文章中可以正常显示。不能用于插入网络图片。</p><h3 id="3-3使用方法"><a href="#3-3使用方法" class="headerlink" title="3.3使用方法"></a>3.3使用方法</h3><p>要使用该方法首先要修改博客的配置文件“_config.yml”,把配置文件里的post_asset_folder:设置为true，表示启动Asset资源文件夹。这时候新建文章就会自动添加一个同名的文件夹，用于存放资源文件。</p><p>这时候我们把图片放入对应的文件夹即可，但是我们使用“!+[]+()”的格式插入图片却不能成功，因为只是将图片放入文件夹，hexo生成静态界面时并没有处理该图片，所以运行后就找不到图片了。</p><p>所以我们需要使用</p><pre class="line-numbers language-none"><code class="language-none">{%%}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法，使用该方法必须将图片放在新建文件时生成的与该文件同名的目录下，然后使用以下命令格式即可。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">{% asset_img 图片文件名 图片加载失败的描述 %}我文章文件为--index.md图片目录为--images/logo.png插入语句为{% asset_img logo.png 这是一张图片 %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-搭建图床方式"><a href="#4-搭建图床方式" class="headerlink" title="4.搭建图床方式"></a>4.搭建图床方式</h2><p>创建图床的目的是为本地图片等资源生成一个超链，然后将此连接嵌入到 <code>markdown</code> 编写的博客文章中，以此来解决博客中图片等资源的显示问题。本文介绍一种 PicGo + <a href="https://so.csdn.net/so/search?q=Github&amp;spm=1001.2101.3001.7020">Github</a> 搭建的免费图床。本文采用PicGo+Github图床搭建。测试图片地址见2.3示例图，图片地址：</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-1创建Github仓库"><a href="#4-1创建Github仓库" class="headerlink" title="4.1创建Github仓库"></a>4.1创建Github仓库</h3><p>首先打开浏览器访问github的官网。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827870.png" alt="image-20220825082449581"></p><p>点击右上角的+号新建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827106.png" alt="image-20220825082645630"></p><p>输入仓库名，点击创建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250829906.png" alt="image-20220825082856239"></p><h3 id="4-2生成Github-Token"><a href="#4-2生成Github-Token" class="headerlink" title="4.2生成Github Token"></a>4.2生成Github Token</h3><p>依次点击Settings -&gt; Developer settings-&gt;Personal access tokens</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857730.png" alt="image-20220825083114015"></p><p>需要注意的是要勾选repo选项</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857268.png" alt="image-20220825083245715"></p><p>创建成功后，会生成一串token，<strong>这串token之后不会再显示</strong>，请认真保存</p><h3 id="4-3下载-PicGo"><a href="#4-3下载-PicGo" class="headerlink" title="4.3下载 PicGo"></a>4.3下载 PicGo</h3><p>PicGo 是一款图片上传的工具，目前支持 SM.MS图床、微博图床，七牛图床，腾讯云COS，阿里云OSS，又拍云图床，Github 等图床，未来将支持更多图床。</p><p>点击 <a href="https://github.com/Molunerfinn/PicGo/releases">这里</a> 下载 PicGo 工具。根据操作系统选择对应的版本，安装到指定目录。</p><p>温馨提示：较低版本的PicGo不支持设置server等功能。当我下载了PicGo2.0.4版本时候是这个样子的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858951.png" alt="PicGo版本不支持server"></p><p>所以我选择了下载当前的最新版本2.3.0。</p><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">PicGo官网地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857802.png" alt="PicGo 2.3.0"></p><p>由于是国外网站，下载不便，因此这里为大家提供了网盘地址。</p><p><a href="https://www.aliyundrive.com/s/HKKaFtce4Cb">下载地址</a> </p><p>下载完成再行打开发现server选项出现了</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857879.png" alt="PicGo有了"></p><h3 id="4-4配置-PicGo"><a href="#4-4配置-PicGo" class="headerlink" title="4.4配置 PicGo"></a>4.4配置 PicGo</h3><h4 id="4-4-1-github图床"><a href="#4-4-1-github图床" class="headerlink" title="4.4.1 github图床"></a>4.4.1 github图床</h4><p>选择github图床，配置如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242043314.png" alt="image-20220824204355709"></p><p>如果有需要的话可以设置为默认图床，接下来就可以上传图片并同步到你的GitHub仓库了。此时图床已经建立完成，之后的图片以Markdown的格式上传进行引用就大功告成了。</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/Yourname/Repositoryname/分支名/img/图片名.图片格式&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4-2-开启server"><a href="#4-4-2-开启server" class="headerlink" title="4.4.2 开启server"></a>4.4.2 开启server</h4><p>PicGo-Server的默认端口是36677，点击开即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858740.png" alt="image-20220825084500728"></p><h3 id="4-5配置-Markdown"><a href="#4-5配置-Markdown" class="headerlink" title="4.5配置 Markdown"></a>4.5配置 Markdown</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写，说人话就是删减版的HTML语言 。</p><h3 id="4-5-1Typora简介"><a href="#4-5-1Typora简介" class="headerlink" title="4.5.1Typora简介"></a>4.5.1Typora简介</h3><p>Typora是一个跨平台的markdown编辑器，使用markdown编辑器写文章优点是排版简洁，痛点则是无法像Word那样直接嵌入图片，插入的图片实际上插入的是图片的路径（可以是本地路径也可以是网络路径），使用网络路径的优点是文档可以跨平台跨设备浏览，需要注意的是早期免费版Typora不支持图床的功能，有人说下载最后一个免费版本0.11.18，当我下载安装完成时候，typora打开报错：This beta version of Typora is expired, please download and install a newer version.也就是说，使用的是0.11.18版本，获取系统时间停止免费版本使用，人家想要你用收费的。网上也提供了两种解决方案，一种是改系统时间，但是修改系统时间后其他软件和功能的时间冲突。另一种是重装低版本的typora，很显然，更低版本的Typora不可能支持图床功能。因此，需要更新Typora版本，推荐大家购买正版支持。这里也为大家提供一个版本，亲测可用，亲测可用，亲测可用。</p><p><a href="https://www.aliyundrive.com/s/DLU5Wveop9Z">下载地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242031850.png" alt="image-20220824203128807"></p><h3 id="4-5-2错误解决"><a href="#4-5-2错误解决" class="headerlink" title="4.5.2错误解决"></a>4.5.2错误解决</h3><p>Failed to fetch</p><pre class="line-numbers language-none"><code class="language-none">Failed to fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误一般是由<strong>端口设置错误</strong>造成的，至于我为什么知道，你看看log文件就懂了。打开picgo的log文件。错误提示是端口繁忙。</p><p><code>解决方法</code>：打开picgo设置，点击设置代理选项，<strong>将端口改为36677端口</strong>，这是picgo推荐的默认端口号，然后保存，成功。</p><p>有的时候，我们的老朋友Failed to fetch还是如约而至，打开端口设置一看，怎么变成了366771呢，问题在于端口冲突，如果你打开了多个picgo程序，就会端口冲突，<strong>picgo自动帮你把36677端口改为366771端口</strong>，导致错误。log文件里也写得很清楚。</p><pre class="line-numbers language-none"><code class="language-none">错误二：{“success”,false}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误相信也有很多小伙伴遇到了，原因是<strong>文件名冲突</strong>了，如果你上传过一张image1.jpg的图片，再上传名称一样的图片就会失败，查看log文件里也写到了。</p><p>办法也很简单，打开picgo设置，将<strong>上传前重命名或者时间戳重命名打开</strong>。如图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242036804.png" alt="image-20220824203657532"></p><p>再次上传文件，出现一个确认文件名称的对话框，点击确定，上传成功！</p><p><strong>授人以鱼不如授人以渔</strong>，上面的三种情况解决方法教给大家了，但是错误总是千奇百怪层出不穷的，如果下次出现上传错误的提示，请大家找到picgo的log文件，自己查看问题的原因嗷。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242038555.png" alt="image-20220824203834034"></p><h2 id="5-hexo-asset-image插件"><a href="#5-hexo-asset-image插件" class="headerlink" title="5.hexo-asset-image插件"></a>5.hexo-asset-image插件</h2><p>毕竟是存储在github仓库里面的，网络不佳根本加载不出来，所以大部分人还是选择使用了hexo-asset-image插件来上传图片，Hexo 本地图片插件: 就是转换 图片相对路径 为 asset_img，能够在 Typora 等 Markdown 编辑器预览 与 Hexo 发布预览 时均能正常显示图片。</p><p>首先下载插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的文件结构是这样的</p><pre class="line-numbers language-none"><code class="language-none">article-Publish├── banner.jpg├── logo.jpg└── rules.jpgarticle-Publish.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次，需要修改hexo根目录 <code>_config.yml</code>文件 <code>post_asset_folder: true</code></p><p>此外，还需要配置Typora的偏好设置，详见4.5.1图。</p><p>完成之后只需要使用</p><pre class="line-numbers language-none"><code class="language-none">![]()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法引用图片，无论是网络图片还是本地图片，插件都会自动帮助我们将图片下载到source/image目录，然后自动更新图片引用，在发布到github上时候，会自动在当前目录下生成一个于文章同名的文件夹，可以说非常方便。</p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025209.png" alt="image-20220824202521064"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025989.png" alt="image-20220824202439164"></p><p>另外hexo-theme-matery也提供了cdn加速功能，只需在主题的_config.yml文件中配置</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/用户名/githubpages地址@分支名/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器输入即可访问到</p><pre class="line-numbers language-none"><code class="language-none">[cdn资源访问]&nbsp;https://cdn.jsdelivr.net/gh/Beaumon/beaumon.github.io@master/&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样能够查看到插件生成的目录hexo-theme-matery-主题美化。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250933131.png" alt="jddelivr 图片"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">方案一<span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">'url或图片路径'</span> <span class="token assign-left variable">height</span><span class="token operator">=</span>400px<span class="token string">'&gt;方案二![图片说明]('</span>url或图片路径'<span class="token punctuation">)</span>方案三<span class="token punctuation">{</span>% asset_img logo.png 这是一张图片 %<span class="token punctuation">}</span>方案四搭建图床大家可根据自己的喜好自行选择使用哪一种图片引用方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/23/hello-world/"/>
      <url>/2022/08/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208261730103.png"></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
