<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>不蒜子统计不显示问题</title>
      <link href="/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/"/>
      <url>/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="不蒜子-busuanzi统计不显示的根本原因及解决办法"><a href="#不蒜子-busuanzi统计不显示的根本原因及解决办法" class="headerlink" title="不蒜子(busuanzi统计不显示的根本原因及解决办法)"></a>不蒜子(busuanzi统计不显示的根本原因及解决办法)</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>我使用的 Hexo 博客遇到了的 busuanzi 访问量统计不显示问题，搜索了csdn，知乎，githubstackoverflow，等等也没找到解决办法，直到我发现了大佬的文章(链接见文章末尾)。</p><p>经过一番研究发现是 busuanzi 代码的一处问题和 <a href="https://github.com/EYHN/hexo-helper-live2d">live2d看板娘插件</a>的一处问题凑在一起导致的。</p><p>今天在写博客之前先搜了一下“busuanzi live2d”，发现搜出来一堆结果，我还以为我白研究了..结果点进去一看，第一页结果里没有一个指出了问题的根本原因，而且修复方法基本上都是删 feature 或者换组件，但实际上只要知道问题的根本原因就可以在不妨碍正常功能运作的前提下进行修复。</p><h1 id="2-问题描述"><a href="#2-问题描述" class="headerlink" title="2.问题描述"></a>2.问题描述</h1><p>在一个同时启用了 busuanzi 访问量统计和 live2d 插件的 Hexo 博客里，访问或刷新博客时有大概率 busuanzi 会被隐藏。</p><p>被隐藏的具体表现为，刷新的瞬间 id 为 <code>busuanzi_container_*</code> 的容器是显示的，然后容器的样式很快被设为 <code>display: none</code>。</p><p>查看 F12 的 Network，busuanzi 相关请求正常返回；console 中没有报错。</p><h1 id="3-问题定位"><a href="#3-问题定位" class="headerlink" title="3.问题定位"></a>3.问题定位</h1><h3 id="3-1标签对比："><a href="#3-1标签对比：" class="headerlink" title="3.1标签对比："></a>3.1标签对比：</h3><p><strong>对比发现出现了多余的style=”display: none”;</strong></p><blockquote><p>正常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;次    &lt;/span&gt;&lt;span id="busuanzi_container_site_uv"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;人    &lt;/span&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>异常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"         class="white-color"&gt;2303950&lt;/span&gt;&amp;nbsp;次&lt;/span&gt;&lt;span id="busuanzi_container_site_uv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"         class="white-color"&gt;160644&lt;/span&gt;&amp;nbsp;人&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2查看display-none的定位"><a href="#3-2查看display-none的定位" class="headerlink" title="3.2查看display: none的定位"></a><strong>3.2查看display: none的定位</strong></h3><p>查看 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">busuanzi.pure.mini.js</a>，发现 <code>display: none</code> 在 <code>hides</code> 函数中被设置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">hides</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 hides 函数仅在一处被调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以是在 <code>a(b), scriptTag.parentElement.removeChild(scriptTag)</code> 抛出异常时容器被隐藏。</p><h3 id="3-3异常原因的定位"><a href="#3-3异常原因的定位" class="headerlink" title="3.3异常原因的定位"></a>3.3异常原因的定位</h3><p>由于在其它地方的 busuanzi 不会出现这一问题，而问题的原因还完全不清楚，为了尽可能还原原始环境以复现问题，我选择了使用 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/header-editor/">Firefox 的 Header Editor 插件</a> 直接在原博客进行测试。具体来说，就是在本地复制一份 busuanzi 的代码，然后跑一个 http server，在 Header Editor 里把 busuanzi 代码的请求重定向到本地的 http server。</p><p>首先，在 <code>catch</code> 中添加 <code>console.error(c)</code>，得到错误内容 <code>TypeError: scriptTag.parentElement is null</code>。</p><p>查看代码中 <code>scriptTag</code> 相关的部分：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">scriptTag = document.createElement("SCRIPT"), scriptTag.type = "text/javascript", scriptTag.defer = !0, scriptTag.src = a, scriptTag.referrerPolicy = "no-referrer-when-downgrade", document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，再在 <code>catch</code> 中添加 <code>s = document.querySelector("[src*=BusuanziCallback]"); console.log(s.parentElement);</code>，发现 <code>s.parentElement</code> 不是 <code>null</code>。</p><p>再添加 <code>console.log(s === scriptTag)</code>，发现结果是 <code>s</code> 和 <code>scriptTag</code> 不同，所以原因在于此时的 <code>scriptTag</code> 变量已经不指向 DOM 中的这个元素了。</p><h3 id="3-4定位到-live2d-插件"><a href="#3-4定位到-live2d-插件" class="headerlink" title="3.4定位到 live2d 插件"></a>3.4定位到 live2d 插件</h3><p>此时我原本是没有任何头绪的，但我发现，并不是每次刷新页面都会触发这一问题，所以没有触发问题时和触发问题时的差别就成了问题的突破口。</p><p>经过多次刷新，我发现，有一串 console 输出，在出现问题时总位于我在 <code>catch</code> 中添加的调试信息之前，而在没出现问题时则位于调试信息之后：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Live2D 2.1.00_1 live2d.core.js:5925:16profile : Desktop live2d.core.js:5913:16  [PROFILE_NAME] = Desktop live2d.core.js:5918:20  [USE_ADJUST_TRANSLATION] = false live2d.core.js:5918:20  [USE_CACHED_POLYGON_IMAGE] = false live2d.core.js:5918:20  [EXPAND_W] = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多亏了 live2d 的这串输出，我得以将问题定位到 live2d 插件上。</p><p>实际上，如果没有这些 console 输出，也可以通过 <code>&lt;head&gt;</code> 中 <code>L2Dwidget.0.min.js</code> 和 <code>busuanzi?jsonpCallback=BusuanziCallback</code> 两个 <code>&lt;script&gt;</code> 的相对位置发现问题，只不过这样的话就更隐蔽更难发现了。</p><h3 id="3-5在-live2d-插件中定位问题"><a href="#3-5在-live2d-插件中定位问题" class="headerlink" title="3.5在 live2d 插件中定位问题"></a>3.5在 live2d 插件中定位问题</h3><p>在 <code>L2Dwidget.min.js</code> 的第一行有源码地址以及时间：<code>/*! https://github.com/xiazeyu/live2d-widget.js built@2019-4-6 09:38:17 */</code></p><p>因为注释中给出的时间不是最新版本，先查看 git log 并 checkout 到相应时间的版本。</p><p>既然问题在于 <code>&lt;script&gt;</code> 元素被重新创建而导致原变量不指向 DOM 中元素，就在代码中 grep <code>head</code>，然后发现 <a href="https://github.com/xiazeyu/live2d-widget.js/blob/fa8f2d831a1a9e96cd85bd1ef593a3336aeac720/src/dialog/index.js#L4-L38">问题代码</a>：<code>document.head.innerHTML += ……</code></p><p>至此，问题原因已发现，就是 live2d 插件通过修改 <code>document.head.innerHTML</code> 来添加样式，导致 busuanzi 的 <code>scriptTag</code> 变量指向的不再是 DOM 中的 <code>&lt;script&gt;</code> 元素。</p><p>实际上，live2d 插件的这一问题 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61">已经修复</a>，但需要使用新版才行。</p><h3 id="3-6解决方法"><a href="#3-6解决方法" class="headerlink" title="3.6解决方法"></a>3.6解决方法</h3><h4 id="3-6-1修改-busuanzi-的解决方法"><a href="#3-6-1修改-busuanzi-的解决方法" class="headerlink" title="3.6.1修改 busuanzi 的解决方法"></a>3.6.1修改 busuanzi 的解决方法</h4><p>因为 busuanzi 的代码较短，而且本来就是用的外部的代码，改起来比较容易。</p><p>把 <code>scriptTag.parentElement.removeChild(scriptTag)</code> 修改为 <code>s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)</code> 即可。可以把修改后的静态文件放在博客里，然后修改 busuanzi <code>&lt;script&gt;</code> 的 <code>src</code>。</p><blockquote><p>相关代码</p><p>busuanzi.js的位置为\themes\hexo-theme-matery\source\libs\others\busuanzi.pure.mini.js</p><p>修改后的 busuanzi 代码（还在 catch 里加了个 console.error）：</p><pre class="line-numbers language-none"><code class="language-none">var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||"interactive"===document.readyState||"complete"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c&gt;a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.detachEvent("onreadystatechange",e),window==window.top&amp;&amp;(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.attachEvent("onreadystatechange",function(){/loaded|complete/.test(document.readyState)&amp;&amp;e()}),window==window.top&amp;&amp;(c=setInterval(function(){try{a||document.documentElement.doScroll("left")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c="BusuanziCallback_"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace("=BusuanziCallback","="+c),scriptTag=document.createElement("SCRIPT"),scriptTag.type="text/javascript",scriptTag.defer=!0,scriptTag.src=a,scriptTag.referrerPolicy="no-referrer-when-downgrade",document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)}catch(c){console.error(c),bszTag.hides()}})}}},bszCaller.fetch("//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:["site_pv","page_pv","site_uv"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById("busuanzi_value_"+b);c&amp;&amp;(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="none")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="inline")})}};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后找到</p><pre class="line-numbers language-none"><code class="language-none">&lt;script async="async" src="&lt;%- theme.jsDelivr.url %&gt;&lt;%-url_for(theme.libs.js.busuanzi) %&gt;"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果和我的一样就不需要修改，这也是主题默认的。成功解决</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292129016.png" alt="image-20220829212911099"></p><p>网上搜到的很多解决办法是把 <code>id="busuanzi_container_*"</code> 删掉，这样当然就不会被隐藏了，只不过这个隐藏本意是在出错时不把错误或者无意义的内容显示给访客，保留这一行为还是挺好的。</p><h4 id="3-6-2修改-live2d-的解决方法"><a href="#3-6-2修改-live2d-的解决方法" class="headerlink" title="3.6.2修改 live2d 的解决方法"></a>3.6.2修改 live2d 的解决方法</h4><p>总之，就是把 <code>innerHTML +=</code> 换成 <code>createElement</code> 和 <code>appendChild</code>，按 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61/files#diff-61426849230d9976d234f7c4ca195c623d9bb05a91d76b7ae51501e394f81860L10-R43">xiazeyu/live2d-widget.js#61</a> 改就行。</p><p>live2d 的代码还是挺长的，直接修改 minify 后的代码不太好。如果是 hexo 插件的话，要修改应该也蛮麻烦的。总之，如果你知道怎么改比较好的话可以改，不然的话还是推荐改 busuanzi。</p><h1 id="4-问题启示"><a href="#4-问题启示" class="headerlink" title="4.问题启示"></a>4.问题启示</h1><h2 id="4-1不要修改原-DOM-中的-innerHTML"><a href="#4-1不要修改原-DOM-中的-innerHTML" class="headerlink" title="4.1不要修改原 DOM 中的 innerHTML"></a>4.1不要修改原 DOM 中的 innerHTML</h2><p>直接修改 DOM 元素的 innerHTML 会让其中的元素都重新渲染（加载？创建？），不仅指向其中元素的变量会失效，也可能导致画面闪烁等问题（例如导致 live2d-widget 修复这一问题的不是 busuanzi 失效而是 <a href="https://github.com/EYHN/hexo-helper-live2d/issues/149">CSS 闪烁</a>）。</p><p>所以，如果是添加 DOM 元素，应当避免修改 <code>innerHTML</code>，而应当使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"><code>document.createElement</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"><code>Node.appendChild()</code></a> 以及 <code>removeChild</code>、<code>replaceChild</code>、<code>insertBefore</code> 等 API。</p><h2 id="4-2不要依赖于指向-DOM-元素的变量长时间不改变"><a href="#4-2不要依赖于指向-DOM-元素的变量长时间不改变" class="headerlink" title="4.2不要依赖于指向 DOM 元素的变量长时间不改变"></a>4.2不要依赖于指向 DOM 元素的变量长时间不改变</h2><p>如果 DOM 因各种原因部分重建，指向 DOM 元素的变量很可能不再指向当前 DOM 中的元素。所以，最好不要在过了一段时间后（例如在 callback 中）再次使用指向 DOM 元素的变量，而应当再次获取这一元素。</p><h2 id="4-3不要-silently-fail"><a href="#4-3不要-silently-fail" class="headerlink" title="4.3不要 silently fail"></a>4.3不要 silently fail</h2><p>在处理异常，尤其是未知的异常时，即使不 throw 出去，也最好用 <code>console.error</code> 等方法记录下来。记录在 console 中的错误信息并不会显示给普通用户，但可以给寻找问题所在的用户提供宝贵的提示信息。</p><h2 id="4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试"><a href="#4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试" class="headerlink" title="4.4使用 Header Editor 在对原环境最小修改的情况下进行调试"></a>4.4使用 Header Editor 在对原环境最小修改的情况下进行调试</h2><p>这次使用 Header Editor 调试还是我临时想到的（知道有这么个插件还是以前用 <a href="https://github.com/EndlessCheng/mahjong-helper">mahjong-helper</a>，当然现在已经没在用了）。一开始还用 pastebin 上传代码，效率极低，后来才想起来本地跑个 http server 就可以了..用这个插件来调试还是挺方便的。</p><h2 id="4-5留心依赖版本"><a href="#4-5留心依赖版本" class="headerlink" title="4.5留心依赖版本"></a>4.5留心依赖版本</h2><p>一开始我还在 GitHub 上搜到一个 <a href="https://github.com/JoeyBling/busuanzi.pure.js">busuanzi.pure.js</a>，调了一会儿才发现这个代码和 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</a> 不一样..</p><p>live2d 的版本也要注意开头包含时间的注释，因为最新版本已经把问题修复了。</p><p>本文是参考大佬的博客</p><p>原文连接:<a href="https://ouuan.moe/post/2022/08/busuanzi-and-live2d">https://ouuan.moe/post/2022/08/busuanzi-and-live2d</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> 不蒜子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片配置</title>
      <link href="/2022/08/25/hexo-tu-pian-pei-zhi/"/>
      <url>/2022/08/25/hexo-tu-pian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo图片配置"><a href="#hexo图片配置" class="headerlink" title="hexo图片配置"></a><strong>hexo图片配置</strong></h1><h2 id="1-img路径方法插入图片"><a href="#1-img路径方法插入图片" class="headerlink" title="1.img路径方法插入图片"></a>1.img路径方法插入图片</h2><p>markdown是支持html语句的，直接插入就可以使用了。所以该方法用到了HTML的标签，采用img标签相对链接的方式引入图片。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src='url或图片路径' height=400px'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1优缺点"><a href="#1-1优缺点" class="headerlink" title="1.1优缺点"></a>1.1优缺点</h3><p>优点：灵活，可以进行样式控制。</p><p>缺点：稍微麻烦了点。</p><h3 id="1-2适用环境"><a href="#1-2适用环境" class="headerlink" title="1.2适用环境"></a>1.2适用环境</h3><p>用于顶部导航选项的页面（如：关于、标签、分类）中引入图片。<br>因为在hexo生成静态界面时，同一篇文章会在多处页面生成，例如首页、文章详情页等，而不同页面与图片的相对位置是不一样的，而该方式hexo不会自动处理图片引用，所以使用该方式引用本地图片时必须以“/”开头，表示地址都是基于主目录定位的，不会出现有的界面图片显示错误的情况。不是“/”开头表相对当前文档位置进行定位。而顶部导航页只会在一处地方生成，所以不带“/”开头不会出现失效，建议也统一使用“/”，开头。</p><h3 id="1-3使用方法"><a href="#1-3使用方法" class="headerlink" title="1.3使用方法"></a>1.3使用方法</h3><p>在source中新建一个“images”目录用于存放图片，然后再使用“/images/图片名”引用图片。也可以分文章存放图片，会稍微麻烦点。</p><h2 id="2-方式插入图片"><a href="#2-方式插入图片" class="headerlink" title="2.!+[]+()方式插入图片"></a>2.!+[]+()方式插入图片</h2><p>!+[]+()是markdown的默认插入图片语句，采用了Base64方法插入本地图片。</p><p>使用markdown图片插入语句插入本地图片时可以使用Base64方法，base64方法只需要将图片转换为base64格式，将Base64字符串输入图片路径位置即可。网上可以找到在线图片转Base64的工具。</p><pre class="line-numbers language-none"><code class="language-none">![图片说明]('url或图片路径')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1优缺点"><a href="#2-1优缺点" class="headerlink" title="2.1优缺点"></a>2.1优缺点</h3><p>优点：插入图片简便。</p><p>缺点：不能控制图片样式。</p><h3 id="2-2适用环境"><a href="#2-2适用环境" class="headerlink" title="2.2适用环境"></a>2.2适用环境</h3><p>1.给普通文章插入图片，且无须样式控制；<br>2.给顶部导航选项的页面（如：关于、标签、分类）中插入图片，且无须样式控制。</p><p>3.使用该方法引入本地图片同样需要以“/”，开头定位，否则有的界面将会无法正常显示图片，也可以将引图片转换为Base64字符串，然后再引用Base64字符串，Base64字符串太长，写文章时很影响阅读，例如在使用githubpage+Gitalk时候，github的issure最大支持50个长度的字符，如将中文作为标题Base64字符串长度就超出了。</p><h3 id="2-3使用方法"><a href="#2-3使用方法" class="headerlink" title="2.3使用方法"></a>2.3使用方法</h3><p>插入网络图片比较简单，直接在图片链接中写入图片的网络链接就好。</p><p>示例：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg"></p><h2 id="3-通过模板引擎语法插入本地图片"><a href="#3-通过模板引擎语法插入本地图片" class="headerlink" title="3.通过模板引擎语法插入本地图片"></a>3.通过模板引擎语法插入本地图片</h2><h3 id="3-1优缺点"><a href="#3-1优缺点" class="headerlink" title="3.1优缺点"></a>3.1优缺点</h3><p>优点：插入较为便捷，图片按文章存储</p><p>缺点：不能控制样式，不能在顶部导航选项的页面（如：关于、标签、分类）中插入图片。</p><h3 id="3-2适用环境"><a href="#3-2适用环境" class="headerlink" title="3.2适用环境"></a>3.2适用环境</h3><p>普通文章中插入本地图片<br>在顶部导航选项的页面中使用该方法，什么都不会显示（不知道是不是我使用的主题的原因），总之是失败了，什么都没显示，在普通文章中可以正常显示。不能用于插入网络图片。</p><h3 id="3-3使用方法"><a href="#3-3使用方法" class="headerlink" title="3.3使用方法"></a>3.3使用方法</h3><p>要使用该方法首先要修改博客的配置文件“_config.yml”,把配置文件里的post_asset_folder:设置为true，表示启动Asset资源文件夹。这时候新建文章就会自动添加一个同名的文件夹，用于存放资源文件。</p><p>这时候我们把图片放入对应的文件夹即可，但是我们使用“!+[]+()”的格式插入图片却不能成功，因为只是将图片放入文件夹，hexo生成静态界面时并没有处理该图片，所以运行后就找不到图片了。</p><p>所以我们需要使用</p><pre class="line-numbers language-none"><code class="language-none">{%%}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法，使用该方法必须将图片放在新建文件时生成的与该文件同名的目录下，然后使用以下命令格式即可。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">{% asset_img 图片文件名 图片加载失败的描述 %}我文章文件为--index.md图片目录为--images/logo.png插入语句为{% asset_img logo.png 这是一张图片 %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-搭建图床方式"><a href="#4-搭建图床方式" class="headerlink" title="4.搭建图床方式"></a>4.搭建图床方式</h2><p>创建图床的目的是为本地图片等资源生成一个超链，然后将此连接嵌入到 <code>markdown</code> 编写的博客文章中，以此来解决博客中图片等资源的显示问题。本文介绍一种 PicGo + <a href="https://so.csdn.net/so/search?q=Github&amp;spm=1001.2101.3001.7020">Github</a> 搭建的免费图床。本文采用PicGo+Github图床搭建。测试图片地址见2.3示例图，图片地址：</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-1创建Github仓库"><a href="#4-1创建Github仓库" class="headerlink" title="4.1创建Github仓库"></a>4.1创建Github仓库</h3><p>首先打开浏览器访问github的官网。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827870.png" alt="image-20220825082449581"></p><p>点击右上角的+号新建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827106.png" alt="image-20220825082645630"></p><p>输入仓库名，点击创建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250829906.png" alt="image-20220825082856239"></p><h3 id="4-2生成Github-Token"><a href="#4-2生成Github-Token" class="headerlink" title="4.2生成Github Token"></a>4.2生成Github Token</h3><p>依次点击Settings -&gt; Developer settings-&gt;Personal access tokens</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857730.png" alt="image-20220825083114015"></p><p>需要注意的是要勾选repo选项</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857268.png" alt="image-20220825083245715"></p><p>创建成功后，会生成一串token，<strong>这串token之后不会再显示</strong>，请认真保存</p><h3 id="4-3下载-PicGo"><a href="#4-3下载-PicGo" class="headerlink" title="4.3下载 PicGo"></a>4.3下载 PicGo</h3><p>PicGo 是一款图片上传的工具，目前支持 SM.MS图床、微博图床，七牛图床，腾讯云COS，阿里云OSS，又拍云图床，Github 等图床，未来将支持更多图床。</p><p>点击 <a href="https://github.com/Molunerfinn/PicGo/releases">这里</a> 下载 PicGo 工具。根据操作系统选择对应的版本，安装到指定目录。</p><p>温馨提示：较低版本的PicGo不支持设置server等功能。当我下载了PicGo2.0.4版本时候是这个样子的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858951.png" alt="PicGo版本不支持server"></p><p>所以我选择了下载当前的最新版本2.3.0。</p><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">PicGo官网地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857802.png" alt="PicGo 2.3.0"></p><p>由于是国外网站，下载不便，因此这里为大家提供了网盘地址。</p><p><a href="https://www.aliyundrive.com/s/HKKaFtce4Cb">下载地址</a> </p><p>下载完成再行打开发现server选项出现了</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857879.png" alt="PicGo有了"></p><h3 id="4-4配置-PicGo"><a href="#4-4配置-PicGo" class="headerlink" title="4.4配置 PicGo"></a>4.4配置 PicGo</h3><h4 id="4-4-1-github图床"><a href="#4-4-1-github图床" class="headerlink" title="4.4.1 github图床"></a>4.4.1 github图床</h4><p>选择github图床，配置如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242043314.png" alt="image-20220824204355709"></p><p>如果有需要的话可以设置为默认图床，接下来就可以上传图片并同步到你的GitHub仓库了。此时图床已经建立完成，之后的图片以Markdown的格式上传进行引用就大功告成了。</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/Yourname/Repositoryname/分支名/img/图片名.图片格式&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4-2-开启server"><a href="#4-4-2-开启server" class="headerlink" title="4.4.2 开启server"></a>4.4.2 开启server</h4><p>PicGo-Server的默认端口是36677，点击开即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858740.png" alt="image-20220825084500728"></p><h3 id="4-5配置-Markdown"><a href="#4-5配置-Markdown" class="headerlink" title="4.5配置 Markdown"></a>4.5配置 Markdown</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写，说人话就是删减版的HTML语言 。</p><h3 id="4-5-1Typora简介"><a href="#4-5-1Typora简介" class="headerlink" title="4.5.1Typora简介"></a>4.5.1Typora简介</h3><p>Typora是一个跨平台的markdown编辑器，使用markdown编辑器写文章优点是排版简洁，痛点则是无法像Word那样直接嵌入图片，插入的图片实际上插入的是图片的路径（可以是本地路径也可以是网络路径），使用网络路径的优点是文档可以跨平台跨设备浏览，需要注意的是早期免费版Typora不支持图床的功能，有人说下载最后一个免费版本0.11.18，当我下载安装完成时候，typora打开报错：This beta version of Typora is expired, please download and install a newer version.也就是说，使用的是0.11.18版本，获取系统时间停止免费版本使用，人家想要你用收费的。网上也提供了两种解决方案，一种是改系统时间，但是修改系统时间后其他软件和功能的时间冲突。另一种是重装低版本的typora，很显然，更低版本的Typora不可能支持图床功能。因此，需要更新Typora版本，推荐大家购买正版支持。这里也为大家提供一个版本，亲测可用，亲测可用，亲测可用。</p><p><a href="https://www.aliyundrive.com/s/DLU5Wveop9Z">下载地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242031850.png" alt="image-20220824203128807"></p><h3 id="4-5-2错误解决"><a href="#4-5-2错误解决" class="headerlink" title="4.5.2错误解决"></a>4.5.2错误解决</h3><p>Failed to fetch</p><pre class="line-numbers language-none"><code class="language-none">Failed to fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误一般是由<strong>端口设置错误</strong>造成的，至于我为什么知道，你看看log文件就懂了。打开picgo的log文件。错误提示是端口繁忙。</p><p><code>解决方法</code>：打开picgo设置，点击设置代理选项，<strong>将端口改为36677端口</strong>，这是picgo推荐的默认端口号，然后保存，成功。</p><p>有的时候，我们的老朋友Failed to fetch还是如约而至，打开端口设置一看，怎么变成了366771呢，问题在于端口冲突，如果你打开了多个picgo程序，就会端口冲突，<strong>picgo自动帮你把36677端口改为366771端口</strong>，导致错误。log文件里也写得很清楚。</p><pre class="line-numbers language-none"><code class="language-none">错误二：{“success”,false}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误相信也有很多小伙伴遇到了，原因是<strong>文件名冲突</strong>了，如果你上传过一张image1.jpg的图片，再上传名称一样的图片就会失败，查看log文件里也写到了。</p><p>办法也很简单，打开picgo设置，将<strong>上传前重命名或者时间戳重命名打开</strong>。如图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242036804.png" alt="image-20220824203657532"></p><p>再次上传文件，出现一个确认文件名称的对话框，点击确定，上传成功！</p><p><strong>授人以鱼不如授人以渔</strong>，上面的三种情况解决方法教给大家了，但是错误总是千奇百怪层出不穷的，如果下次出现上传错误的提示，请大家找到picgo的log文件，自己查看问题的原因嗷。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242038555.png" alt="image-20220824203834034"></p><h2 id="5-hexo-asset-image插件"><a href="#5-hexo-asset-image插件" class="headerlink" title="5.hexo-asset-image插件"></a>5.hexo-asset-image插件</h2><p>毕竟是存储在github仓库里面的，网络不佳根本加载不出来，所以大部分人还是选择使用了hexo-asset-image插件来上传图片，Hexo 本地图片插件: 就是转换 图片相对路径 为 asset_img，能够在 Typora 等 Markdown 编辑器预览 与 Hexo 发布预览 时均能正常显示图片。</p><p>首先下载插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的文件结构是这样的</p><pre class="line-numbers language-none"><code class="language-none">article-Publish├── banner.jpg├── logo.jpg└── rules.jpgarticle-Publish.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次，需要修改hexo根目录 <code>_config.yml</code>文件 <code>post_asset_folder: true</code></p><p>此外，还需要配置Typora的偏好设置，详见4.5.1图。</p><p>完成之后只需要使用</p><pre class="line-numbers language-none"><code class="language-none">![]()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法引用图片，无论是网络图片还是本地图片，插件都会自动帮助我们将图片下载到source/image目录，然后自动更新图片引用，在发布到github上时候，会自动在当前目录下生成一个于文章同名的文件夹，可以说非常方便。</p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025209.png" alt="image-20220824202521064"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025989.png" alt="image-20220824202439164"></p><p>另外hexo-theme-matery也提供了cdn加速功能，只需在主题的_config.yml文件中配置</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/用户名/githubpages地址@分支名/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器输入即可访问到</p><pre class="line-numbers language-none"><code class="language-none">[cdn资源访问]&nbsp;https://cdn.jsdelivr.net/gh/Beaumon/beaumon.github.io@master/&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样能够查看到插件生成的目录hexo-theme-matery-主题美化。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250933131.png" alt="jddelivr 图片"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">方案一<span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">'url或图片路径'</span> <span class="token assign-left variable">height</span><span class="token operator">=</span>400px<span class="token string">'&gt;方案二![图片说明]('</span>url或图片路径'<span class="token punctuation">)</span>方案三<span class="token punctuation">{</span>% asset_img logo.png 这是一张图片 %<span class="token punctuation">}</span>方案四搭建图床大家可根据自己的喜好自行选择使用哪一种图片引用方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/23/hello-world/"/>
      <url>/2022/08/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208261730103.png"></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
