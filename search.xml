<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>聊聊数据库建表的15个小技巧</title>
      <link href="/2022/08/29/liao-liao-shu-ju-ku-jian-biao-de-15-ge-xiao-ji-qiao/"/>
      <url>/2022/08/29/liao-liao-shu-ju-ku-jian-biao-de-15-ge-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库建表的15个小技巧"><a href="#数据库建表的15个小技巧" class="headerlink" title="数据库建表的15个小技巧"></a>数据库建表的15个小技巧</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于后端开发同学来说，访问数据库，是代码中必不可少的一个环节。</p><p>系统中收集到用户的核心数据，为了安全性，我们一般会存储到数据库，比如：mysql，oracle等。</p><p>后端开发的日常工作，需要不断的建库和建表，来满足业务需求。</p><p>通常情况下，建库的频率比建表要低很多，所以，我们这篇文章主要讨论建表相关的内容。</p><p>如果我们在建表的时候不注意细节，等后面系统上线之后，表的维护成本变得非常高，而且很容易踩坑。</p><p>今天就跟大家一起聊聊，数据库建表的15个小技巧，希望对你会有所帮助。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292154327.png" alt="img"></p><h2 id="1-名字"><a href="#1-名字" class="headerlink" title="1.名字"></a>1.名字</h2><p>建表的时候，给<code>表</code>、<code>字段</code>和<code>索引</code>起个好名字，真的太重要了。</p><h3 id="1-1-见名知意"><a href="#1-1-见名知意" class="headerlink" title="1.1 见名知意"></a><strong>1.1 见名知意</strong></h3><p>名字就像<code>表</code>、<code>字段</code>和<code>索引</code>的一张脸，可以给人留下第一印象。</p><p>好的名字，言简意赅，见名知意，让人心情愉悦，能够提高沟通和维护成本。</p><p>坏的名字，模拟两可，不知所云。而且显得杂乱无章，看得让人抓狂。</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">用户名称字段定义成：yong_hu_ming、用户_name、name、user_name_123456789<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你看了可能会一脸懵逼，这是什么骚操作？</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">用户名称字段定义成：user_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>温馨提醒一下，名字也不宜过长，尽量控制在<code>30</code>个字符以内。</p></blockquote><h3 id="1-2-大小写"><a href="#1-2-大小写" class="headerlink" title="1.2 大小写"></a><strong>1.2 大小写</strong></h3><p>名字尽量都用<code>小写字母</code>，因为从视觉上，小写字母更容易让人读懂。</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：PRODUCT_NAME、PRODUCT_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全部大写，看起来有点不太直观。而一部分大写，一部分小写，让人看着更不爽。</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：product_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名字还是使用全小写字母，看着更舒服。</p><h3 id="1-3-分隔符"><a href="#1-3-分隔符" class="headerlink" title="1.3 分隔符"></a><strong>1.3 分隔符</strong></h3><p>很多时候，名字为了让人好理解，有可能会包含多个单词。</p><p>那么，多个单词间的<code>分隔符</code>该用什么呢？</p><p><strong>反例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：productname、productName、product name、product@name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单词间没有分隔，或者单词间用驼峰标识，或者单词间用空格分隔，或者单词间用@分隔，这几种方式都不太建议。</p><p><strong>正例：</strong></p><pre class="line-numbers language-none"><code class="language-none">字段名：product_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强烈建议大家在单词间用<code>_</code>分隔。</p><h3 id="1-4-表名"><a href="#1-4-表名" class="headerlink" title="1.4 表名"></a><strong>1.4 表名</strong></h3><p>对于表名，在言简意赅，见名知意的基础之上，建议带上<code>业务前缀</code>。</p><p>如果是订单相关的业务表，可以在表名前面加个前缀：<code>order_</code>。</p><p>例如：order_pay、order_pay_detail等。</p><p>如果是商品相关的业务表，可以在表名前面加个前缀：<code>product_</code>。</p><p>例如：product_spu，product_sku等。</p><p>这样做的好处是为了方便归类，把相同业务的表，可以非常快速的聚集到一起。</p><p>另外，还有有个好处是，如果哪天有非订单的业务，比如：金融业务，也需要建一个名字叫做pay的表，可以取名：finance_pay，就能非常轻松的区分。</p><p>这样就不会出现<code>同名表</code>的情况。</p><h3 id="1-5-字段名称"><a href="#1-5-字段名称" class="headerlink" title="1.5 字段名称"></a><strong>1.5 字段名称</strong></h3><p><code>字段名称</code>是开发人员发挥空间最大，但也最容易发生混乱的地方。</p><p>比如有些表，使用flag表示状态，另外的表用status表示状态。</p><p>可以统一一下，使用status表示状态。</p><p>如果一个表使用了另一个表的主键，可以在另一张表的名后面，加<code>_id</code>或<code>_sys_no</code>，例如：</p><p>在product_sku表中有个字段，是product_spu表的主键，这时候可以取名：product_spu_id或product_spu_sys_no。</p><p>还有创建时间，可以统一成：create_time，修改时间统一成：update_time。</p><p>删除状态固定为：delete_status。</p><p>其实还有很多公共字段，在不同的表之间，可以使用全局统一的命名规则，定义成相同的名称，以便于大家好理解。</p><h3 id="1-6-索引名"><a href="#1-6-索引名" class="headerlink" title="1.6 索引名"></a><strong>1.6 索引名</strong></h3><p>在数据库中，索引有很多种，包括：主键、普通索引、唯一索引、联合索引等。</p><p>每张表的主键只有一个，一般使用：<code>id</code>或者<code>sys_no</code>命名。</p><p>普通索引和联合索引，其实是一类。在建立该类索引时，可以加<code>ix_</code>前缀，比如：ix_product_status。</p><p>唯一索引，可以加<code>ux_</code>前缀，比如：ux_product_code。</p><h2 id="2-字段类型"><a href="#2-字段类型" class="headerlink" title="2.字段类型"></a>2.字段类型</h2><p>在设计表时，我们在选择<code>字段类型</code>时，可发挥空间很大。</p><p>时间格式的数据有：date、datetime和timestamp等等可以选择。</p><p>字符类型的数据有：varchar、char、text等可以选择。</p><p>数字类型的数据有：int、bigint、smallint、tinyint等可以选择。</p><p>说实话，选择很多，有时候是一件好事，也可能是一件坏事。</p><p>如何选择一个<code>合适</code>的字段类型，变成了我们不得不面对的问题。</p><p>如果字段类型选大了，比如：原本只有1-10之间的10个数字，结果选了<code>bigint</code>，它占<code>8</code>个字节。</p><p>其实，1-10之间的10个数字，每个数字<code>1</code>个字节就能保存，选择<code>tinyint</code>更为合适。</p><p>这样会白白浪费7个字节的空间。</p><p>如果字段类型择小了，比如：一个18位的id字段，选择了<code>int</code>类型，最终数据会保存失败。</p><p>所以选择一个合适的字段类型，还是非常重要的一件事情。</p><p>以下原则可以参考一下：</p><ol><li>尽可能选择占用存储空间小的字段类型，在满足正常业务需求的情况下，从小到大，往上选。</li><li>如果字符串长度固定，或者差别不大，可以选择char类型。如果字符串长度差别较大，可以选择varchar类型。</li><li>是否字段，可以选择bit类型。</li><li>枚举字段，可以选择tinyint类型。</li><li>主键字段，可以选择bigint类型。</li><li>金额字段，可以选择decimal类型。</li><li>时间字段，可以选择timestamp或datetime类型。</li></ol><h2 id="3-字段长度"><a href="#3-字段长度" class="headerlink" title="3.字段长度"></a>3.字段长度</h2><p>前面我们已经定义好了<code>字段名称</code>，选择了合适的<code>字段类型</code>，接下来，需要重点关注的是<code>字段长度</code>了。</p><p>比如：varchar(20)，biginit(20)等。</p><p>那么问题来了，<code>varchar</code>代表的是<code>字节</code>长度，还是<code>字符</code>长度呢？</p><p>答：在mysql中除了<code>varchar</code>和<code>char</code>是代表<code>字符</code>长度之外，其余的类型都是代表<code>字节</code>长度。</p><p>biginit(n) 这个<code>n</code>表示什么意思呢？</p><p>假如我们定义的字段类型和长度是：bigint(4)，bigint实际长度是<code>8</code>个字节。</p><p>现在有个数据a=1，a显示4个字节，所以在不满4个字节时前面填充0（前提是该字段设置了zerofill属性），比如：0001。</p><p>当满了4个字节时，比如现在数据是a=123456，它会按照实际的长度显示，比如：123456。</p><p>但需要注意的是，有些mysql客户端即使满了4个字节，也可能只显示4个字节的内容，比如会显示成：1234。</p><p>所以bigint(4)，这里的4表示显示的长度为4个字节，实际长度还是占8个字节。</p><h2 id="4-字段个数"><a href="#4-字段个数" class="headerlink" title="4.字段个数"></a>4.字段个数</h2><p>我们在建表的时候，一定要对<code>字段个数</code>做一些限制。</p><p>我之前见过有人创建的表，有几十个，甚至上百个字段，表中保存的数据非常大，查询效率很低。</p><p>如果真有这种情况，可以将一张<code>大表</code>拆成多张<code>小表</code>，这几张表的主键相同。</p><p>建议每表的字段个数，不要超过<code>20</code>个。</p><h2 id="5-主键"><a href="#5-主键" class="headerlink" title="5. 主键"></a>5. 主键</h2><p>在创建表时，一定要创建<code>主键</code>。</p><p>因为主键自带了主键索引，相比于其他索引，主键索引的查询效率最高，因为它不需要回表。</p><p>此外，主键还是天然的<code>唯一索引</code>，可以根据它来判重。</p><p>在<code>单个</code>数据库中，主键可以通过<code>AUTO_INCREMENT</code>，设置成<code>自动增长</code>的。</p><p>但在<code>分布式</code>数据库中，特别是做了分库分表的业务库中，主键最好由外部算法(比如：雪花算法）生成，它能够保证生成的id是全局唯一的。</p><p>除此之外，主键建议保存跟业务无关的值，减少业务耦合性，方便今后的扩展。</p><p>不过我也见过，有些一对一的表关系，比如：用户表和用户扩展表，在保存数据时是一对一的关系。</p><p>这样，用户扩展表的主键，可以直接保存用户表的主键。</p><h2 id="6-存储引擎"><a href="#6-存储引擎" class="headerlink" title="6.存储引擎"></a>6.存储引擎</h2><p>在<code>mysql5.1</code>以前的版本，默认的存储引擎是<code>myslam</code>，而<code>mysql5.1</code>以后的版本，默认的存储引擎变成了<code>innodb</code>。</p><p>之前我们还在创建表时，还一直纠结要选哪种存储引擎？</p><p><code>myslam</code>的索引和数据分开存储，而有利于查询，但它不支持事务和外键等功能。</p><p>而<code>innodb</code>虽说查询性能，稍微弱一点，但它支持事务和外键等，功能更强大一些。</p><p>以前的建议是：读多写少的表，用myslam存储引擎。而写多读多的表，用innodb。</p><p>但虽说mysql对innodb存储引擎性能的不断优化，现在myslam和innodb查询性能相差已经越来越小。</p><p>所以，建议我们在使用<code>mysql8</code>以后的版本时，直接使用默认的<code>innodb</code>存储引擎即可，无需额外修改存储引擎。</p><h2 id="7-NOT-NULL"><a href="#7-NOT-NULL" class="headerlink" title="7. NOT NULL"></a>7. NOT NULL</h2><p>在创建字段时，需要选择该字段是否允许为<code>NULL</code>。</p><p>我们在定义字段时，应该尽可能明确该字段<code>NOT NULL</code>。</p><p>为什么呢？</p><p>我们主要以innodb存储引擎为例，myslam存储引擎没啥好说的。</p><p>主要有以下原因：</p><ol><li>在innodb中，需要额外的空间存储null值，需要占用更多的空间。</li><li>null值可能会导致索引失效。</li><li>null值只能用<code>is null</code>或者<code>is not null</code>判断，用<code>=号</code>判断永远返回false。</li></ol><p>因此，建议我们在定义字段时，能定义成NOT NULL，就定义成NOT NULL。</p><p>但如果某个字段直接定义成NOT NULL，万一有些地方忘了给该字段写值，就会<code>insert</code>不了数据。</p><p>这也算合理的情况。</p><p>但有一种情况是，系统有新功能上线，新增了字段。上线时一般会先执行sql脚本，再部署代码。</p><p>由于老代码中，不会给新字段赋值，则insert数据时，也会报错。</p><p>由此，非常有必要给NOT NULL的字段设置默认值，特别是后面新增的字段。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">alter table product_sku add column  brand_id int(10) not null default 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-外键"><a href="#8-外键" class="headerlink" title="8.外键"></a>8.外键</h2><p>在mysql中，是存在<code>外键</code>的。</p><p>外键存在的主要作用是：保证数据的<code>一致性</code>和<code>完整性</code>。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create table class (  id int(10) primary key auto_increment,  cname varchar(15));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有个班级表class。</p><p>然后有个student表：</p><pre class="line-numbers language-none"><code class="language-none">create table student(  id int(10) primary key auto_increment,  name varchar(15) not null,  gender varchar(10) not null,  cid int,  foreign key(cid) references class(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中student表中的cid字段，保存的class表的id，这时通过<code>foreign key</code>增加了一个外键。</p><p>这时，如果你直接通过student表的id删除数据，会报异常：</p><pre class="line-numbers language-none"><code class="language-none">a foreign key constraint fails<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须要先删除class表对于的cid那条数据，再删除student表的数据才行，这样能够保证数据的一致性和完整性。</p><blockquote><p>顺便说一句：只有存储引擎是innodb时，才能使用外键。</p></blockquote><p>如果只有两张表的关联还好，但如果有十几张表都建了外键关联，每删除一次主表，都需要同步删除十几张子表，很显然性能会非常差。</p><p>因此，互联网系统中，一般建议不使用外键。因为这类系统更多的是为了性能考虑，宁可牺牲一点数据一致性和完整性。</p><p>除了<code>外键</code>之外，<code>存储过程</code>和<code>触发器</code>也不太建议使用，他们都会影响性能。</p><h2 id="9-索引"><a href="#9-索引" class="headerlink" title="9. 索引"></a>9. 索引</h2><p>在建表时，除了指定<code>主键索引</code>之外，还需要创建一些<code>普通索引</code>。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create table product_sku(  id int(10) primary key auto_increment,  spu_id int(10) not null,  brand_id int(10) not null,  name varchar(15) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建商品表时，使用spu_id（商品组表）和brand_id（品牌表）的id。</p><p>像这类保存其他表id的情况，可以增加普通索引：</p><pre class="line-numbers language-none"><code class="language-none">create table product_sku (  id int(10) primary key auto_increment,  spu_id int(10) not null,  brand_id int(10) not null,  name varchar(15) not null,  KEY `ix_spu_id` (`spu_id`) USING BTREE,  KEY `ix_brand_id` (`brand_id`) USING BTREE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面查表的时候，效率更高。</p><p>但索引字段也不能建的太多，可能会影响保存数据的效率，因为索引需要额外的存储空间。</p><p>建议单表的索引个数不要超过：<code>5</code>个。</p><p>如果在建表时，发现索引个数超过5个了，可以删除部分<code>普通索引</code>，改成<code>联合索引</code>。</p><p>顺便说一句：在创建联合索引的时候，需要使用注意<code>最左匹配原则</code>，不然，建的联合索引效率可能不高。</p><p>对于数据重复率非常高的字段，比如：状态，不建议单独创建普通索引。因为即使加了索引，如果mysql发现<code>全表扫描</code>效率更高，可能会导致索引失效。</p><h2 id="10-时间字段"><a href="#10-时间字段" class="headerlink" title="10.时间字段"></a>10.时间字段</h2><p><code>时间字段</code>的类型，我们可以选择的范围还是比较多的，目前mysql支持：date、datetime、timestamp、varchar等。</p><p><code>varchar</code>类型可能是为了跟接口保持一致，接口中的时间类型是String。</p><p>但如果哪天我们要通过时间范围查询数据，效率会非常低，因为这种情况没法走索引。</p><p><code>date</code>类型主要是为了保存<code>日期</code>，比如：2022-08-29，不适合保存<code>日期和时间</code>，比如：2022-08-29 21:55:20。</p><p>而<code>datetime</code>和<code>timestamp</code>类型更适合我们保存<code>日期和时间</code>。</p><p>但它们有略微区别。</p><ul><li><code>timestamp</code>：用4个字节来保存数据，它的取值范围为<code>1970-01-01 00:00:01</code> UTC ~ <code>2038-01-19 03:14:07</code>。此外，它还跟时区有关。</li><li><code>datetime</code>：用8个字节来保存数据，它的取值范围为<code>1000-01-01 00:00:00</code> ~ <code>9999-12-31 23:59:59</code>。它跟时区无关。</li></ul><p>优先推荐使用<code>datetime</code>类型保存日期和时间，可以保存的时间范围更大一些。</p><blockquote><p>温馨提醒一下，在给时间字段设置默认值是，建议不要设置成：<code>0000-00-00 00:00:00</code>，不然查询表时可能会因为转换不了，而直接报错。</p></blockquote><h2 id="11-金额字段"><a href="#11-金额字段" class="headerlink" title="11.金额字段"></a>11.金额字段</h2><p>mysql中有多个字段可以表示浮点数：float、double、decimal等。</p><p>而<code>float</code>和<code>double</code>可能会丢失精度，因此推荐大家使用<code>decimal</code>类型保存金额。</p><p>一般我们是这样定义浮点数的：decimal(m,n)。</p><p>其中<code>n</code>是指<code>小数</code>的长度，而<code>m</code>是指<code>整数加小数</code>的总长度。</p><p>假如我们定义的金额类型是这样的：decimal(10,2)，则表示整数长度是8位，并且保留2位小数。</p><h2 id="12-唯一索引"><a href="#12-唯一索引" class="headerlink" title="12.唯一索引"></a>12.唯一索引</h2><p><code>唯一索引</code>在我们实际工作中，使用频率相当高。</p><p>你可以给单个字段，加唯一索引，比如：组织机构code。</p><p>也可以给多个字段，加一个联合的唯一索引，比如：分类编号、单位、规格等。</p><p>单个的唯一索引还好，但如果是联合的唯一索引，字段值出现null时，则唯一性约束可能会失效。</p><blockquote><p>创建唯一索引时，相关字段一定不能包含null值，否则唯一性会失效。</p></blockquote><h2 id="13-字符集"><a href="#13-字符集" class="headerlink" title="13.字符集"></a>13.字符集</h2><p>mysql中支持的<code>字符集</code>有很多，常用的有：latin1、utf-8、utf8mb4、GBK等。</p><p>这4种字符集情况如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292155161.png" alt="img"></p><p><code>latin1</code>容易出现乱码问题，在实际项目中使用比较少。</p><p>而<code>GBK</code>支持中文，但不支持国际通用字符，在实际项目中使用也不多。</p><p>从目前来看，mysql的字符集使用最多的还是：<code>utf-8</code>和<code>utf8mb4</code>。</p><p>其中<code>utf-8</code>占用3个字节，比<code>utf8mb4</code>的4个字节，占用更小的存储空间。</p><p>但utf-8有个问题：即无法存储emoji表情，因为emoji表情一般需要4个字节。</p><p>由此，使用utf-8字符集，保存emoji表情时，数据库会直接报错。</p><p>所以，建议在建表时字符集设置成：<code>utf8mb4</code>，会省去很多不必要的麻烦。</p><h2 id="14-排序规则"><a href="#14-排序规则" class="headerlink" title="14. 排序规则"></a>14. 排序规则</h2><p>不知道，你关注过没，在mysql中创建表时，有个<code>COLLATE</code>参数可以设置。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE `order` (  `id` bigint NOT NULL AUTO_INCREMENT,  `code` varchar(20) COLLATE utf8mb4_bin NOT NULL,  `name` varchar(30) COLLATE utf8mb4_bin NOT NULL,  PRIMARY KEY (`id`),  UNIQUE KEY `un_code` (`code`),  KEY `un_code_name` (`code`,`name`) USING BTREE,  KEY `idx_name` (`name`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它是用来设置<code>排序规则</code>的。</p><p>字符排序规则跟字符集有关，比如：字符集如果是<code>utf8mb4</code>，则字符排序规则也是以：<code>utf8mb4_</code>开头的，常用的有：<code>utf8mb4_general_ci</code>、<code>utf8mb4_bin</code>等。</p><p>其中utf8mb4_general_ci排序规则，对字母的大小写不敏感。说得更直白一点，就是不区分大小写。</p><p>而utf8mb4_bin排序规则，对字符大小写敏感，也就是区分大小写。</p><p>说实话，这一点还是非常重要的。</p><p>假如order表中现在有一条记录，name的值是大写的YOYO，但我们用小写的yoyo去查，例如：</p><pre class="line-numbers language-none"><code class="language-none">select * from order where name='yoyo';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果字符排序规则是utf8mb4_general_ci，则可以查出大写的YOYO的那条数据。</p><p>如果字符排序规则是utf8mb4_bin，则查不出来。</p><p>由此，字符排序规则一定要根据实际的业务场景选择，否则容易出现问题。</p><h2 id="15-大字段"><a href="#15-大字段" class="headerlink" title="15.大字段"></a>15.大字段</h2><p>我们在创建表时，对一些特殊字段，要额外关注，比如：<code>大字段</code>，即占用较多存储空间的字段。</p><p>比如：用户的评论，这就属于一个大字段，但这个字段可长可短。</p><p>但一般会对评论的总长度做限制，比如：最多允许输入500个字符。</p><p>如果直接定义成<code>text</code>类型，可能会浪费存储空间，所以建议将这类字段定义成<code>varchar</code>类型的存储效率更高。</p><p>当然，我还见过更大的字段，即该字段直接保存合同数据。</p><p>一个合同可能会占<code>几Mb</code>。</p><p>在mysql中保存这种数据，从系统设计的角度来说，本身就不太合理。</p><p>像合同这种非常大的数据，可以保存到<code>mongodb</code>中，然后在mysql的业务表中，保存mongodb表的id。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不蒜子统计不显示问题</title>
      <link href="/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/"/>
      <url>/2022/08/29/bu-suan-zi-tong-ji-bu-xian-shi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="不蒜子-busuanzi统计不显示的根本原因及解决办法"><a href="#不蒜子-busuanzi统计不显示的根本原因及解决办法" class="headerlink" title="不蒜子(busuanzi统计不显示的根本原因及解决办法)"></a>不蒜子(busuanzi统计不显示的根本原因及解决办法)</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>我使用的 Hexo 博客遇到了的 busuanzi 访问量统计不显示问题，搜索了csdn，知乎，githubstackoverflow，等等也没找到解决办法，直到我发现了大佬的文章(链接见文章末尾)。</p><p>经过一番研究发现是 busuanzi 代码的一处问题和 <a href="https://github.com/EYHN/hexo-helper-live2d">live2d看板娘插件</a>的一处问题凑在一起导致的。</p><p>今天在写博客之前先搜了一下“busuanzi live2d”，发现搜出来一堆结果，我还以为我白研究了..结果点进去一看，第一页结果里没有一个指出了问题的根本原因，而且修复方法基本上都是删 feature 或者换组件，但实际上只要知道问题的根本原因就可以在不妨碍正常功能运作的前提下进行修复。</p><h1 id="2-问题描述"><a href="#2-问题描述" class="headerlink" title="2.问题描述"></a>2.问题描述</h1><p>在一个同时启用了 busuanzi 访问量统计和 live2d 插件的 Hexo 博客里，访问或刷新博客时有大概率 busuanzi 会被隐藏。</p><p>被隐藏的具体表现为，刷新的瞬间 id 为 <code>busuanzi_container_*</code> 的容器是显示的，然后容器的样式很快被设为 <code>display: none</code>。</p><p>查看 F12 的 Network，busuanzi 相关请求正常返回；console 中没有报错。</p><h1 id="3-问题定位"><a href="#3-问题定位" class="headerlink" title="3.问题定位"></a>3.问题定位</h1><h3 id="3-1标签对比："><a href="#3-1标签对比：" class="headerlink" title="3.1标签对比："></a>3.1标签对比：</h3><p><strong>对比发现出现了多余的style=”display: none”;</strong></p><blockquote><p>正常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;次    &lt;/span&gt;&lt;span id="busuanzi_container_site_uv"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"        class="white-color"&gt;&lt;/span&gt;&amp;nbsp;人    &lt;/span&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>异常时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;span id="busuanzi_container_site_pv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="far fa-eye"&gt;&lt;/i&gt;&amp;nbsp;总访问量:&amp;nbsp;&lt;span id="busuanzi_value_site_pv"         class="white-color"&gt;2303950&lt;/span&gt;&amp;nbsp;次&lt;/span&gt;&lt;span id="busuanzi_container_site_uv" style="display: none;"&gt;    |&amp;nbsp;&lt;i class="fas fa-users"&gt;&lt;/i&gt;&amp;nbsp;总访问人数:&amp;nbsp;&lt;span id="busuanzi_value_site_uv"         class="white-color"&gt;160644&lt;/span&gt;&amp;nbsp;人&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2查看display-none的定位"><a href="#3-2查看display-none的定位" class="headerlink" title="3.2查看display: none的定位"></a><strong>3.2查看display: none的定位</strong></h3><p>查看 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">busuanzi.pure.mini.js</a>，发现 <code>display: none</code> 在 <code>hides</code> 函数中被设置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">hides</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 hides 函数仅在一处被调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以是在 <code>a(b), scriptTag.parentElement.removeChild(scriptTag)</code> 抛出异常时容器被隐藏。</p><h3 id="3-3异常原因的定位"><a href="#3-3异常原因的定位" class="headerlink" title="3.3异常原因的定位"></a>3.3异常原因的定位</h3><p>由于在其它地方的 busuanzi 不会出现这一问题，而问题的原因还完全不清楚，为了尽可能还原原始环境以复现问题，我选择了使用 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/header-editor/">Firefox 的 Header Editor 插件</a> 直接在原博客进行测试。具体来说，就是在本地复制一份 busuanzi 的代码，然后跑一个 http server，在 Header Editor 里把 busuanzi 代码的请求重定向到本地的 http server。</p><p>首先，在 <code>catch</code> 中添加 <code>console.error(c)</code>，得到错误内容 <code>TypeError: scriptTag.parentElement is null</code>。</p><p>查看代码中 <code>scriptTag</code> 相关的部分：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">scriptTag = document.createElement("SCRIPT"), scriptTag.type = "text/javascript", scriptTag.defer = !0, scriptTag.src = a, scriptTag.referrerPolicy = "no-referrer-when-downgrade", document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，再在 <code>catch</code> 中添加 <code>s = document.querySelector("[src*=BusuanziCallback]"); console.log(s.parentElement);</code>，发现 <code>s.parentElement</code> 不是 <code>null</code>。</p><p>再添加 <code>console.log(s === scriptTag)</code>，发现结果是 <code>s</code> 和 <code>scriptTag</code> 不同，所以原因在于此时的 <code>scriptTag</code> 变量已经不指向 DOM 中的这个元素了。</p><h3 id="3-4定位到-live2d-插件"><a href="#3-4定位到-live2d-插件" class="headerlink" title="3.4定位到 live2d 插件"></a>3.4定位到 live2d 插件</h3><p>此时我原本是没有任何头绪的，但我发现，并不是每次刷新页面都会触发这一问题，所以没有触发问题时和触发问题时的差别就成了问题的突破口。</p><p>经过多次刷新，我发现，有一串 console 输出，在出现问题时总位于我在 <code>catch</code> 中添加的调试信息之前，而在没出现问题时则位于调试信息之后：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Live2D 2.1.00_1 live2d.core.js:5925:16profile : Desktop live2d.core.js:5913:16  [PROFILE_NAME] = Desktop live2d.core.js:5918:20  [USE_ADJUST_TRANSLATION] = false live2d.core.js:5918:20  [USE_CACHED_POLYGON_IMAGE] = false live2d.core.js:5918:20  [EXPAND_W] = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多亏了 live2d 的这串输出，我得以将问题定位到 live2d 插件上。</p><p>实际上，如果没有这些 console 输出，也可以通过 <code>&lt;head&gt;</code> 中 <code>L2Dwidget.0.min.js</code> 和 <code>busuanzi?jsonpCallback=BusuanziCallback</code> 两个 <code>&lt;script&gt;</code> 的相对位置发现问题，只不过这样的话就更隐蔽更难发现了。</p><h3 id="3-5在-live2d-插件中定位问题"><a href="#3-5在-live2d-插件中定位问题" class="headerlink" title="3.5在 live2d 插件中定位问题"></a>3.5在 live2d 插件中定位问题</h3><p>在 <code>L2Dwidget.min.js</code> 的第一行有源码地址以及时间：<code>/*! https://github.com/xiazeyu/live2d-widget.js built@2019-4-6 09:38:17 */</code></p><p>因为注释中给出的时间不是最新版本，先查看 git log 并 checkout 到相应时间的版本。</p><p>既然问题在于 <code>&lt;script&gt;</code> 元素被重新创建而导致原变量不指向 DOM 中元素，就在代码中 grep <code>head</code>，然后发现 <a href="https://github.com/xiazeyu/live2d-widget.js/blob/fa8f2d831a1a9e96cd85bd1ef593a3336aeac720/src/dialog/index.js#L4-L38">问题代码</a>：<code>document.head.innerHTML += ……</code></p><p>至此，问题原因已发现，就是 live2d 插件通过修改 <code>document.head.innerHTML</code> 来添加样式，导致 busuanzi 的 <code>scriptTag</code> 变量指向的不再是 DOM 中的 <code>&lt;script&gt;</code> 元素。</p><p>实际上，live2d 插件的这一问题 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61">已经修复</a>，但需要使用新版才行。</p><h3 id="3-6解决方法"><a href="#3-6解决方法" class="headerlink" title="3.6解决方法"></a>3.6解决方法</h3><h4 id="3-6-1修改-busuanzi-的解决方法"><a href="#3-6-1修改-busuanzi-的解决方法" class="headerlink" title="3.6.1修改 busuanzi 的解决方法"></a>3.6.1修改 busuanzi 的解决方法</h4><p>因为 busuanzi 的代码较短，而且本来就是用的外部的代码，改起来比较容易。</p><p>把 <code>scriptTag.parentElement.removeChild(scriptTag)</code> 修改为 <code>s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)</code> 即可。可以把修改后的静态文件放在博客里，然后修改 busuanzi <code>&lt;script&gt;</code> 的 <code>src</code>。</p><blockquote><p>相关代码</p><p>busuanzi.js的位置为\themes\hexo-theme-matery\source\libs\others\busuanzi.pure.mini.js</p><p>修改后的 busuanzi 代码（还在 catch 里加了个 console.error）：</p><pre class="line-numbers language-none"><code class="language-none">var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||"interactive"===document.readyState||"complete"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c&gt;a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.detachEvent("onreadystatechange",e),window==window.top&amp;&amp;(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener("DOMContentLoaded",e,!1):document.attachEvent&amp;&amp;(document.attachEvent("onreadystatechange",function(){/loaded|complete/.test(document.readyState)&amp;&amp;e()}),window==window.top&amp;&amp;(c=setInterval(function(){try{a||document.documentElement.doScroll("left")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c="BusuanziCallback_"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace("=BusuanziCallback","="+c),scriptTag=document.createElement("SCRIPT"),scriptTag.type="text/javascript",scriptTag.defer=!0,scriptTag.src=a,scriptTag.referrerPolicy="no-referrer-when-downgrade",document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),s=document.querySelector('[src*=BusuanziCallback]'),s.parentElement.removeChild(s)}catch(c){console.error(c),bszTag.hides()}})}}},bszCaller.fetch("//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:["site_pv","page_pv","site_uv"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById("busuanzi_value_"+b);c&amp;&amp;(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="none")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById("busuanzi_container_"+a);b&amp;&amp;(b.style.display="inline")})}};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后找到</p><pre class="line-numbers language-none"><code class="language-none">&lt;script async="async" src="&lt;%- theme.jsDelivr.url %&gt;&lt;%-url_for(theme.libs.js.busuanzi) %&gt;"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果和我的一样就不需要修改，这也是主题默认的。成功解决</p></blockquote><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208292129016.png" alt="image-20220829212911099"></p><p>网上搜到的很多解决办法是把 <code>id="busuanzi_container_*"</code> 删掉，这样当然就不会被隐藏了，只不过这个隐藏本意是在出错时不把错误或者无意义的内容显示给访客，保留这一行为还是挺好的。</p><h4 id="3-6-2修改-live2d-的解决方法"><a href="#3-6-2修改-live2d-的解决方法" class="headerlink" title="3.6.2修改 live2d 的解决方法"></a>3.6.2修改 live2d 的解决方法</h4><p>总之，就是把 <code>innerHTML +=</code> 换成 <code>createElement</code> 和 <code>appendChild</code>，按 <a href="https://github.com/xiazeyu/live2d-widget.js/pull/61/files#diff-61426849230d9976d234f7c4ca195c623d9bb05a91d76b7ae51501e394f81860L10-R43">xiazeyu/live2d-widget.js#61</a> 改就行。</p><p>live2d 的代码还是挺长的，直接修改 minify 后的代码不太好。如果是 hexo 插件的话，要修改应该也蛮麻烦的。总之，如果你知道怎么改比较好的话可以改，不然的话还是推荐改 busuanzi。</p><h1 id="4-问题启示"><a href="#4-问题启示" class="headerlink" title="4.问题启示"></a>4.问题启示</h1><h2 id="4-1不要修改原-DOM-中的-innerHTML"><a href="#4-1不要修改原-DOM-中的-innerHTML" class="headerlink" title="4.1不要修改原 DOM 中的 innerHTML"></a>4.1不要修改原 DOM 中的 innerHTML</h2><p>直接修改 DOM 元素的 innerHTML 会让其中的元素都重新渲染（加载？创建？），不仅指向其中元素的变量会失效，也可能导致画面闪烁等问题（例如导致 live2d-widget 修复这一问题的不是 busuanzi 失效而是 <a href="https://github.com/EYHN/hexo-helper-live2d/issues/149">CSS 闪烁</a>）。</p><p>所以，如果是添加 DOM 元素，应当避免修改 <code>innerHTML</code>，而应当使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"><code>document.createElement</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"><code>Node.appendChild()</code></a> 以及 <code>removeChild</code>、<code>replaceChild</code>、<code>insertBefore</code> 等 API。</p><h2 id="4-2不要依赖于指向-DOM-元素的变量长时间不改变"><a href="#4-2不要依赖于指向-DOM-元素的变量长时间不改变" class="headerlink" title="4.2不要依赖于指向 DOM 元素的变量长时间不改变"></a>4.2不要依赖于指向 DOM 元素的变量长时间不改变</h2><p>如果 DOM 因各种原因部分重建，指向 DOM 元素的变量很可能不再指向当前 DOM 中的元素。所以，最好不要在过了一段时间后（例如在 callback 中）再次使用指向 DOM 元素的变量，而应当再次获取这一元素。</p><h2 id="4-3不要-silently-fail"><a href="#4-3不要-silently-fail" class="headerlink" title="4.3不要 silently fail"></a>4.3不要 silently fail</h2><p>在处理异常，尤其是未知的异常时，即使不 throw 出去，也最好用 <code>console.error</code> 等方法记录下来。记录在 console 中的错误信息并不会显示给普通用户，但可以给寻找问题所在的用户提供宝贵的提示信息。</p><h2 id="4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试"><a href="#4-4使用-Header-Editor-在对原环境最小修改的情况下进行调试" class="headerlink" title="4.4使用 Header Editor 在对原环境最小修改的情况下进行调试"></a>4.4使用 Header Editor 在对原环境最小修改的情况下进行调试</h2><p>这次使用 Header Editor 调试还是我临时想到的（知道有这么个插件还是以前用 <a href="https://github.com/EndlessCheng/mahjong-helper">mahjong-helper</a>，当然现在已经没在用了）。一开始还用 pastebin 上传代码，效率极低，后来才想起来本地跑个 http server 就可以了..用这个插件来调试还是挺方便的。</p><h2 id="4-5留心依赖版本"><a href="#4-5留心依赖版本" class="headerlink" title="4.5留心依赖版本"></a>4.5留心依赖版本</h2><p>一开始我还在 GitHub 上搜到一个 <a href="https://github.com/JoeyBling/busuanzi.pure.js">busuanzi.pure.js</a>，调了一会儿才发现这个代码和 <a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</a> 不一样..</p><p>live2d 的版本也要注意开头包含时间的注释，因为最新版本已经把问题修复了。</p><p>本文是参考大佬的博客</p><p>原文连接:<a href="https://ouuan.moe/post/2022/08/busuanzi-and-live2d">https://ouuan.moe/post/2022/08/busuanzi-and-live2d</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> 不蒜子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片配置</title>
      <link href="/2022/08/25/hexo-tu-pian-pei-zhi/"/>
      <url>/2022/08/25/hexo-tu-pian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo图片配置"><a href="#hexo图片配置" class="headerlink" title="hexo图片配置"></a><strong>hexo图片配置</strong></h1><h2 id="1-img路径方法插入图片"><a href="#1-img路径方法插入图片" class="headerlink" title="1.img路径方法插入图片"></a>1.img路径方法插入图片</h2><p>markdown是支持html语句的，直接插入就可以使用了。所以该方法用到了HTML的标签，采用img标签相对链接的方式引入图片。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src='url或图片路径' height=400px'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1优缺点"><a href="#1-1优缺点" class="headerlink" title="1.1优缺点"></a>1.1优缺点</h3><p>优点：灵活，可以进行样式控制。</p><p>缺点：稍微麻烦了点。</p><h3 id="1-2适用环境"><a href="#1-2适用环境" class="headerlink" title="1.2适用环境"></a>1.2适用环境</h3><p>用于顶部导航选项的页面（如：关于、标签、分类）中引入图片。<br>因为在hexo生成静态界面时，同一篇文章会在多处页面生成，例如首页、文章详情页等，而不同页面与图片的相对位置是不一样的，而该方式hexo不会自动处理图片引用，所以使用该方式引用本地图片时必须以“/”开头，表示地址都是基于主目录定位的，不会出现有的界面图片显示错误的情况。不是“/”开头表相对当前文档位置进行定位。而顶部导航页只会在一处地方生成，所以不带“/”开头不会出现失效，建议也统一使用“/”，开头。</p><h3 id="1-3使用方法"><a href="#1-3使用方法" class="headerlink" title="1.3使用方法"></a>1.3使用方法</h3><p>在source中新建一个“images”目录用于存放图片，然后再使用“/images/图片名”引用图片。也可以分文章存放图片，会稍微麻烦点。</p><h2 id="2-方式插入图片"><a href="#2-方式插入图片" class="headerlink" title="2.!+[]+()方式插入图片"></a>2.!+[]+()方式插入图片</h2><p>!+[]+()是markdown的默认插入图片语句，采用了Base64方法插入本地图片。</p><p>使用markdown图片插入语句插入本地图片时可以使用Base64方法，base64方法只需要将图片转换为base64格式，将Base64字符串输入图片路径位置即可。网上可以找到在线图片转Base64的工具。</p><pre class="line-numbers language-none"><code class="language-none">![图片说明]('url或图片路径')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1优缺点"><a href="#2-1优缺点" class="headerlink" title="2.1优缺点"></a>2.1优缺点</h3><p>优点：插入图片简便。</p><p>缺点：不能控制图片样式。</p><h3 id="2-2适用环境"><a href="#2-2适用环境" class="headerlink" title="2.2适用环境"></a>2.2适用环境</h3><p>1.给普通文章插入图片，且无须样式控制；<br>2.给顶部导航选项的页面（如：关于、标签、分类）中插入图片，且无须样式控制。</p><p>3.使用该方法引入本地图片同样需要以“/”，开头定位，否则有的界面将会无法正常显示图片，也可以将引图片转换为Base64字符串，然后再引用Base64字符串，Base64字符串太长，写文章时很影响阅读，例如在使用githubpage+Gitalk时候，github的issure最大支持50个长度的字符，如将中文作为标题Base64字符串长度就超出了。</p><h3 id="2-3使用方法"><a href="#2-3使用方法" class="headerlink" title="2.3使用方法"></a>2.3使用方法</h3><p>插入网络图片比较简单，直接在图片链接中写入图片的网络链接就好。</p><p>示例：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg"></p><h2 id="3-通过模板引擎语法插入本地图片"><a href="#3-通过模板引擎语法插入本地图片" class="headerlink" title="3.通过模板引擎语法插入本地图片"></a>3.通过模板引擎语法插入本地图片</h2><h3 id="3-1优缺点"><a href="#3-1优缺点" class="headerlink" title="3.1优缺点"></a>3.1优缺点</h3><p>优点：插入较为便捷，图片按文章存储</p><p>缺点：不能控制样式，不能在顶部导航选项的页面（如：关于、标签、分类）中插入图片。</p><h3 id="3-2适用环境"><a href="#3-2适用环境" class="headerlink" title="3.2适用环境"></a>3.2适用环境</h3><p>普通文章中插入本地图片<br>在顶部导航选项的页面中使用该方法，什么都不会显示（不知道是不是我使用的主题的原因），总之是失败了，什么都没显示，在普通文章中可以正常显示。不能用于插入网络图片。</p><h3 id="3-3使用方法"><a href="#3-3使用方法" class="headerlink" title="3.3使用方法"></a>3.3使用方法</h3><p>要使用该方法首先要修改博客的配置文件“_config.yml”,把配置文件里的post_asset_folder:设置为true，表示启动Asset资源文件夹。这时候新建文章就会自动添加一个同名的文件夹，用于存放资源文件。</p><p>这时候我们把图片放入对应的文件夹即可，但是我们使用“!+[]+()”的格式插入图片却不能成功，因为只是将图片放入文件夹，hexo生成静态界面时并没有处理该图片，所以运行后就找不到图片了。</p><p>所以我们需要使用</p><pre class="line-numbers language-none"><code class="language-none">{%%}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法，使用该方法必须将图片放在新建文件时生成的与该文件同名的目录下，然后使用以下命令格式即可。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">{% asset_img 图片文件名 图片加载失败的描述 %}我文章文件为--index.md图片目录为--images/logo.png插入语句为{% asset_img logo.png 这是一张图片 %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-搭建图床方式"><a href="#4-搭建图床方式" class="headerlink" title="4.搭建图床方式"></a>4.搭建图床方式</h2><p>创建图床的目的是为本地图片等资源生成一个超链，然后将此连接嵌入到 <code>markdown</code> 编写的博客文章中，以此来解决博客中图片等资源的显示问题。本文介绍一种 PicGo + <a href="https://so.csdn.net/so/search?q=Github&amp;spm=1001.2101.3001.7020">Github</a> 搭建的免费图床。本文采用PicGo+Github图床搭建。测试图片地址见2.3示例图，图片地址：</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208241728032.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-1创建Github仓库"><a href="#4-1创建Github仓库" class="headerlink" title="4.1创建Github仓库"></a>4.1创建Github仓库</h3><p>首先打开浏览器访问github的官网。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827870.png" alt="image-20220825082449581"></p><p>点击右上角的+号新建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250827106.png" alt="image-20220825082645630"></p><p>输入仓库名，点击创建仓库</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250829906.png" alt="image-20220825082856239"></p><h3 id="4-2生成Github-Token"><a href="#4-2生成Github-Token" class="headerlink" title="4.2生成Github Token"></a>4.2生成Github Token</h3><p>依次点击Settings -&gt; Developer settings-&gt;Personal access tokens</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857730.png" alt="image-20220825083114015"></p><p>需要注意的是要勾选repo选项</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857268.png" alt="image-20220825083245715"></p><p>创建成功后，会生成一串token，<strong>这串token之后不会再显示</strong>，请认真保存</p><h3 id="4-3下载-PicGo"><a href="#4-3下载-PicGo" class="headerlink" title="4.3下载 PicGo"></a>4.3下载 PicGo</h3><p>PicGo 是一款图片上传的工具，目前支持 SM.MS图床、微博图床，七牛图床，腾讯云COS，阿里云OSS，又拍云图床，Github 等图床，未来将支持更多图床。</p><p>点击 <a href="https://github.com/Molunerfinn/PicGo/releases">这里</a> 下载 PicGo 工具。根据操作系统选择对应的版本，安装到指定目录。</p><p>温馨提示：较低版本的PicGo不支持设置server等功能。当我下载了PicGo2.0.4版本时候是这个样子的。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858951.png" alt="PicGo版本不支持server"></p><p>所以我选择了下载当前的最新版本2.3.0。</p><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">PicGo官网地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857802.png" alt="PicGo 2.3.0"></p><p>由于是国外网站，下载不便，因此这里为大家提供了网盘地址。</p><p><a href="https://www.aliyundrive.com/s/HKKaFtce4Cb">下载地址</a> </p><p>下载完成再行打开发现server选项出现了</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250857879.png" alt="PicGo有了"></p><h3 id="4-4配置-PicGo"><a href="#4-4配置-PicGo" class="headerlink" title="4.4配置 PicGo"></a>4.4配置 PicGo</h3><h4 id="4-4-1-github图床"><a href="#4-4-1-github图床" class="headerlink" title="4.4.1 github图床"></a>4.4.1 github图床</h4><p>选择github图床，配置如下：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242043314.png" alt="image-20220824204355709"></p><p>如果有需要的话可以设置为默认图床，接下来就可以上传图片并同步到你的GitHub仓库了。此时图床已经建立完成，之后的图片以Markdown的格式上传进行引用就大功告成了。</p><pre class="line-numbers language-none"><code class="language-none">https://raw.githubusercontent.com/Yourname/Repositoryname/分支名/img/图片名.图片格式&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4-2-开启server"><a href="#4-4-2-开启server" class="headerlink" title="4.4.2 开启server"></a>4.4.2 开启server</h4><p>PicGo-Server的默认端口是36677，点击开即可。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250858740.png" alt="image-20220825084500728"></p><h3 id="4-5配置-Markdown"><a href="#4-5配置-Markdown" class="headerlink" title="4.5配置 Markdown"></a>4.5配置 Markdown</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写，说人话就是删减版的HTML语言 。</p><h3 id="4-5-1Typora简介"><a href="#4-5-1Typora简介" class="headerlink" title="4.5.1Typora简介"></a>4.5.1Typora简介</h3><p>Typora是一个跨平台的markdown编辑器，使用markdown编辑器写文章优点是排版简洁，痛点则是无法像Word那样直接嵌入图片，插入的图片实际上插入的是图片的路径（可以是本地路径也可以是网络路径），使用网络路径的优点是文档可以跨平台跨设备浏览，需要注意的是早期免费版Typora不支持图床的功能，有人说下载最后一个免费版本0.11.18，当我下载安装完成时候，typora打开报错：This beta version of Typora is expired, please download and install a newer version.也就是说，使用的是0.11.18版本，获取系统时间停止免费版本使用，人家想要你用收费的。网上也提供了两种解决方案，一种是改系统时间，但是修改系统时间后其他软件和功能的时间冲突。另一种是重装低版本的typora，很显然，更低版本的Typora不可能支持图床功能。因此，需要更新Typora版本，推荐大家购买正版支持。这里也为大家提供一个版本，亲测可用，亲测可用，亲测可用。</p><p><a href="https://www.aliyundrive.com/s/DLU5Wveop9Z">下载地址</a> </p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242031850.png" alt="image-20220824203128807"></p><h3 id="4-5-2错误解决"><a href="#4-5-2错误解决" class="headerlink" title="4.5.2错误解决"></a>4.5.2错误解决</h3><p>Failed to fetch</p><pre class="line-numbers language-none"><code class="language-none">Failed to fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误一般是由<strong>端口设置错误</strong>造成的，至于我为什么知道，你看看log文件就懂了。打开picgo的log文件。错误提示是端口繁忙。</p><p><code>解决方法</code>：打开picgo设置，点击设置代理选项，<strong>将端口改为36677端口</strong>，这是picgo推荐的默认端口号，然后保存，成功。</p><p>有的时候，我们的老朋友Failed to fetch还是如约而至，打开端口设置一看，怎么变成了366771呢，问题在于端口冲突，如果你打开了多个picgo程序，就会端口冲突，<strong>picgo自动帮你把36677端口改为366771端口</strong>，导致错误。log文件里也写得很清楚。</p><pre class="line-numbers language-none"><code class="language-none">错误二：{“success”,false}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误相信也有很多小伙伴遇到了，原因是<strong>文件名冲突</strong>了，如果你上传过一张image1.jpg的图片，再上传名称一样的图片就会失败，查看log文件里也写到了。</p><p>办法也很简单，打开picgo设置，将<strong>上传前重命名或者时间戳重命名打开</strong>。如图所示：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242036804.png" alt="image-20220824203657532"></p><p>再次上传文件，出现一个确认文件名称的对话框，点击确定，上传成功！</p><p><strong>授人以鱼不如授人以渔</strong>，上面的三种情况解决方法教给大家了，但是错误总是千奇百怪层出不穷的，如果下次出现上传错误的提示，请大家找到picgo的log文件，自己查看问题的原因嗷。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242038555.png" alt="image-20220824203834034"></p><h2 id="5-hexo-asset-image插件"><a href="#5-hexo-asset-image插件" class="headerlink" title="5.hexo-asset-image插件"></a>5.hexo-asset-image插件</h2><p>毕竟是存储在github仓库里面的，网络不佳根本加载不出来，所以大部分人还是选择使用了hexo-asset-image插件来上传图片，Hexo 本地图片插件: 就是转换 图片相对路径 为 asset_img，能够在 Typora 等 Markdown 编辑器预览 与 Hexo 发布预览 时均能正常显示图片。</p><p>首先下载插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的文件结构是这样的</p><pre class="line-numbers language-none"><code class="language-none">article-Publish├── banner.jpg├── logo.jpg└── rules.jpgarticle-Publish.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次，需要修改hexo根目录 <code>_config.yml</code>文件 <code>post_asset_folder: true</code></p><p>此外，还需要配置Typora的偏好设置，详见4.5.1图。</p><p>完成之后只需要使用</p><pre class="line-numbers language-none"><code class="language-none">![]()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法引用图片，无论是网络图片还是本地图片，插件都会自动帮助我们将图片下载到source/image目录，然后自动更新图片引用，在发布到github上时候，会自动在当前目录下生成一个于文章同名的文件夹，可以说非常方便。</p><p>例如：</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025209.png" alt="image-20220824202521064"></p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208242025989.png" alt="image-20220824202439164"></p><p>另外hexo-theme-matery也提供了cdn加速功能，只需在主题的_config.yml文件中配置</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/用户名/githubpages地址@分支名/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器输入即可访问到</p><pre class="line-numbers language-none"><code class="language-none">[cdn资源访问]&nbsp;https://cdn.jsdelivr.net/gh/Beaumon/beaumon.github.io@master/&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样能够查看到插件生成的目录hexo-theme-matery-主题美化。</p><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208250933131.png" alt="jddelivr 图片"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">方案一<span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">'url或图片路径'</span> <span class="token assign-left variable">height</span><span class="token operator">=</span>400px<span class="token string">'&gt;方案二![图片说明]('</span>url或图片路径'<span class="token punctuation">)</span>方案三<span class="token punctuation">{</span>% asset_img logo.png 这是一张图片 %<span class="token punctuation">}</span>方案四搭建图床大家可根据自己的喜好自行选择使用哪一种图片引用方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme主题 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/23/hello-world/"/>
      <url>/2022/08/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/beaumon/cloud-picture/master/img/202208261730103.png"></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
